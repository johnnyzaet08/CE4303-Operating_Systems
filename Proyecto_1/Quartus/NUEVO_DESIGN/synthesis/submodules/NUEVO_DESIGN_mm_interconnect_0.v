// NUEVO_DESIGN_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 18.1 625

`timescale 1 ps / 1 ps
module NUEVO_DESIGN_mm_interconnect_0 (
		input  wire [11:0] hps_0_h2f_axi_master_awid,                                           //                                          hps_0_h2f_axi_master.awid
		input  wire [29:0] hps_0_h2f_axi_master_awaddr,                                         //                                                              .awaddr
		input  wire [3:0]  hps_0_h2f_axi_master_awlen,                                          //                                                              .awlen
		input  wire [2:0]  hps_0_h2f_axi_master_awsize,                                         //                                                              .awsize
		input  wire [1:0]  hps_0_h2f_axi_master_awburst,                                        //                                                              .awburst
		input  wire [1:0]  hps_0_h2f_axi_master_awlock,                                         //                                                              .awlock
		input  wire [3:0]  hps_0_h2f_axi_master_awcache,                                        //                                                              .awcache
		input  wire [2:0]  hps_0_h2f_axi_master_awprot,                                         //                                                              .awprot
		input  wire        hps_0_h2f_axi_master_awvalid,                                        //                                                              .awvalid
		output wire        hps_0_h2f_axi_master_awready,                                        //                                                              .awready
		input  wire [11:0] hps_0_h2f_axi_master_wid,                                            //                                                              .wid
		input  wire [63:0] hps_0_h2f_axi_master_wdata,                                          //                                                              .wdata
		input  wire [7:0]  hps_0_h2f_axi_master_wstrb,                                          //                                                              .wstrb
		input  wire        hps_0_h2f_axi_master_wlast,                                          //                                                              .wlast
		input  wire        hps_0_h2f_axi_master_wvalid,                                         //                                                              .wvalid
		output wire        hps_0_h2f_axi_master_wready,                                         //                                                              .wready
		output wire [11:0] hps_0_h2f_axi_master_bid,                                            //                                                              .bid
		output wire [1:0]  hps_0_h2f_axi_master_bresp,                                          //                                                              .bresp
		output wire        hps_0_h2f_axi_master_bvalid,                                         //                                                              .bvalid
		input  wire        hps_0_h2f_axi_master_bready,                                         //                                                              .bready
		input  wire [11:0] hps_0_h2f_axi_master_arid,                                           //                                                              .arid
		input  wire [29:0] hps_0_h2f_axi_master_araddr,                                         //                                                              .araddr
		input  wire [3:0]  hps_0_h2f_axi_master_arlen,                                          //                                                              .arlen
		input  wire [2:0]  hps_0_h2f_axi_master_arsize,                                         //                                                              .arsize
		input  wire [1:0]  hps_0_h2f_axi_master_arburst,                                        //                                                              .arburst
		input  wire [1:0]  hps_0_h2f_axi_master_arlock,                                         //                                                              .arlock
		input  wire [3:0]  hps_0_h2f_axi_master_arcache,                                        //                                                              .arcache
		input  wire [2:0]  hps_0_h2f_axi_master_arprot,                                         //                                                              .arprot
		input  wire        hps_0_h2f_axi_master_arvalid,                                        //                                                              .arvalid
		output wire        hps_0_h2f_axi_master_arready,                                        //                                                              .arready
		output wire [11:0] hps_0_h2f_axi_master_rid,                                            //                                                              .rid
		output wire [63:0] hps_0_h2f_axi_master_rdata,                                          //                                                              .rdata
		output wire [1:0]  hps_0_h2f_axi_master_rresp,                                          //                                                              .rresp
		output wire        hps_0_h2f_axi_master_rlast,                                          //                                                              .rlast
		output wire        hps_0_h2f_axi_master_rvalid,                                         //                                                              .rvalid
		input  wire        hps_0_h2f_axi_master_rready,                                         //                                                              .rready
		input  wire [11:0] hps_0_h2f_lw_axi_master_awid,                                        //                                       hps_0_h2f_lw_axi_master.awid
		input  wire [20:0] hps_0_h2f_lw_axi_master_awaddr,                                      //                                                              .awaddr
		input  wire [3:0]  hps_0_h2f_lw_axi_master_awlen,                                       //                                                              .awlen
		input  wire [2:0]  hps_0_h2f_lw_axi_master_awsize,                                      //                                                              .awsize
		input  wire [1:0]  hps_0_h2f_lw_axi_master_awburst,                                     //                                                              .awburst
		input  wire [1:0]  hps_0_h2f_lw_axi_master_awlock,                                      //                                                              .awlock
		input  wire [3:0]  hps_0_h2f_lw_axi_master_awcache,                                     //                                                              .awcache
		input  wire [2:0]  hps_0_h2f_lw_axi_master_awprot,                                      //                                                              .awprot
		input  wire        hps_0_h2f_lw_axi_master_awvalid,                                     //                                                              .awvalid
		output wire        hps_0_h2f_lw_axi_master_awready,                                     //                                                              .awready
		input  wire [11:0] hps_0_h2f_lw_axi_master_wid,                                         //                                                              .wid
		input  wire [31:0] hps_0_h2f_lw_axi_master_wdata,                                       //                                                              .wdata
		input  wire [3:0]  hps_0_h2f_lw_axi_master_wstrb,                                       //                                                              .wstrb
		input  wire        hps_0_h2f_lw_axi_master_wlast,                                       //                                                              .wlast
		input  wire        hps_0_h2f_lw_axi_master_wvalid,                                      //                                                              .wvalid
		output wire        hps_0_h2f_lw_axi_master_wready,                                      //                                                              .wready
		output wire [11:0] hps_0_h2f_lw_axi_master_bid,                                         //                                                              .bid
		output wire [1:0]  hps_0_h2f_lw_axi_master_bresp,                                       //                                                              .bresp
		output wire        hps_0_h2f_lw_axi_master_bvalid,                                      //                                                              .bvalid
		input  wire        hps_0_h2f_lw_axi_master_bready,                                      //                                                              .bready
		input  wire [11:0] hps_0_h2f_lw_axi_master_arid,                                        //                                                              .arid
		input  wire [20:0] hps_0_h2f_lw_axi_master_araddr,                                      //                                                              .araddr
		input  wire [3:0]  hps_0_h2f_lw_axi_master_arlen,                                       //                                                              .arlen
		input  wire [2:0]  hps_0_h2f_lw_axi_master_arsize,                                      //                                                              .arsize
		input  wire [1:0]  hps_0_h2f_lw_axi_master_arburst,                                     //                                                              .arburst
		input  wire [1:0]  hps_0_h2f_lw_axi_master_arlock,                                      //                                                              .arlock
		input  wire [3:0]  hps_0_h2f_lw_axi_master_arcache,                                     //                                                              .arcache
		input  wire [2:0]  hps_0_h2f_lw_axi_master_arprot,                                      //                                                              .arprot
		input  wire        hps_0_h2f_lw_axi_master_arvalid,                                     //                                                              .arvalid
		output wire        hps_0_h2f_lw_axi_master_arready,                                     //                                                              .arready
		output wire [11:0] hps_0_h2f_lw_axi_master_rid,                                         //                                                              .rid
		output wire [31:0] hps_0_h2f_lw_axi_master_rdata,                                       //                                                              .rdata
		output wire [1:0]  hps_0_h2f_lw_axi_master_rresp,                                       //                                                              .rresp
		output wire        hps_0_h2f_lw_axi_master_rlast,                                       //                                                              .rlast
		output wire        hps_0_h2f_lw_axi_master_rvalid,                                      //                                                              .rvalid
		input  wire        hps_0_h2f_lw_axi_master_rready,                                      //                                                              .rready
		input  wire        clk_0_clk_clk,                                                       //                                                     clk_0_clk.clk
		input  wire        hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset, // hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset.reset
		input  wire        nios2_qsys_0_reset_n_reset_bridge_in_reset_reset,                    //                    nios2_qsys_0_reset_n_reset_bridge_in_reset.reset
		input  wire [26:0] nios2_qsys_0_data_master_address,                                    //                                      nios2_qsys_0_data_master.address
		output wire        nios2_qsys_0_data_master_waitrequest,                                //                                                              .waitrequest
		input  wire [3:0]  nios2_qsys_0_data_master_byteenable,                                 //                                                              .byteenable
		input  wire        nios2_qsys_0_data_master_read,                                       //                                                              .read
		output wire [31:0] nios2_qsys_0_data_master_readdata,                                   //                                                              .readdata
		input  wire        nios2_qsys_0_data_master_write,                                      //                                                              .write
		input  wire [31:0] nios2_qsys_0_data_master_writedata,                                  //                                                              .writedata
		output wire [1:0]  KEYS_s1_address,                                                     //                                                       KEYS_s1.address
		input  wire [31:0] KEYS_s1_readdata,                                                    //                                                              .readdata
		output wire [1:0]  LEDS_s1_address,                                                     //                                                       LEDS_s1.address
		output wire        LEDS_s1_write,                                                       //                                                              .write
		input  wire [31:0] LEDS_s1_readdata,                                                    //                                                              .readdata
		output wire [31:0] LEDS_s1_writedata,                                                   //                                                              .writedata
		output wire        LEDS_s1_chipselect,                                                  //                                                              .chipselect
		output wire [15:0] RAM_s1_address,                                                      //                                                        RAM_s1.address
		output wire        RAM_s1_write,                                                        //                                                              .write
		input  wire [31:0] RAM_s1_readdata,                                                     //                                                              .readdata
		output wire [31:0] RAM_s1_writedata,                                                    //                                                              .writedata
		output wire [3:0]  RAM_s1_byteenable,                                                   //                                                              .byteenable
		output wire        RAM_s1_chipselect,                                                   //                                                              .chipselect
		output wire        RAM_s1_clken,                                                        //                                                              .clken
		output wire [24:0] SDRAM_s1_address,                                                    //                                                      SDRAM_s1.address
		output wire        SDRAM_s1_write,                                                      //                                                              .write
		output wire        SDRAM_s1_read,                                                       //                                                              .read
		input  wire [15:0] SDRAM_s1_readdata,                                                   //                                                              .readdata
		output wire [15:0] SDRAM_s1_writedata,                                                  //                                                              .writedata
		output wire [1:0]  SDRAM_s1_byteenable,                                                 //                                                              .byteenable
		input  wire        SDRAM_s1_readdatavalid,                                              //                                                              .readdatavalid
		input  wire        SDRAM_s1_waitrequest,                                                //                                                              .waitrequest
		output wire        SDRAM_s1_chipselect,                                                 //                                                              .chipselect
		output wire [1:0]  SEG1_s1_address,                                                     //                                                       SEG1_s1.address
		output wire        SEG1_s1_write,                                                       //                                                              .write
		input  wire [31:0] SEG1_s1_readdata,                                                    //                                                              .readdata
		output wire [31:0] SEG1_s1_writedata,                                                   //                                                              .writedata
		output wire        SEG1_s1_chipselect,                                                  //                                                              .chipselect
		output wire [1:0]  SEG2_s1_address,                                                     //                                                       SEG2_s1.address
		output wire        SEG2_s1_write,                                                       //                                                              .write
		input  wire [31:0] SEG2_s1_readdata,                                                    //                                                              .readdata
		output wire [31:0] SEG2_s1_writedata,                                                   //                                                              .writedata
		output wire        SEG2_s1_chipselect,                                                  //                                                              .chipselect
		output wire [1:0]  SEG3_s1_address,                                                     //                                                       SEG3_s1.address
		output wire        SEG3_s1_write,                                                       //                                                              .write
		input  wire [31:0] SEG3_s1_readdata,                                                    //                                                              .readdata
		output wire [31:0] SEG3_s1_writedata,                                                   //                                                              .writedata
		output wire        SEG3_s1_chipselect,                                                  //                                                              .chipselect
		output wire [1:0]  SEG4_s1_address,                                                     //                                                       SEG4_s1.address
		output wire        SEG4_s1_write,                                                       //                                                              .write
		input  wire [31:0] SEG4_s1_readdata,                                                    //                                                              .readdata
		output wire [31:0] SEG4_s1_writedata,                                                   //                                                              .writedata
		output wire        SEG4_s1_chipselect,                                                  //                                                              .chipselect
		output wire [1:0]  SEG5_s1_address,                                                     //                                                       SEG5_s1.address
		output wire        SEG5_s1_write,                                                       //                                                              .write
		input  wire [31:0] SEG5_s1_readdata,                                                    //                                                              .readdata
		output wire [31:0] SEG5_s1_writedata,                                                   //                                                              .writedata
		output wire        SEG5_s1_chipselect,                                                  //                                                              .chipselect
		output wire [1:0]  SEG6_s1_address,                                                     //                                                       SEG6_s1.address
		output wire        SEG6_s1_write,                                                       //                                                              .write
		input  wire [31:0] SEG6_s1_readdata,                                                    //                                                              .readdata
		output wire [31:0] SEG6_s1_writedata,                                                   //                                                              .writedata
		output wire        SEG6_s1_chipselect,                                                  //                                                              .chipselect
		output wire [1:0]  SW_s1_address,                                                       //                                                         SW_s1.address
		input  wire [31:0] SW_s1_readdata,                                                      //                                                              .readdata
		output wire [2:0]  TIMER_s1_address,                                                    //                                                      TIMER_s1.address
		output wire        TIMER_s1_write,                                                      //                                                              .write
		input  wire [15:0] TIMER_s1_readdata,                                                   //                                                              .readdata
		output wire [15:0] TIMER_s1_writedata,                                                  //                                                              .writedata
		output wire        TIMER_s1_chipselect                                                  //                                                              .chipselect
	);

	wire          nios2_qsys_0_data_master_translator_avalon_universal_master_0_waitrequest;   // nios2_qsys_0_data_master_agent:av_waitrequest -> nios2_qsys_0_data_master_translator:uav_waitrequest
	wire   [31:0] nios2_qsys_0_data_master_translator_avalon_universal_master_0_readdata;      // nios2_qsys_0_data_master_agent:av_readdata -> nios2_qsys_0_data_master_translator:uav_readdata
	wire          nios2_qsys_0_data_master_translator_avalon_universal_master_0_debugaccess;   // nios2_qsys_0_data_master_translator:uav_debugaccess -> nios2_qsys_0_data_master_agent:av_debugaccess
	wire   [29:0] nios2_qsys_0_data_master_translator_avalon_universal_master_0_address;       // nios2_qsys_0_data_master_translator:uav_address -> nios2_qsys_0_data_master_agent:av_address
	wire          nios2_qsys_0_data_master_translator_avalon_universal_master_0_read;          // nios2_qsys_0_data_master_translator:uav_read -> nios2_qsys_0_data_master_agent:av_read
	wire    [3:0] nios2_qsys_0_data_master_translator_avalon_universal_master_0_byteenable;    // nios2_qsys_0_data_master_translator:uav_byteenable -> nios2_qsys_0_data_master_agent:av_byteenable
	wire          nios2_qsys_0_data_master_translator_avalon_universal_master_0_readdatavalid; // nios2_qsys_0_data_master_agent:av_readdatavalid -> nios2_qsys_0_data_master_translator:uav_readdatavalid
	wire          nios2_qsys_0_data_master_translator_avalon_universal_master_0_lock;          // nios2_qsys_0_data_master_translator:uav_lock -> nios2_qsys_0_data_master_agent:av_lock
	wire          nios2_qsys_0_data_master_translator_avalon_universal_master_0_write;         // nios2_qsys_0_data_master_translator:uav_write -> nios2_qsys_0_data_master_agent:av_write
	wire   [31:0] nios2_qsys_0_data_master_translator_avalon_universal_master_0_writedata;     // nios2_qsys_0_data_master_translator:uav_writedata -> nios2_qsys_0_data_master_agent:av_writedata
	wire    [2:0] nios2_qsys_0_data_master_translator_avalon_universal_master_0_burstcount;    // nios2_qsys_0_data_master_translator:uav_burstcount -> nios2_qsys_0_data_master_agent:av_burstcount
	wire          rsp_mux_src_valid;                                                           // rsp_mux:src_valid -> nios2_qsys_0_data_master_agent:rp_valid
	wire  [128:0] rsp_mux_src_data;                                                            // rsp_mux:src_data -> nios2_qsys_0_data_master_agent:rp_data
	wire          rsp_mux_src_ready;                                                           // nios2_qsys_0_data_master_agent:rp_ready -> rsp_mux:src_ready
	wire   [11:0] rsp_mux_src_channel;                                                         // rsp_mux:src_channel -> nios2_qsys_0_data_master_agent:rp_channel
	wire          rsp_mux_src_startofpacket;                                                   // rsp_mux:src_startofpacket -> nios2_qsys_0_data_master_agent:rp_startofpacket
	wire          rsp_mux_src_endofpacket;                                                     // rsp_mux:src_endofpacket -> nios2_qsys_0_data_master_agent:rp_endofpacket
	wire          rsp_mux_003_src_valid;                                                       // rsp_mux_003:src_valid -> hps_0_h2f_axi_master_agent:write_rp_valid
	wire  [164:0] rsp_mux_003_src_data;                                                        // rsp_mux_003:src_data -> hps_0_h2f_axi_master_agent:write_rp_data
	wire          rsp_mux_003_src_ready;                                                       // hps_0_h2f_axi_master_agent:write_rp_ready -> rsp_mux_003:src_ready
	wire   [11:0] rsp_mux_003_src_channel;                                                     // rsp_mux_003:src_channel -> hps_0_h2f_axi_master_agent:write_rp_channel
	wire          rsp_mux_003_src_startofpacket;                                               // rsp_mux_003:src_startofpacket -> hps_0_h2f_axi_master_agent:write_rp_startofpacket
	wire          rsp_mux_003_src_endofpacket;                                                 // rsp_mux_003:src_endofpacket -> hps_0_h2f_axi_master_agent:write_rp_endofpacket
	wire          rsp_mux_004_src_valid;                                                       // rsp_mux_004:src_valid -> hps_0_h2f_axi_master_agent:read_rp_valid
	wire  [164:0] rsp_mux_004_src_data;                                                        // rsp_mux_004:src_data -> hps_0_h2f_axi_master_agent:read_rp_data
	wire          rsp_mux_004_src_ready;                                                       // hps_0_h2f_axi_master_agent:read_rp_ready -> rsp_mux_004:src_ready
	wire   [11:0] rsp_mux_004_src_channel;                                                     // rsp_mux_004:src_channel -> hps_0_h2f_axi_master_agent:read_rp_channel
	wire          rsp_mux_004_src_startofpacket;                                               // rsp_mux_004:src_startofpacket -> hps_0_h2f_axi_master_agent:read_rp_startofpacket
	wire          rsp_mux_004_src_endofpacket;                                                 // rsp_mux_004:src_endofpacket -> hps_0_h2f_axi_master_agent:read_rp_endofpacket
	wire   [31:0] ram_s1_agent_m0_readdata;                                                    // RAM_s1_translator:uav_readdata -> RAM_s1_agent:m0_readdata
	wire          ram_s1_agent_m0_waitrequest;                                                 // RAM_s1_translator:uav_waitrequest -> RAM_s1_agent:m0_waitrequest
	wire          ram_s1_agent_m0_debugaccess;                                                 // RAM_s1_agent:m0_debugaccess -> RAM_s1_translator:uav_debugaccess
	wire   [29:0] ram_s1_agent_m0_address;                                                     // RAM_s1_agent:m0_address -> RAM_s1_translator:uav_address
	wire    [3:0] ram_s1_agent_m0_byteenable;                                                  // RAM_s1_agent:m0_byteenable -> RAM_s1_translator:uav_byteenable
	wire          ram_s1_agent_m0_read;                                                        // RAM_s1_agent:m0_read -> RAM_s1_translator:uav_read
	wire          ram_s1_agent_m0_readdatavalid;                                               // RAM_s1_translator:uav_readdatavalid -> RAM_s1_agent:m0_readdatavalid
	wire          ram_s1_agent_m0_lock;                                                        // RAM_s1_agent:m0_lock -> RAM_s1_translator:uav_lock
	wire   [31:0] ram_s1_agent_m0_writedata;                                                   // RAM_s1_agent:m0_writedata -> RAM_s1_translator:uav_writedata
	wire          ram_s1_agent_m0_write;                                                       // RAM_s1_agent:m0_write -> RAM_s1_translator:uav_write
	wire    [2:0] ram_s1_agent_m0_burstcount;                                                  // RAM_s1_agent:m0_burstcount -> RAM_s1_translator:uav_burstcount
	wire          ram_s1_agent_rf_source_valid;                                                // RAM_s1_agent:rf_source_valid -> RAM_s1_agent_rsp_fifo:in_valid
	wire  [129:0] ram_s1_agent_rf_source_data;                                                 // RAM_s1_agent:rf_source_data -> RAM_s1_agent_rsp_fifo:in_data
	wire          ram_s1_agent_rf_source_ready;                                                // RAM_s1_agent_rsp_fifo:in_ready -> RAM_s1_agent:rf_source_ready
	wire          ram_s1_agent_rf_source_startofpacket;                                        // RAM_s1_agent:rf_source_startofpacket -> RAM_s1_agent_rsp_fifo:in_startofpacket
	wire          ram_s1_agent_rf_source_endofpacket;                                          // RAM_s1_agent:rf_source_endofpacket -> RAM_s1_agent_rsp_fifo:in_endofpacket
	wire          ram_s1_agent_rsp_fifo_out_valid;                                             // RAM_s1_agent_rsp_fifo:out_valid -> RAM_s1_agent:rf_sink_valid
	wire  [129:0] ram_s1_agent_rsp_fifo_out_data;                                              // RAM_s1_agent_rsp_fifo:out_data -> RAM_s1_agent:rf_sink_data
	wire          ram_s1_agent_rsp_fifo_out_ready;                                             // RAM_s1_agent:rf_sink_ready -> RAM_s1_agent_rsp_fifo:out_ready
	wire          ram_s1_agent_rsp_fifo_out_startofpacket;                                     // RAM_s1_agent_rsp_fifo:out_startofpacket -> RAM_s1_agent:rf_sink_startofpacket
	wire          ram_s1_agent_rsp_fifo_out_endofpacket;                                       // RAM_s1_agent_rsp_fifo:out_endofpacket -> RAM_s1_agent:rf_sink_endofpacket
	wire          ram_s1_agent_rdata_fifo_src_valid;                                           // RAM_s1_agent:rdata_fifo_src_valid -> RAM_s1_agent_rdata_fifo:in_valid
	wire   [33:0] ram_s1_agent_rdata_fifo_src_data;                                            // RAM_s1_agent:rdata_fifo_src_data -> RAM_s1_agent_rdata_fifo:in_data
	wire          ram_s1_agent_rdata_fifo_src_ready;                                           // RAM_s1_agent_rdata_fifo:in_ready -> RAM_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_src_valid;                                                           // cmd_mux:src_valid -> RAM_s1_agent:cp_valid
	wire  [128:0] cmd_mux_src_data;                                                            // cmd_mux:src_data -> RAM_s1_agent:cp_data
	wire          cmd_mux_src_ready;                                                           // RAM_s1_agent:cp_ready -> cmd_mux:src_ready
	wire   [11:0] cmd_mux_src_channel;                                                         // cmd_mux:src_channel -> RAM_s1_agent:cp_channel
	wire          cmd_mux_src_startofpacket;                                                   // cmd_mux:src_startofpacket -> RAM_s1_agent:cp_startofpacket
	wire          cmd_mux_src_endofpacket;                                                     // cmd_mux:src_endofpacket -> RAM_s1_agent:cp_endofpacket
	wire   [31:0] timer_s1_agent_m0_readdata;                                                  // TIMER_s1_translator:uav_readdata -> TIMER_s1_agent:m0_readdata
	wire          timer_s1_agent_m0_waitrequest;                                               // TIMER_s1_translator:uav_waitrequest -> TIMER_s1_agent:m0_waitrequest
	wire          timer_s1_agent_m0_debugaccess;                                               // TIMER_s1_agent:m0_debugaccess -> TIMER_s1_translator:uav_debugaccess
	wire   [29:0] timer_s1_agent_m0_address;                                                   // TIMER_s1_agent:m0_address -> TIMER_s1_translator:uav_address
	wire    [3:0] timer_s1_agent_m0_byteenable;                                                // TIMER_s1_agent:m0_byteenable -> TIMER_s1_translator:uav_byteenable
	wire          timer_s1_agent_m0_read;                                                      // TIMER_s1_agent:m0_read -> TIMER_s1_translator:uav_read
	wire          timer_s1_agent_m0_readdatavalid;                                             // TIMER_s1_translator:uav_readdatavalid -> TIMER_s1_agent:m0_readdatavalid
	wire          timer_s1_agent_m0_lock;                                                      // TIMER_s1_agent:m0_lock -> TIMER_s1_translator:uav_lock
	wire   [31:0] timer_s1_agent_m0_writedata;                                                 // TIMER_s1_agent:m0_writedata -> TIMER_s1_translator:uav_writedata
	wire          timer_s1_agent_m0_write;                                                     // TIMER_s1_agent:m0_write -> TIMER_s1_translator:uav_write
	wire    [2:0] timer_s1_agent_m0_burstcount;                                                // TIMER_s1_agent:m0_burstcount -> TIMER_s1_translator:uav_burstcount
	wire          timer_s1_agent_rf_source_valid;                                              // TIMER_s1_agent:rf_source_valid -> TIMER_s1_agent_rsp_fifo:in_valid
	wire  [129:0] timer_s1_agent_rf_source_data;                                               // TIMER_s1_agent:rf_source_data -> TIMER_s1_agent_rsp_fifo:in_data
	wire          timer_s1_agent_rf_source_ready;                                              // TIMER_s1_agent_rsp_fifo:in_ready -> TIMER_s1_agent:rf_source_ready
	wire          timer_s1_agent_rf_source_startofpacket;                                      // TIMER_s1_agent:rf_source_startofpacket -> TIMER_s1_agent_rsp_fifo:in_startofpacket
	wire          timer_s1_agent_rf_source_endofpacket;                                        // TIMER_s1_agent:rf_source_endofpacket -> TIMER_s1_agent_rsp_fifo:in_endofpacket
	wire          timer_s1_agent_rsp_fifo_out_valid;                                           // TIMER_s1_agent_rsp_fifo:out_valid -> TIMER_s1_agent:rf_sink_valid
	wire  [129:0] timer_s1_agent_rsp_fifo_out_data;                                            // TIMER_s1_agent_rsp_fifo:out_data -> TIMER_s1_agent:rf_sink_data
	wire          timer_s1_agent_rsp_fifo_out_ready;                                           // TIMER_s1_agent:rf_sink_ready -> TIMER_s1_agent_rsp_fifo:out_ready
	wire          timer_s1_agent_rsp_fifo_out_startofpacket;                                   // TIMER_s1_agent_rsp_fifo:out_startofpacket -> TIMER_s1_agent:rf_sink_startofpacket
	wire          timer_s1_agent_rsp_fifo_out_endofpacket;                                     // TIMER_s1_agent_rsp_fifo:out_endofpacket -> TIMER_s1_agent:rf_sink_endofpacket
	wire          timer_s1_agent_rdata_fifo_src_valid;                                         // TIMER_s1_agent:rdata_fifo_src_valid -> TIMER_s1_agent_rdata_fifo:in_valid
	wire   [33:0] timer_s1_agent_rdata_fifo_src_data;                                          // TIMER_s1_agent:rdata_fifo_src_data -> TIMER_s1_agent_rdata_fifo:in_data
	wire          timer_s1_agent_rdata_fifo_src_ready;                                         // TIMER_s1_agent_rdata_fifo:in_ready -> TIMER_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_001_src_valid;                                                       // cmd_mux_001:src_valid -> TIMER_s1_agent:cp_valid
	wire  [128:0] cmd_mux_001_src_data;                                                        // cmd_mux_001:src_data -> TIMER_s1_agent:cp_data
	wire          cmd_mux_001_src_ready;                                                       // TIMER_s1_agent:cp_ready -> cmd_mux_001:src_ready
	wire   [11:0] cmd_mux_001_src_channel;                                                     // cmd_mux_001:src_channel -> TIMER_s1_agent:cp_channel
	wire          cmd_mux_001_src_startofpacket;                                               // cmd_mux_001:src_startofpacket -> TIMER_s1_agent:cp_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                                 // cmd_mux_001:src_endofpacket -> TIMER_s1_agent:cp_endofpacket
	wire   [15:0] sdram_s1_agent_m0_readdata;                                                  // SDRAM_s1_translator:uav_readdata -> SDRAM_s1_agent:m0_readdata
	wire          sdram_s1_agent_m0_waitrequest;                                               // SDRAM_s1_translator:uav_waitrequest -> SDRAM_s1_agent:m0_waitrequest
	wire          sdram_s1_agent_m0_debugaccess;                                               // SDRAM_s1_agent:m0_debugaccess -> SDRAM_s1_translator:uav_debugaccess
	wire   [29:0] sdram_s1_agent_m0_address;                                                   // SDRAM_s1_agent:m0_address -> SDRAM_s1_translator:uav_address
	wire    [1:0] sdram_s1_agent_m0_byteenable;                                                // SDRAM_s1_agent:m0_byteenable -> SDRAM_s1_translator:uav_byteenable
	wire          sdram_s1_agent_m0_read;                                                      // SDRAM_s1_agent:m0_read -> SDRAM_s1_translator:uav_read
	wire          sdram_s1_agent_m0_readdatavalid;                                             // SDRAM_s1_translator:uav_readdatavalid -> SDRAM_s1_agent:m0_readdatavalid
	wire          sdram_s1_agent_m0_lock;                                                      // SDRAM_s1_agent:m0_lock -> SDRAM_s1_translator:uav_lock
	wire   [15:0] sdram_s1_agent_m0_writedata;                                                 // SDRAM_s1_agent:m0_writedata -> SDRAM_s1_translator:uav_writedata
	wire          sdram_s1_agent_m0_write;                                                     // SDRAM_s1_agent:m0_write -> SDRAM_s1_translator:uav_write
	wire    [1:0] sdram_s1_agent_m0_burstcount;                                                // SDRAM_s1_agent:m0_burstcount -> SDRAM_s1_translator:uav_burstcount
	wire          sdram_s1_agent_rf_source_valid;                                              // SDRAM_s1_agent:rf_source_valid -> SDRAM_s1_agent_rsp_fifo:in_valid
	wire  [111:0] sdram_s1_agent_rf_source_data;                                               // SDRAM_s1_agent:rf_source_data -> SDRAM_s1_agent_rsp_fifo:in_data
	wire          sdram_s1_agent_rf_source_ready;                                              // SDRAM_s1_agent_rsp_fifo:in_ready -> SDRAM_s1_agent:rf_source_ready
	wire          sdram_s1_agent_rf_source_startofpacket;                                      // SDRAM_s1_agent:rf_source_startofpacket -> SDRAM_s1_agent_rsp_fifo:in_startofpacket
	wire          sdram_s1_agent_rf_source_endofpacket;                                        // SDRAM_s1_agent:rf_source_endofpacket -> SDRAM_s1_agent_rsp_fifo:in_endofpacket
	wire          sdram_s1_agent_rsp_fifo_out_valid;                                           // SDRAM_s1_agent_rsp_fifo:out_valid -> SDRAM_s1_agent:rf_sink_valid
	wire  [111:0] sdram_s1_agent_rsp_fifo_out_data;                                            // SDRAM_s1_agent_rsp_fifo:out_data -> SDRAM_s1_agent:rf_sink_data
	wire          sdram_s1_agent_rsp_fifo_out_ready;                                           // SDRAM_s1_agent:rf_sink_ready -> SDRAM_s1_agent_rsp_fifo:out_ready
	wire          sdram_s1_agent_rsp_fifo_out_startofpacket;                                   // SDRAM_s1_agent_rsp_fifo:out_startofpacket -> SDRAM_s1_agent:rf_sink_startofpacket
	wire          sdram_s1_agent_rsp_fifo_out_endofpacket;                                     // SDRAM_s1_agent_rsp_fifo:out_endofpacket -> SDRAM_s1_agent:rf_sink_endofpacket
	wire          sdram_s1_agent_rdata_fifo_src_valid;                                         // SDRAM_s1_agent:rdata_fifo_src_valid -> SDRAM_s1_agent_rdata_fifo:in_valid
	wire   [17:0] sdram_s1_agent_rdata_fifo_src_data;                                          // SDRAM_s1_agent:rdata_fifo_src_data -> SDRAM_s1_agent_rdata_fifo:in_data
	wire          sdram_s1_agent_rdata_fifo_src_ready;                                         // SDRAM_s1_agent_rdata_fifo:in_ready -> SDRAM_s1_agent:rdata_fifo_src_ready
	wire   [31:0] sw_s1_agent_m0_readdata;                                                     // SW_s1_translator:uav_readdata -> SW_s1_agent:m0_readdata
	wire          sw_s1_agent_m0_waitrequest;                                                  // SW_s1_translator:uav_waitrequest -> SW_s1_agent:m0_waitrequest
	wire          sw_s1_agent_m0_debugaccess;                                                  // SW_s1_agent:m0_debugaccess -> SW_s1_translator:uav_debugaccess
	wire   [29:0] sw_s1_agent_m0_address;                                                      // SW_s1_agent:m0_address -> SW_s1_translator:uav_address
	wire    [3:0] sw_s1_agent_m0_byteenable;                                                   // SW_s1_agent:m0_byteenable -> SW_s1_translator:uav_byteenable
	wire          sw_s1_agent_m0_read;                                                         // SW_s1_agent:m0_read -> SW_s1_translator:uav_read
	wire          sw_s1_agent_m0_readdatavalid;                                                // SW_s1_translator:uav_readdatavalid -> SW_s1_agent:m0_readdatavalid
	wire          sw_s1_agent_m0_lock;                                                         // SW_s1_agent:m0_lock -> SW_s1_translator:uav_lock
	wire   [31:0] sw_s1_agent_m0_writedata;                                                    // SW_s1_agent:m0_writedata -> SW_s1_translator:uav_writedata
	wire          sw_s1_agent_m0_write;                                                        // SW_s1_agent:m0_write -> SW_s1_translator:uav_write
	wire    [2:0] sw_s1_agent_m0_burstcount;                                                   // SW_s1_agent:m0_burstcount -> SW_s1_translator:uav_burstcount
	wire          sw_s1_agent_rf_source_valid;                                                 // SW_s1_agent:rf_source_valid -> SW_s1_agent_rsp_fifo:in_valid
	wire  [129:0] sw_s1_agent_rf_source_data;                                                  // SW_s1_agent:rf_source_data -> SW_s1_agent_rsp_fifo:in_data
	wire          sw_s1_agent_rf_source_ready;                                                 // SW_s1_agent_rsp_fifo:in_ready -> SW_s1_agent:rf_source_ready
	wire          sw_s1_agent_rf_source_startofpacket;                                         // SW_s1_agent:rf_source_startofpacket -> SW_s1_agent_rsp_fifo:in_startofpacket
	wire          sw_s1_agent_rf_source_endofpacket;                                           // SW_s1_agent:rf_source_endofpacket -> SW_s1_agent_rsp_fifo:in_endofpacket
	wire          sw_s1_agent_rsp_fifo_out_valid;                                              // SW_s1_agent_rsp_fifo:out_valid -> SW_s1_agent:rf_sink_valid
	wire  [129:0] sw_s1_agent_rsp_fifo_out_data;                                               // SW_s1_agent_rsp_fifo:out_data -> SW_s1_agent:rf_sink_data
	wire          sw_s1_agent_rsp_fifo_out_ready;                                              // SW_s1_agent:rf_sink_ready -> SW_s1_agent_rsp_fifo:out_ready
	wire          sw_s1_agent_rsp_fifo_out_startofpacket;                                      // SW_s1_agent_rsp_fifo:out_startofpacket -> SW_s1_agent:rf_sink_startofpacket
	wire          sw_s1_agent_rsp_fifo_out_endofpacket;                                        // SW_s1_agent_rsp_fifo:out_endofpacket -> SW_s1_agent:rf_sink_endofpacket
	wire          sw_s1_agent_rdata_fifo_src_valid;                                            // SW_s1_agent:rdata_fifo_src_valid -> SW_s1_agent_rdata_fifo:in_valid
	wire   [33:0] sw_s1_agent_rdata_fifo_src_data;                                             // SW_s1_agent:rdata_fifo_src_data -> SW_s1_agent_rdata_fifo:in_data
	wire          sw_s1_agent_rdata_fifo_src_ready;                                            // SW_s1_agent_rdata_fifo:in_ready -> SW_s1_agent:rdata_fifo_src_ready
	wire   [31:0] seg6_s1_agent_m0_readdata;                                                   // SEG6_s1_translator:uav_readdata -> SEG6_s1_agent:m0_readdata
	wire          seg6_s1_agent_m0_waitrequest;                                                // SEG6_s1_translator:uav_waitrequest -> SEG6_s1_agent:m0_waitrequest
	wire          seg6_s1_agent_m0_debugaccess;                                                // SEG6_s1_agent:m0_debugaccess -> SEG6_s1_translator:uav_debugaccess
	wire   [29:0] seg6_s1_agent_m0_address;                                                    // SEG6_s1_agent:m0_address -> SEG6_s1_translator:uav_address
	wire    [3:0] seg6_s1_agent_m0_byteenable;                                                 // SEG6_s1_agent:m0_byteenable -> SEG6_s1_translator:uav_byteenable
	wire          seg6_s1_agent_m0_read;                                                       // SEG6_s1_agent:m0_read -> SEG6_s1_translator:uav_read
	wire          seg6_s1_agent_m0_readdatavalid;                                              // SEG6_s1_translator:uav_readdatavalid -> SEG6_s1_agent:m0_readdatavalid
	wire          seg6_s1_agent_m0_lock;                                                       // SEG6_s1_agent:m0_lock -> SEG6_s1_translator:uav_lock
	wire   [31:0] seg6_s1_agent_m0_writedata;                                                  // SEG6_s1_agent:m0_writedata -> SEG6_s1_translator:uav_writedata
	wire          seg6_s1_agent_m0_write;                                                      // SEG6_s1_agent:m0_write -> SEG6_s1_translator:uav_write
	wire    [2:0] seg6_s1_agent_m0_burstcount;                                                 // SEG6_s1_agent:m0_burstcount -> SEG6_s1_translator:uav_burstcount
	wire          seg6_s1_agent_rf_source_valid;                                               // SEG6_s1_agent:rf_source_valid -> SEG6_s1_agent_rsp_fifo:in_valid
	wire  [129:0] seg6_s1_agent_rf_source_data;                                                // SEG6_s1_agent:rf_source_data -> SEG6_s1_agent_rsp_fifo:in_data
	wire          seg6_s1_agent_rf_source_ready;                                               // SEG6_s1_agent_rsp_fifo:in_ready -> SEG6_s1_agent:rf_source_ready
	wire          seg6_s1_agent_rf_source_startofpacket;                                       // SEG6_s1_agent:rf_source_startofpacket -> SEG6_s1_agent_rsp_fifo:in_startofpacket
	wire          seg6_s1_agent_rf_source_endofpacket;                                         // SEG6_s1_agent:rf_source_endofpacket -> SEG6_s1_agent_rsp_fifo:in_endofpacket
	wire          seg6_s1_agent_rsp_fifo_out_valid;                                            // SEG6_s1_agent_rsp_fifo:out_valid -> SEG6_s1_agent:rf_sink_valid
	wire  [129:0] seg6_s1_agent_rsp_fifo_out_data;                                             // SEG6_s1_agent_rsp_fifo:out_data -> SEG6_s1_agent:rf_sink_data
	wire          seg6_s1_agent_rsp_fifo_out_ready;                                            // SEG6_s1_agent:rf_sink_ready -> SEG6_s1_agent_rsp_fifo:out_ready
	wire          seg6_s1_agent_rsp_fifo_out_startofpacket;                                    // SEG6_s1_agent_rsp_fifo:out_startofpacket -> SEG6_s1_agent:rf_sink_startofpacket
	wire          seg6_s1_agent_rsp_fifo_out_endofpacket;                                      // SEG6_s1_agent_rsp_fifo:out_endofpacket -> SEG6_s1_agent:rf_sink_endofpacket
	wire          seg6_s1_agent_rdata_fifo_src_valid;                                          // SEG6_s1_agent:rdata_fifo_src_valid -> SEG6_s1_agent_rdata_fifo:in_valid
	wire   [33:0] seg6_s1_agent_rdata_fifo_src_data;                                           // SEG6_s1_agent:rdata_fifo_src_data -> SEG6_s1_agent_rdata_fifo:in_data
	wire          seg6_s1_agent_rdata_fifo_src_ready;                                          // SEG6_s1_agent_rdata_fifo:in_ready -> SEG6_s1_agent:rdata_fifo_src_ready
	wire   [31:0] seg5_s1_agent_m0_readdata;                                                   // SEG5_s1_translator:uav_readdata -> SEG5_s1_agent:m0_readdata
	wire          seg5_s1_agent_m0_waitrequest;                                                // SEG5_s1_translator:uav_waitrequest -> SEG5_s1_agent:m0_waitrequest
	wire          seg5_s1_agent_m0_debugaccess;                                                // SEG5_s1_agent:m0_debugaccess -> SEG5_s1_translator:uav_debugaccess
	wire   [29:0] seg5_s1_agent_m0_address;                                                    // SEG5_s1_agent:m0_address -> SEG5_s1_translator:uav_address
	wire    [3:0] seg5_s1_agent_m0_byteenable;                                                 // SEG5_s1_agent:m0_byteenable -> SEG5_s1_translator:uav_byteenable
	wire          seg5_s1_agent_m0_read;                                                       // SEG5_s1_agent:m0_read -> SEG5_s1_translator:uav_read
	wire          seg5_s1_agent_m0_readdatavalid;                                              // SEG5_s1_translator:uav_readdatavalid -> SEG5_s1_agent:m0_readdatavalid
	wire          seg5_s1_agent_m0_lock;                                                       // SEG5_s1_agent:m0_lock -> SEG5_s1_translator:uav_lock
	wire   [31:0] seg5_s1_agent_m0_writedata;                                                  // SEG5_s1_agent:m0_writedata -> SEG5_s1_translator:uav_writedata
	wire          seg5_s1_agent_m0_write;                                                      // SEG5_s1_agent:m0_write -> SEG5_s1_translator:uav_write
	wire    [2:0] seg5_s1_agent_m0_burstcount;                                                 // SEG5_s1_agent:m0_burstcount -> SEG5_s1_translator:uav_burstcount
	wire          seg5_s1_agent_rf_source_valid;                                               // SEG5_s1_agent:rf_source_valid -> SEG5_s1_agent_rsp_fifo:in_valid
	wire  [129:0] seg5_s1_agent_rf_source_data;                                                // SEG5_s1_agent:rf_source_data -> SEG5_s1_agent_rsp_fifo:in_data
	wire          seg5_s1_agent_rf_source_ready;                                               // SEG5_s1_agent_rsp_fifo:in_ready -> SEG5_s1_agent:rf_source_ready
	wire          seg5_s1_agent_rf_source_startofpacket;                                       // SEG5_s1_agent:rf_source_startofpacket -> SEG5_s1_agent_rsp_fifo:in_startofpacket
	wire          seg5_s1_agent_rf_source_endofpacket;                                         // SEG5_s1_agent:rf_source_endofpacket -> SEG5_s1_agent_rsp_fifo:in_endofpacket
	wire          seg5_s1_agent_rsp_fifo_out_valid;                                            // SEG5_s1_agent_rsp_fifo:out_valid -> SEG5_s1_agent:rf_sink_valid
	wire  [129:0] seg5_s1_agent_rsp_fifo_out_data;                                             // SEG5_s1_agent_rsp_fifo:out_data -> SEG5_s1_agent:rf_sink_data
	wire          seg5_s1_agent_rsp_fifo_out_ready;                                            // SEG5_s1_agent:rf_sink_ready -> SEG5_s1_agent_rsp_fifo:out_ready
	wire          seg5_s1_agent_rsp_fifo_out_startofpacket;                                    // SEG5_s1_agent_rsp_fifo:out_startofpacket -> SEG5_s1_agent:rf_sink_startofpacket
	wire          seg5_s1_agent_rsp_fifo_out_endofpacket;                                      // SEG5_s1_agent_rsp_fifo:out_endofpacket -> SEG5_s1_agent:rf_sink_endofpacket
	wire          seg5_s1_agent_rdata_fifo_src_valid;                                          // SEG5_s1_agent:rdata_fifo_src_valid -> SEG5_s1_agent_rdata_fifo:in_valid
	wire   [33:0] seg5_s1_agent_rdata_fifo_src_data;                                           // SEG5_s1_agent:rdata_fifo_src_data -> SEG5_s1_agent_rdata_fifo:in_data
	wire          seg5_s1_agent_rdata_fifo_src_ready;                                          // SEG5_s1_agent_rdata_fifo:in_ready -> SEG5_s1_agent:rdata_fifo_src_ready
	wire   [31:0] seg4_s1_agent_m0_readdata;                                                   // SEG4_s1_translator:uav_readdata -> SEG4_s1_agent:m0_readdata
	wire          seg4_s1_agent_m0_waitrequest;                                                // SEG4_s1_translator:uav_waitrequest -> SEG4_s1_agent:m0_waitrequest
	wire          seg4_s1_agent_m0_debugaccess;                                                // SEG4_s1_agent:m0_debugaccess -> SEG4_s1_translator:uav_debugaccess
	wire   [29:0] seg4_s1_agent_m0_address;                                                    // SEG4_s1_agent:m0_address -> SEG4_s1_translator:uav_address
	wire    [3:0] seg4_s1_agent_m0_byteenable;                                                 // SEG4_s1_agent:m0_byteenable -> SEG4_s1_translator:uav_byteenable
	wire          seg4_s1_agent_m0_read;                                                       // SEG4_s1_agent:m0_read -> SEG4_s1_translator:uav_read
	wire          seg4_s1_agent_m0_readdatavalid;                                              // SEG4_s1_translator:uav_readdatavalid -> SEG4_s1_agent:m0_readdatavalid
	wire          seg4_s1_agent_m0_lock;                                                       // SEG4_s1_agent:m0_lock -> SEG4_s1_translator:uav_lock
	wire   [31:0] seg4_s1_agent_m0_writedata;                                                  // SEG4_s1_agent:m0_writedata -> SEG4_s1_translator:uav_writedata
	wire          seg4_s1_agent_m0_write;                                                      // SEG4_s1_agent:m0_write -> SEG4_s1_translator:uav_write
	wire    [2:0] seg4_s1_agent_m0_burstcount;                                                 // SEG4_s1_agent:m0_burstcount -> SEG4_s1_translator:uav_burstcount
	wire          seg4_s1_agent_rf_source_valid;                                               // SEG4_s1_agent:rf_source_valid -> SEG4_s1_agent_rsp_fifo:in_valid
	wire  [129:0] seg4_s1_agent_rf_source_data;                                                // SEG4_s1_agent:rf_source_data -> SEG4_s1_agent_rsp_fifo:in_data
	wire          seg4_s1_agent_rf_source_ready;                                               // SEG4_s1_agent_rsp_fifo:in_ready -> SEG4_s1_agent:rf_source_ready
	wire          seg4_s1_agent_rf_source_startofpacket;                                       // SEG4_s1_agent:rf_source_startofpacket -> SEG4_s1_agent_rsp_fifo:in_startofpacket
	wire          seg4_s1_agent_rf_source_endofpacket;                                         // SEG4_s1_agent:rf_source_endofpacket -> SEG4_s1_agent_rsp_fifo:in_endofpacket
	wire          seg4_s1_agent_rsp_fifo_out_valid;                                            // SEG4_s1_agent_rsp_fifo:out_valid -> SEG4_s1_agent:rf_sink_valid
	wire  [129:0] seg4_s1_agent_rsp_fifo_out_data;                                             // SEG4_s1_agent_rsp_fifo:out_data -> SEG4_s1_agent:rf_sink_data
	wire          seg4_s1_agent_rsp_fifo_out_ready;                                            // SEG4_s1_agent:rf_sink_ready -> SEG4_s1_agent_rsp_fifo:out_ready
	wire          seg4_s1_agent_rsp_fifo_out_startofpacket;                                    // SEG4_s1_agent_rsp_fifo:out_startofpacket -> SEG4_s1_agent:rf_sink_startofpacket
	wire          seg4_s1_agent_rsp_fifo_out_endofpacket;                                      // SEG4_s1_agent_rsp_fifo:out_endofpacket -> SEG4_s1_agent:rf_sink_endofpacket
	wire          seg4_s1_agent_rdata_fifo_src_valid;                                          // SEG4_s1_agent:rdata_fifo_src_valid -> SEG4_s1_agent_rdata_fifo:in_valid
	wire   [33:0] seg4_s1_agent_rdata_fifo_src_data;                                           // SEG4_s1_agent:rdata_fifo_src_data -> SEG4_s1_agent_rdata_fifo:in_data
	wire          seg4_s1_agent_rdata_fifo_src_ready;                                          // SEG4_s1_agent_rdata_fifo:in_ready -> SEG4_s1_agent:rdata_fifo_src_ready
	wire   [31:0] seg3_s1_agent_m0_readdata;                                                   // SEG3_s1_translator:uav_readdata -> SEG3_s1_agent:m0_readdata
	wire          seg3_s1_agent_m0_waitrequest;                                                // SEG3_s1_translator:uav_waitrequest -> SEG3_s1_agent:m0_waitrequest
	wire          seg3_s1_agent_m0_debugaccess;                                                // SEG3_s1_agent:m0_debugaccess -> SEG3_s1_translator:uav_debugaccess
	wire   [29:0] seg3_s1_agent_m0_address;                                                    // SEG3_s1_agent:m0_address -> SEG3_s1_translator:uav_address
	wire    [3:0] seg3_s1_agent_m0_byteenable;                                                 // SEG3_s1_agent:m0_byteenable -> SEG3_s1_translator:uav_byteenable
	wire          seg3_s1_agent_m0_read;                                                       // SEG3_s1_agent:m0_read -> SEG3_s1_translator:uav_read
	wire          seg3_s1_agent_m0_readdatavalid;                                              // SEG3_s1_translator:uav_readdatavalid -> SEG3_s1_agent:m0_readdatavalid
	wire          seg3_s1_agent_m0_lock;                                                       // SEG3_s1_agent:m0_lock -> SEG3_s1_translator:uav_lock
	wire   [31:0] seg3_s1_agent_m0_writedata;                                                  // SEG3_s1_agent:m0_writedata -> SEG3_s1_translator:uav_writedata
	wire          seg3_s1_agent_m0_write;                                                      // SEG3_s1_agent:m0_write -> SEG3_s1_translator:uav_write
	wire    [2:0] seg3_s1_agent_m0_burstcount;                                                 // SEG3_s1_agent:m0_burstcount -> SEG3_s1_translator:uav_burstcount
	wire          seg3_s1_agent_rf_source_valid;                                               // SEG3_s1_agent:rf_source_valid -> SEG3_s1_agent_rsp_fifo:in_valid
	wire  [129:0] seg3_s1_agent_rf_source_data;                                                // SEG3_s1_agent:rf_source_data -> SEG3_s1_agent_rsp_fifo:in_data
	wire          seg3_s1_agent_rf_source_ready;                                               // SEG3_s1_agent_rsp_fifo:in_ready -> SEG3_s1_agent:rf_source_ready
	wire          seg3_s1_agent_rf_source_startofpacket;                                       // SEG3_s1_agent:rf_source_startofpacket -> SEG3_s1_agent_rsp_fifo:in_startofpacket
	wire          seg3_s1_agent_rf_source_endofpacket;                                         // SEG3_s1_agent:rf_source_endofpacket -> SEG3_s1_agent_rsp_fifo:in_endofpacket
	wire          seg3_s1_agent_rsp_fifo_out_valid;                                            // SEG3_s1_agent_rsp_fifo:out_valid -> SEG3_s1_agent:rf_sink_valid
	wire  [129:0] seg3_s1_agent_rsp_fifo_out_data;                                             // SEG3_s1_agent_rsp_fifo:out_data -> SEG3_s1_agent:rf_sink_data
	wire          seg3_s1_agent_rsp_fifo_out_ready;                                            // SEG3_s1_agent:rf_sink_ready -> SEG3_s1_agent_rsp_fifo:out_ready
	wire          seg3_s1_agent_rsp_fifo_out_startofpacket;                                    // SEG3_s1_agent_rsp_fifo:out_startofpacket -> SEG3_s1_agent:rf_sink_startofpacket
	wire          seg3_s1_agent_rsp_fifo_out_endofpacket;                                      // SEG3_s1_agent_rsp_fifo:out_endofpacket -> SEG3_s1_agent:rf_sink_endofpacket
	wire          seg3_s1_agent_rdata_fifo_src_valid;                                          // SEG3_s1_agent:rdata_fifo_src_valid -> SEG3_s1_agent_rdata_fifo:in_valid
	wire   [33:0] seg3_s1_agent_rdata_fifo_src_data;                                           // SEG3_s1_agent:rdata_fifo_src_data -> SEG3_s1_agent_rdata_fifo:in_data
	wire          seg3_s1_agent_rdata_fifo_src_ready;                                          // SEG3_s1_agent_rdata_fifo:in_ready -> SEG3_s1_agent:rdata_fifo_src_ready
	wire   [31:0] seg2_s1_agent_m0_readdata;                                                   // SEG2_s1_translator:uav_readdata -> SEG2_s1_agent:m0_readdata
	wire          seg2_s1_agent_m0_waitrequest;                                                // SEG2_s1_translator:uav_waitrequest -> SEG2_s1_agent:m0_waitrequest
	wire          seg2_s1_agent_m0_debugaccess;                                                // SEG2_s1_agent:m0_debugaccess -> SEG2_s1_translator:uav_debugaccess
	wire   [29:0] seg2_s1_agent_m0_address;                                                    // SEG2_s1_agent:m0_address -> SEG2_s1_translator:uav_address
	wire    [3:0] seg2_s1_agent_m0_byteenable;                                                 // SEG2_s1_agent:m0_byteenable -> SEG2_s1_translator:uav_byteenable
	wire          seg2_s1_agent_m0_read;                                                       // SEG2_s1_agent:m0_read -> SEG2_s1_translator:uav_read
	wire          seg2_s1_agent_m0_readdatavalid;                                              // SEG2_s1_translator:uav_readdatavalid -> SEG2_s1_agent:m0_readdatavalid
	wire          seg2_s1_agent_m0_lock;                                                       // SEG2_s1_agent:m0_lock -> SEG2_s1_translator:uav_lock
	wire   [31:0] seg2_s1_agent_m0_writedata;                                                  // SEG2_s1_agent:m0_writedata -> SEG2_s1_translator:uav_writedata
	wire          seg2_s1_agent_m0_write;                                                      // SEG2_s1_agent:m0_write -> SEG2_s1_translator:uav_write
	wire    [2:0] seg2_s1_agent_m0_burstcount;                                                 // SEG2_s1_agent:m0_burstcount -> SEG2_s1_translator:uav_burstcount
	wire          seg2_s1_agent_rf_source_valid;                                               // SEG2_s1_agent:rf_source_valid -> SEG2_s1_agent_rsp_fifo:in_valid
	wire  [129:0] seg2_s1_agent_rf_source_data;                                                // SEG2_s1_agent:rf_source_data -> SEG2_s1_agent_rsp_fifo:in_data
	wire          seg2_s1_agent_rf_source_ready;                                               // SEG2_s1_agent_rsp_fifo:in_ready -> SEG2_s1_agent:rf_source_ready
	wire          seg2_s1_agent_rf_source_startofpacket;                                       // SEG2_s1_agent:rf_source_startofpacket -> SEG2_s1_agent_rsp_fifo:in_startofpacket
	wire          seg2_s1_agent_rf_source_endofpacket;                                         // SEG2_s1_agent:rf_source_endofpacket -> SEG2_s1_agent_rsp_fifo:in_endofpacket
	wire          seg2_s1_agent_rsp_fifo_out_valid;                                            // SEG2_s1_agent_rsp_fifo:out_valid -> SEG2_s1_agent:rf_sink_valid
	wire  [129:0] seg2_s1_agent_rsp_fifo_out_data;                                             // SEG2_s1_agent_rsp_fifo:out_data -> SEG2_s1_agent:rf_sink_data
	wire          seg2_s1_agent_rsp_fifo_out_ready;                                            // SEG2_s1_agent:rf_sink_ready -> SEG2_s1_agent_rsp_fifo:out_ready
	wire          seg2_s1_agent_rsp_fifo_out_startofpacket;                                    // SEG2_s1_agent_rsp_fifo:out_startofpacket -> SEG2_s1_agent:rf_sink_startofpacket
	wire          seg2_s1_agent_rsp_fifo_out_endofpacket;                                      // SEG2_s1_agent_rsp_fifo:out_endofpacket -> SEG2_s1_agent:rf_sink_endofpacket
	wire          seg2_s1_agent_rdata_fifo_src_valid;                                          // SEG2_s1_agent:rdata_fifo_src_valid -> SEG2_s1_agent_rdata_fifo:in_valid
	wire   [33:0] seg2_s1_agent_rdata_fifo_src_data;                                           // SEG2_s1_agent:rdata_fifo_src_data -> SEG2_s1_agent_rdata_fifo:in_data
	wire          seg2_s1_agent_rdata_fifo_src_ready;                                          // SEG2_s1_agent_rdata_fifo:in_ready -> SEG2_s1_agent:rdata_fifo_src_ready
	wire   [31:0] seg1_s1_agent_m0_readdata;                                                   // SEG1_s1_translator:uav_readdata -> SEG1_s1_agent:m0_readdata
	wire          seg1_s1_agent_m0_waitrequest;                                                // SEG1_s1_translator:uav_waitrequest -> SEG1_s1_agent:m0_waitrequest
	wire          seg1_s1_agent_m0_debugaccess;                                                // SEG1_s1_agent:m0_debugaccess -> SEG1_s1_translator:uav_debugaccess
	wire   [29:0] seg1_s1_agent_m0_address;                                                    // SEG1_s1_agent:m0_address -> SEG1_s1_translator:uav_address
	wire    [3:0] seg1_s1_agent_m0_byteenable;                                                 // SEG1_s1_agent:m0_byteenable -> SEG1_s1_translator:uav_byteenable
	wire          seg1_s1_agent_m0_read;                                                       // SEG1_s1_agent:m0_read -> SEG1_s1_translator:uav_read
	wire          seg1_s1_agent_m0_readdatavalid;                                              // SEG1_s1_translator:uav_readdatavalid -> SEG1_s1_agent:m0_readdatavalid
	wire          seg1_s1_agent_m0_lock;                                                       // SEG1_s1_agent:m0_lock -> SEG1_s1_translator:uav_lock
	wire   [31:0] seg1_s1_agent_m0_writedata;                                                  // SEG1_s1_agent:m0_writedata -> SEG1_s1_translator:uav_writedata
	wire          seg1_s1_agent_m0_write;                                                      // SEG1_s1_agent:m0_write -> SEG1_s1_translator:uav_write
	wire    [2:0] seg1_s1_agent_m0_burstcount;                                                 // SEG1_s1_agent:m0_burstcount -> SEG1_s1_translator:uav_burstcount
	wire          seg1_s1_agent_rf_source_valid;                                               // SEG1_s1_agent:rf_source_valid -> SEG1_s1_agent_rsp_fifo:in_valid
	wire  [129:0] seg1_s1_agent_rf_source_data;                                                // SEG1_s1_agent:rf_source_data -> SEG1_s1_agent_rsp_fifo:in_data
	wire          seg1_s1_agent_rf_source_ready;                                               // SEG1_s1_agent_rsp_fifo:in_ready -> SEG1_s1_agent:rf_source_ready
	wire          seg1_s1_agent_rf_source_startofpacket;                                       // SEG1_s1_agent:rf_source_startofpacket -> SEG1_s1_agent_rsp_fifo:in_startofpacket
	wire          seg1_s1_agent_rf_source_endofpacket;                                         // SEG1_s1_agent:rf_source_endofpacket -> SEG1_s1_agent_rsp_fifo:in_endofpacket
	wire          seg1_s1_agent_rsp_fifo_out_valid;                                            // SEG1_s1_agent_rsp_fifo:out_valid -> SEG1_s1_agent:rf_sink_valid
	wire  [129:0] seg1_s1_agent_rsp_fifo_out_data;                                             // SEG1_s1_agent_rsp_fifo:out_data -> SEG1_s1_agent:rf_sink_data
	wire          seg1_s1_agent_rsp_fifo_out_ready;                                            // SEG1_s1_agent:rf_sink_ready -> SEG1_s1_agent_rsp_fifo:out_ready
	wire          seg1_s1_agent_rsp_fifo_out_startofpacket;                                    // SEG1_s1_agent_rsp_fifo:out_startofpacket -> SEG1_s1_agent:rf_sink_startofpacket
	wire          seg1_s1_agent_rsp_fifo_out_endofpacket;                                      // SEG1_s1_agent_rsp_fifo:out_endofpacket -> SEG1_s1_agent:rf_sink_endofpacket
	wire          seg1_s1_agent_rdata_fifo_src_valid;                                          // SEG1_s1_agent:rdata_fifo_src_valid -> SEG1_s1_agent_rdata_fifo:in_valid
	wire   [33:0] seg1_s1_agent_rdata_fifo_src_data;                                           // SEG1_s1_agent:rdata_fifo_src_data -> SEG1_s1_agent_rdata_fifo:in_data
	wire          seg1_s1_agent_rdata_fifo_src_ready;                                          // SEG1_s1_agent_rdata_fifo:in_ready -> SEG1_s1_agent:rdata_fifo_src_ready
	wire   [31:0] keys_s1_agent_m0_readdata;                                                   // KEYS_s1_translator:uav_readdata -> KEYS_s1_agent:m0_readdata
	wire          keys_s1_agent_m0_waitrequest;                                                // KEYS_s1_translator:uav_waitrequest -> KEYS_s1_agent:m0_waitrequest
	wire          keys_s1_agent_m0_debugaccess;                                                // KEYS_s1_agent:m0_debugaccess -> KEYS_s1_translator:uav_debugaccess
	wire   [29:0] keys_s1_agent_m0_address;                                                    // KEYS_s1_agent:m0_address -> KEYS_s1_translator:uav_address
	wire    [3:0] keys_s1_agent_m0_byteenable;                                                 // KEYS_s1_agent:m0_byteenable -> KEYS_s1_translator:uav_byteenable
	wire          keys_s1_agent_m0_read;                                                       // KEYS_s1_agent:m0_read -> KEYS_s1_translator:uav_read
	wire          keys_s1_agent_m0_readdatavalid;                                              // KEYS_s1_translator:uav_readdatavalid -> KEYS_s1_agent:m0_readdatavalid
	wire          keys_s1_agent_m0_lock;                                                       // KEYS_s1_agent:m0_lock -> KEYS_s1_translator:uav_lock
	wire   [31:0] keys_s1_agent_m0_writedata;                                                  // KEYS_s1_agent:m0_writedata -> KEYS_s1_translator:uav_writedata
	wire          keys_s1_agent_m0_write;                                                      // KEYS_s1_agent:m0_write -> KEYS_s1_translator:uav_write
	wire    [2:0] keys_s1_agent_m0_burstcount;                                                 // KEYS_s1_agent:m0_burstcount -> KEYS_s1_translator:uav_burstcount
	wire          keys_s1_agent_rf_source_valid;                                               // KEYS_s1_agent:rf_source_valid -> KEYS_s1_agent_rsp_fifo:in_valid
	wire  [129:0] keys_s1_agent_rf_source_data;                                                // KEYS_s1_agent:rf_source_data -> KEYS_s1_agent_rsp_fifo:in_data
	wire          keys_s1_agent_rf_source_ready;                                               // KEYS_s1_agent_rsp_fifo:in_ready -> KEYS_s1_agent:rf_source_ready
	wire          keys_s1_agent_rf_source_startofpacket;                                       // KEYS_s1_agent:rf_source_startofpacket -> KEYS_s1_agent_rsp_fifo:in_startofpacket
	wire          keys_s1_agent_rf_source_endofpacket;                                         // KEYS_s1_agent:rf_source_endofpacket -> KEYS_s1_agent_rsp_fifo:in_endofpacket
	wire          keys_s1_agent_rsp_fifo_out_valid;                                            // KEYS_s1_agent_rsp_fifo:out_valid -> KEYS_s1_agent:rf_sink_valid
	wire  [129:0] keys_s1_agent_rsp_fifo_out_data;                                             // KEYS_s1_agent_rsp_fifo:out_data -> KEYS_s1_agent:rf_sink_data
	wire          keys_s1_agent_rsp_fifo_out_ready;                                            // KEYS_s1_agent:rf_sink_ready -> KEYS_s1_agent_rsp_fifo:out_ready
	wire          keys_s1_agent_rsp_fifo_out_startofpacket;                                    // KEYS_s1_agent_rsp_fifo:out_startofpacket -> KEYS_s1_agent:rf_sink_startofpacket
	wire          keys_s1_agent_rsp_fifo_out_endofpacket;                                      // KEYS_s1_agent_rsp_fifo:out_endofpacket -> KEYS_s1_agent:rf_sink_endofpacket
	wire          keys_s1_agent_rdata_fifo_src_valid;                                          // KEYS_s1_agent:rdata_fifo_src_valid -> KEYS_s1_agent_rdata_fifo:in_valid
	wire   [33:0] keys_s1_agent_rdata_fifo_src_data;                                           // KEYS_s1_agent:rdata_fifo_src_data -> KEYS_s1_agent_rdata_fifo:in_data
	wire          keys_s1_agent_rdata_fifo_src_ready;                                          // KEYS_s1_agent_rdata_fifo:in_ready -> KEYS_s1_agent:rdata_fifo_src_ready
	wire   [31:0] leds_s1_agent_m0_readdata;                                                   // LEDS_s1_translator:uav_readdata -> LEDS_s1_agent:m0_readdata
	wire          leds_s1_agent_m0_waitrequest;                                                // LEDS_s1_translator:uav_waitrequest -> LEDS_s1_agent:m0_waitrequest
	wire          leds_s1_agent_m0_debugaccess;                                                // LEDS_s1_agent:m0_debugaccess -> LEDS_s1_translator:uav_debugaccess
	wire   [29:0] leds_s1_agent_m0_address;                                                    // LEDS_s1_agent:m0_address -> LEDS_s1_translator:uav_address
	wire    [3:0] leds_s1_agent_m0_byteenable;                                                 // LEDS_s1_agent:m0_byteenable -> LEDS_s1_translator:uav_byteenable
	wire          leds_s1_agent_m0_read;                                                       // LEDS_s1_agent:m0_read -> LEDS_s1_translator:uav_read
	wire          leds_s1_agent_m0_readdatavalid;                                              // LEDS_s1_translator:uav_readdatavalid -> LEDS_s1_agent:m0_readdatavalid
	wire          leds_s1_agent_m0_lock;                                                       // LEDS_s1_agent:m0_lock -> LEDS_s1_translator:uav_lock
	wire   [31:0] leds_s1_agent_m0_writedata;                                                  // LEDS_s1_agent:m0_writedata -> LEDS_s1_translator:uav_writedata
	wire          leds_s1_agent_m0_write;                                                      // LEDS_s1_agent:m0_write -> LEDS_s1_translator:uav_write
	wire    [2:0] leds_s1_agent_m0_burstcount;                                                 // LEDS_s1_agent:m0_burstcount -> LEDS_s1_translator:uav_burstcount
	wire          leds_s1_agent_rf_source_valid;                                               // LEDS_s1_agent:rf_source_valid -> LEDS_s1_agent_rsp_fifo:in_valid
	wire  [129:0] leds_s1_agent_rf_source_data;                                                // LEDS_s1_agent:rf_source_data -> LEDS_s1_agent_rsp_fifo:in_data
	wire          leds_s1_agent_rf_source_ready;                                               // LEDS_s1_agent_rsp_fifo:in_ready -> LEDS_s1_agent:rf_source_ready
	wire          leds_s1_agent_rf_source_startofpacket;                                       // LEDS_s1_agent:rf_source_startofpacket -> LEDS_s1_agent_rsp_fifo:in_startofpacket
	wire          leds_s1_agent_rf_source_endofpacket;                                         // LEDS_s1_agent:rf_source_endofpacket -> LEDS_s1_agent_rsp_fifo:in_endofpacket
	wire          leds_s1_agent_rsp_fifo_out_valid;                                            // LEDS_s1_agent_rsp_fifo:out_valid -> LEDS_s1_agent:rf_sink_valid
	wire  [129:0] leds_s1_agent_rsp_fifo_out_data;                                             // LEDS_s1_agent_rsp_fifo:out_data -> LEDS_s1_agent:rf_sink_data
	wire          leds_s1_agent_rsp_fifo_out_ready;                                            // LEDS_s1_agent:rf_sink_ready -> LEDS_s1_agent_rsp_fifo:out_ready
	wire          leds_s1_agent_rsp_fifo_out_startofpacket;                                    // LEDS_s1_agent_rsp_fifo:out_startofpacket -> LEDS_s1_agent:rf_sink_startofpacket
	wire          leds_s1_agent_rsp_fifo_out_endofpacket;                                      // LEDS_s1_agent_rsp_fifo:out_endofpacket -> LEDS_s1_agent:rf_sink_endofpacket
	wire          leds_s1_agent_rdata_fifo_src_valid;                                          // LEDS_s1_agent:rdata_fifo_src_valid -> LEDS_s1_agent_rdata_fifo:in_valid
	wire   [33:0] leds_s1_agent_rdata_fifo_src_data;                                           // LEDS_s1_agent:rdata_fifo_src_data -> LEDS_s1_agent_rdata_fifo:in_data
	wire          leds_s1_agent_rdata_fifo_src_ready;                                          // LEDS_s1_agent_rdata_fifo:in_ready -> LEDS_s1_agent:rdata_fifo_src_ready
	wire          nios2_qsys_0_data_master_agent_cp_valid;                                     // nios2_qsys_0_data_master_agent:cp_valid -> router:sink_valid
	wire  [128:0] nios2_qsys_0_data_master_agent_cp_data;                                      // nios2_qsys_0_data_master_agent:cp_data -> router:sink_data
	wire          nios2_qsys_0_data_master_agent_cp_ready;                                     // router:sink_ready -> nios2_qsys_0_data_master_agent:cp_ready
	wire          nios2_qsys_0_data_master_agent_cp_startofpacket;                             // nios2_qsys_0_data_master_agent:cp_startofpacket -> router:sink_startofpacket
	wire          nios2_qsys_0_data_master_agent_cp_endofpacket;                               // nios2_qsys_0_data_master_agent:cp_endofpacket -> router:sink_endofpacket
	wire          router_src_valid;                                                            // router:src_valid -> cmd_demux:sink_valid
	wire  [128:0] router_src_data;                                                             // router:src_data -> cmd_demux:sink_data
	wire          router_src_ready;                                                            // cmd_demux:sink_ready -> router:src_ready
	wire   [11:0] router_src_channel;                                                          // router:src_channel -> cmd_demux:sink_channel
	wire          router_src_startofpacket;                                                    // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire          router_src_endofpacket;                                                      // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire          hps_0_h2f_lw_axi_master_agent_write_cp_valid;                                // hps_0_h2f_lw_axi_master_agent:write_cp_valid -> router_001:sink_valid
	wire  [128:0] hps_0_h2f_lw_axi_master_agent_write_cp_data;                                 // hps_0_h2f_lw_axi_master_agent:write_cp_data -> router_001:sink_data
	wire          hps_0_h2f_lw_axi_master_agent_write_cp_ready;                                // router_001:sink_ready -> hps_0_h2f_lw_axi_master_agent:write_cp_ready
	wire          hps_0_h2f_lw_axi_master_agent_write_cp_startofpacket;                        // hps_0_h2f_lw_axi_master_agent:write_cp_startofpacket -> router_001:sink_startofpacket
	wire          hps_0_h2f_lw_axi_master_agent_write_cp_endofpacket;                          // hps_0_h2f_lw_axi_master_agent:write_cp_endofpacket -> router_001:sink_endofpacket
	wire          hps_0_h2f_lw_axi_master_agent_read_cp_valid;                                 // hps_0_h2f_lw_axi_master_agent:read_cp_valid -> router_002:sink_valid
	wire  [128:0] hps_0_h2f_lw_axi_master_agent_read_cp_data;                                  // hps_0_h2f_lw_axi_master_agent:read_cp_data -> router_002:sink_data
	wire          hps_0_h2f_lw_axi_master_agent_read_cp_ready;                                 // router_002:sink_ready -> hps_0_h2f_lw_axi_master_agent:read_cp_ready
	wire          hps_0_h2f_lw_axi_master_agent_read_cp_startofpacket;                         // hps_0_h2f_lw_axi_master_agent:read_cp_startofpacket -> router_002:sink_startofpacket
	wire          hps_0_h2f_lw_axi_master_agent_read_cp_endofpacket;                           // hps_0_h2f_lw_axi_master_agent:read_cp_endofpacket -> router_002:sink_endofpacket
	wire          hps_0_h2f_axi_master_agent_write_cp_valid;                                   // hps_0_h2f_axi_master_agent:write_cp_valid -> router_003:sink_valid
	wire  [164:0] hps_0_h2f_axi_master_agent_write_cp_data;                                    // hps_0_h2f_axi_master_agent:write_cp_data -> router_003:sink_data
	wire          hps_0_h2f_axi_master_agent_write_cp_ready;                                   // router_003:sink_ready -> hps_0_h2f_axi_master_agent:write_cp_ready
	wire          hps_0_h2f_axi_master_agent_write_cp_startofpacket;                           // hps_0_h2f_axi_master_agent:write_cp_startofpacket -> router_003:sink_startofpacket
	wire          hps_0_h2f_axi_master_agent_write_cp_endofpacket;                             // hps_0_h2f_axi_master_agent:write_cp_endofpacket -> router_003:sink_endofpacket
	wire          router_003_src_valid;                                                        // router_003:src_valid -> cmd_demux_003:sink_valid
	wire  [164:0] router_003_src_data;                                                         // router_003:src_data -> cmd_demux_003:sink_data
	wire          router_003_src_ready;                                                        // cmd_demux_003:sink_ready -> router_003:src_ready
	wire   [11:0] router_003_src_channel;                                                      // router_003:src_channel -> cmd_demux_003:sink_channel
	wire          router_003_src_startofpacket;                                                // router_003:src_startofpacket -> cmd_demux_003:sink_startofpacket
	wire          router_003_src_endofpacket;                                                  // router_003:src_endofpacket -> cmd_demux_003:sink_endofpacket
	wire          hps_0_h2f_axi_master_agent_read_cp_valid;                                    // hps_0_h2f_axi_master_agent:read_cp_valid -> router_004:sink_valid
	wire  [164:0] hps_0_h2f_axi_master_agent_read_cp_data;                                     // hps_0_h2f_axi_master_agent:read_cp_data -> router_004:sink_data
	wire          hps_0_h2f_axi_master_agent_read_cp_ready;                                    // router_004:sink_ready -> hps_0_h2f_axi_master_agent:read_cp_ready
	wire          hps_0_h2f_axi_master_agent_read_cp_startofpacket;                            // hps_0_h2f_axi_master_agent:read_cp_startofpacket -> router_004:sink_startofpacket
	wire          hps_0_h2f_axi_master_agent_read_cp_endofpacket;                              // hps_0_h2f_axi_master_agent:read_cp_endofpacket -> router_004:sink_endofpacket
	wire          router_004_src_valid;                                                        // router_004:src_valid -> cmd_demux_004:sink_valid
	wire  [164:0] router_004_src_data;                                                         // router_004:src_data -> cmd_demux_004:sink_data
	wire          router_004_src_ready;                                                        // cmd_demux_004:sink_ready -> router_004:src_ready
	wire   [11:0] router_004_src_channel;                                                      // router_004:src_channel -> cmd_demux_004:sink_channel
	wire          router_004_src_startofpacket;                                                // router_004:src_startofpacket -> cmd_demux_004:sink_startofpacket
	wire          router_004_src_endofpacket;                                                  // router_004:src_endofpacket -> cmd_demux_004:sink_endofpacket
	wire          ram_s1_agent_rp_valid;                                                       // RAM_s1_agent:rp_valid -> router_005:sink_valid
	wire  [128:0] ram_s1_agent_rp_data;                                                        // RAM_s1_agent:rp_data -> router_005:sink_data
	wire          ram_s1_agent_rp_ready;                                                       // router_005:sink_ready -> RAM_s1_agent:rp_ready
	wire          ram_s1_agent_rp_startofpacket;                                               // RAM_s1_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire          ram_s1_agent_rp_endofpacket;                                                 // RAM_s1_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire          router_005_src_valid;                                                        // router_005:src_valid -> rsp_demux:sink_valid
	wire  [128:0] router_005_src_data;                                                         // router_005:src_data -> rsp_demux:sink_data
	wire          router_005_src_ready;                                                        // rsp_demux:sink_ready -> router_005:src_ready
	wire   [11:0] router_005_src_channel;                                                      // router_005:src_channel -> rsp_demux:sink_channel
	wire          router_005_src_startofpacket;                                                // router_005:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_005_src_endofpacket;                                                  // router_005:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          timer_s1_agent_rp_valid;                                                     // TIMER_s1_agent:rp_valid -> router_006:sink_valid
	wire  [128:0] timer_s1_agent_rp_data;                                                      // TIMER_s1_agent:rp_data -> router_006:sink_data
	wire          timer_s1_agent_rp_ready;                                                     // router_006:sink_ready -> TIMER_s1_agent:rp_ready
	wire          timer_s1_agent_rp_startofpacket;                                             // TIMER_s1_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire          timer_s1_agent_rp_endofpacket;                                               // TIMER_s1_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire          router_006_src_valid;                                                        // router_006:src_valid -> rsp_demux_001:sink_valid
	wire  [128:0] router_006_src_data;                                                         // router_006:src_data -> rsp_demux_001:sink_data
	wire          router_006_src_ready;                                                        // rsp_demux_001:sink_ready -> router_006:src_ready
	wire   [11:0] router_006_src_channel;                                                      // router_006:src_channel -> rsp_demux_001:sink_channel
	wire          router_006_src_startofpacket;                                                // router_006:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_006_src_endofpacket;                                                  // router_006:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          sdram_s1_agent_rp_valid;                                                     // SDRAM_s1_agent:rp_valid -> router_007:sink_valid
	wire  [110:0] sdram_s1_agent_rp_data;                                                      // SDRAM_s1_agent:rp_data -> router_007:sink_data
	wire          sdram_s1_agent_rp_ready;                                                     // router_007:sink_ready -> SDRAM_s1_agent:rp_ready
	wire          sdram_s1_agent_rp_startofpacket;                                             // SDRAM_s1_agent:rp_startofpacket -> router_007:sink_startofpacket
	wire          sdram_s1_agent_rp_endofpacket;                                               // SDRAM_s1_agent:rp_endofpacket -> router_007:sink_endofpacket
	wire          router_007_src_valid;                                                        // router_007:src_valid -> rsp_demux_002:sink_valid
	wire  [110:0] router_007_src_data;                                                         // router_007:src_data -> rsp_demux_002:sink_data
	wire          router_007_src_ready;                                                        // rsp_demux_002:sink_ready -> router_007:src_ready
	wire   [11:0] router_007_src_channel;                                                      // router_007:src_channel -> rsp_demux_002:sink_channel
	wire          router_007_src_startofpacket;                                                // router_007:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_007_src_endofpacket;                                                  // router_007:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          sw_s1_agent_rp_valid;                                                        // SW_s1_agent:rp_valid -> router_008:sink_valid
	wire  [128:0] sw_s1_agent_rp_data;                                                         // SW_s1_agent:rp_data -> router_008:sink_data
	wire          sw_s1_agent_rp_ready;                                                        // router_008:sink_ready -> SW_s1_agent:rp_ready
	wire          sw_s1_agent_rp_startofpacket;                                                // SW_s1_agent:rp_startofpacket -> router_008:sink_startofpacket
	wire          sw_s1_agent_rp_endofpacket;                                                  // SW_s1_agent:rp_endofpacket -> router_008:sink_endofpacket
	wire          router_008_src_valid;                                                        // router_008:src_valid -> rsp_demux_003:sink_valid
	wire  [128:0] router_008_src_data;                                                         // router_008:src_data -> rsp_demux_003:sink_data
	wire          router_008_src_ready;                                                        // rsp_demux_003:sink_ready -> router_008:src_ready
	wire   [11:0] router_008_src_channel;                                                      // router_008:src_channel -> rsp_demux_003:sink_channel
	wire          router_008_src_startofpacket;                                                // router_008:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          router_008_src_endofpacket;                                                  // router_008:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          seg6_s1_agent_rp_valid;                                                      // SEG6_s1_agent:rp_valid -> router_009:sink_valid
	wire  [128:0] seg6_s1_agent_rp_data;                                                       // SEG6_s1_agent:rp_data -> router_009:sink_data
	wire          seg6_s1_agent_rp_ready;                                                      // router_009:sink_ready -> SEG6_s1_agent:rp_ready
	wire          seg6_s1_agent_rp_startofpacket;                                              // SEG6_s1_agent:rp_startofpacket -> router_009:sink_startofpacket
	wire          seg6_s1_agent_rp_endofpacket;                                                // SEG6_s1_agent:rp_endofpacket -> router_009:sink_endofpacket
	wire          router_009_src_valid;                                                        // router_009:src_valid -> rsp_demux_004:sink_valid
	wire  [128:0] router_009_src_data;                                                         // router_009:src_data -> rsp_demux_004:sink_data
	wire          router_009_src_ready;                                                        // rsp_demux_004:sink_ready -> router_009:src_ready
	wire   [11:0] router_009_src_channel;                                                      // router_009:src_channel -> rsp_demux_004:sink_channel
	wire          router_009_src_startofpacket;                                                // router_009:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          router_009_src_endofpacket;                                                  // router_009:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          seg5_s1_agent_rp_valid;                                                      // SEG5_s1_agent:rp_valid -> router_010:sink_valid
	wire  [128:0] seg5_s1_agent_rp_data;                                                       // SEG5_s1_agent:rp_data -> router_010:sink_data
	wire          seg5_s1_agent_rp_ready;                                                      // router_010:sink_ready -> SEG5_s1_agent:rp_ready
	wire          seg5_s1_agent_rp_startofpacket;                                              // SEG5_s1_agent:rp_startofpacket -> router_010:sink_startofpacket
	wire          seg5_s1_agent_rp_endofpacket;                                                // SEG5_s1_agent:rp_endofpacket -> router_010:sink_endofpacket
	wire          router_010_src_valid;                                                        // router_010:src_valid -> rsp_demux_005:sink_valid
	wire  [128:0] router_010_src_data;                                                         // router_010:src_data -> rsp_demux_005:sink_data
	wire          router_010_src_ready;                                                        // rsp_demux_005:sink_ready -> router_010:src_ready
	wire   [11:0] router_010_src_channel;                                                      // router_010:src_channel -> rsp_demux_005:sink_channel
	wire          router_010_src_startofpacket;                                                // router_010:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire          router_010_src_endofpacket;                                                  // router_010:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire          seg4_s1_agent_rp_valid;                                                      // SEG4_s1_agent:rp_valid -> router_011:sink_valid
	wire  [128:0] seg4_s1_agent_rp_data;                                                       // SEG4_s1_agent:rp_data -> router_011:sink_data
	wire          seg4_s1_agent_rp_ready;                                                      // router_011:sink_ready -> SEG4_s1_agent:rp_ready
	wire          seg4_s1_agent_rp_startofpacket;                                              // SEG4_s1_agent:rp_startofpacket -> router_011:sink_startofpacket
	wire          seg4_s1_agent_rp_endofpacket;                                                // SEG4_s1_agent:rp_endofpacket -> router_011:sink_endofpacket
	wire          router_011_src_valid;                                                        // router_011:src_valid -> rsp_demux_006:sink_valid
	wire  [128:0] router_011_src_data;                                                         // router_011:src_data -> rsp_demux_006:sink_data
	wire          router_011_src_ready;                                                        // rsp_demux_006:sink_ready -> router_011:src_ready
	wire   [11:0] router_011_src_channel;                                                      // router_011:src_channel -> rsp_demux_006:sink_channel
	wire          router_011_src_startofpacket;                                                // router_011:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire          router_011_src_endofpacket;                                                  // router_011:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire          seg3_s1_agent_rp_valid;                                                      // SEG3_s1_agent:rp_valid -> router_012:sink_valid
	wire  [128:0] seg3_s1_agent_rp_data;                                                       // SEG3_s1_agent:rp_data -> router_012:sink_data
	wire          seg3_s1_agent_rp_ready;                                                      // router_012:sink_ready -> SEG3_s1_agent:rp_ready
	wire          seg3_s1_agent_rp_startofpacket;                                              // SEG3_s1_agent:rp_startofpacket -> router_012:sink_startofpacket
	wire          seg3_s1_agent_rp_endofpacket;                                                // SEG3_s1_agent:rp_endofpacket -> router_012:sink_endofpacket
	wire          router_012_src_valid;                                                        // router_012:src_valid -> rsp_demux_007:sink_valid
	wire  [128:0] router_012_src_data;                                                         // router_012:src_data -> rsp_demux_007:sink_data
	wire          router_012_src_ready;                                                        // rsp_demux_007:sink_ready -> router_012:src_ready
	wire   [11:0] router_012_src_channel;                                                      // router_012:src_channel -> rsp_demux_007:sink_channel
	wire          router_012_src_startofpacket;                                                // router_012:src_startofpacket -> rsp_demux_007:sink_startofpacket
	wire          router_012_src_endofpacket;                                                  // router_012:src_endofpacket -> rsp_demux_007:sink_endofpacket
	wire          seg2_s1_agent_rp_valid;                                                      // SEG2_s1_agent:rp_valid -> router_013:sink_valid
	wire  [128:0] seg2_s1_agent_rp_data;                                                       // SEG2_s1_agent:rp_data -> router_013:sink_data
	wire          seg2_s1_agent_rp_ready;                                                      // router_013:sink_ready -> SEG2_s1_agent:rp_ready
	wire          seg2_s1_agent_rp_startofpacket;                                              // SEG2_s1_agent:rp_startofpacket -> router_013:sink_startofpacket
	wire          seg2_s1_agent_rp_endofpacket;                                                // SEG2_s1_agent:rp_endofpacket -> router_013:sink_endofpacket
	wire          router_013_src_valid;                                                        // router_013:src_valid -> rsp_demux_008:sink_valid
	wire  [128:0] router_013_src_data;                                                         // router_013:src_data -> rsp_demux_008:sink_data
	wire          router_013_src_ready;                                                        // rsp_demux_008:sink_ready -> router_013:src_ready
	wire   [11:0] router_013_src_channel;                                                      // router_013:src_channel -> rsp_demux_008:sink_channel
	wire          router_013_src_startofpacket;                                                // router_013:src_startofpacket -> rsp_demux_008:sink_startofpacket
	wire          router_013_src_endofpacket;                                                  // router_013:src_endofpacket -> rsp_demux_008:sink_endofpacket
	wire          seg1_s1_agent_rp_valid;                                                      // SEG1_s1_agent:rp_valid -> router_014:sink_valid
	wire  [128:0] seg1_s1_agent_rp_data;                                                       // SEG1_s1_agent:rp_data -> router_014:sink_data
	wire          seg1_s1_agent_rp_ready;                                                      // router_014:sink_ready -> SEG1_s1_agent:rp_ready
	wire          seg1_s1_agent_rp_startofpacket;                                              // SEG1_s1_agent:rp_startofpacket -> router_014:sink_startofpacket
	wire          seg1_s1_agent_rp_endofpacket;                                                // SEG1_s1_agent:rp_endofpacket -> router_014:sink_endofpacket
	wire          router_014_src_valid;                                                        // router_014:src_valid -> rsp_demux_009:sink_valid
	wire  [128:0] router_014_src_data;                                                         // router_014:src_data -> rsp_demux_009:sink_data
	wire          router_014_src_ready;                                                        // rsp_demux_009:sink_ready -> router_014:src_ready
	wire   [11:0] router_014_src_channel;                                                      // router_014:src_channel -> rsp_demux_009:sink_channel
	wire          router_014_src_startofpacket;                                                // router_014:src_startofpacket -> rsp_demux_009:sink_startofpacket
	wire          router_014_src_endofpacket;                                                  // router_014:src_endofpacket -> rsp_demux_009:sink_endofpacket
	wire          keys_s1_agent_rp_valid;                                                      // KEYS_s1_agent:rp_valid -> router_015:sink_valid
	wire  [128:0] keys_s1_agent_rp_data;                                                       // KEYS_s1_agent:rp_data -> router_015:sink_data
	wire          keys_s1_agent_rp_ready;                                                      // router_015:sink_ready -> KEYS_s1_agent:rp_ready
	wire          keys_s1_agent_rp_startofpacket;                                              // KEYS_s1_agent:rp_startofpacket -> router_015:sink_startofpacket
	wire          keys_s1_agent_rp_endofpacket;                                                // KEYS_s1_agent:rp_endofpacket -> router_015:sink_endofpacket
	wire          router_015_src_valid;                                                        // router_015:src_valid -> rsp_demux_010:sink_valid
	wire  [128:0] router_015_src_data;                                                         // router_015:src_data -> rsp_demux_010:sink_data
	wire          router_015_src_ready;                                                        // rsp_demux_010:sink_ready -> router_015:src_ready
	wire   [11:0] router_015_src_channel;                                                      // router_015:src_channel -> rsp_demux_010:sink_channel
	wire          router_015_src_startofpacket;                                                // router_015:src_startofpacket -> rsp_demux_010:sink_startofpacket
	wire          router_015_src_endofpacket;                                                  // router_015:src_endofpacket -> rsp_demux_010:sink_endofpacket
	wire          leds_s1_agent_rp_valid;                                                      // LEDS_s1_agent:rp_valid -> router_016:sink_valid
	wire  [128:0] leds_s1_agent_rp_data;                                                       // LEDS_s1_agent:rp_data -> router_016:sink_data
	wire          leds_s1_agent_rp_ready;                                                      // router_016:sink_ready -> LEDS_s1_agent:rp_ready
	wire          leds_s1_agent_rp_startofpacket;                                              // LEDS_s1_agent:rp_startofpacket -> router_016:sink_startofpacket
	wire          leds_s1_agent_rp_endofpacket;                                                // LEDS_s1_agent:rp_endofpacket -> router_016:sink_endofpacket
	wire          router_016_src_valid;                                                        // router_016:src_valid -> rsp_demux_011:sink_valid
	wire  [128:0] router_016_src_data;                                                         // router_016:src_data -> rsp_demux_011:sink_data
	wire          router_016_src_ready;                                                        // rsp_demux_011:sink_ready -> router_016:src_ready
	wire   [11:0] router_016_src_channel;                                                      // router_016:src_channel -> rsp_demux_011:sink_channel
	wire          router_016_src_startofpacket;                                                // router_016:src_startofpacket -> rsp_demux_011:sink_startofpacket
	wire          router_016_src_endofpacket;                                                  // router_016:src_endofpacket -> rsp_demux_011:sink_endofpacket
	wire          router_001_src_valid;                                                        // router_001:src_valid -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_valid
	wire  [128:0] router_001_src_data;                                                         // router_001:src_data -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_data
	wire          router_001_src_ready;                                                        // hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_ready -> router_001:src_ready
	wire   [11:0] router_001_src_channel;                                                      // router_001:src_channel -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_channel
	wire          router_001_src_startofpacket;                                                // router_001:src_startofpacket -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_startofpacket
	wire          router_001_src_endofpacket;                                                  // router_001:src_endofpacket -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_endofpacket
	wire  [128:0] hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_data;                             // hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_data -> cmd_demux_001:sink_data
	wire          hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_ready;                            // cmd_demux_001:sink_ready -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_ready
	wire   [11:0] hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_channel;                          // hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_channel -> cmd_demux_001:sink_channel
	wire          hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_startofpacket;                    // hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_endofpacket;                      // hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          rsp_mux_001_src_valid;                                                       // rsp_mux_001:src_valid -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_valid
	wire  [128:0] rsp_mux_001_src_data;                                                        // rsp_mux_001:src_data -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_data
	wire          rsp_mux_001_src_ready;                                                       // hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_ready -> rsp_mux_001:src_ready
	wire   [11:0] rsp_mux_001_src_channel;                                                     // rsp_mux_001:src_channel -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_channel
	wire          rsp_mux_001_src_startofpacket;                                               // rsp_mux_001:src_startofpacket -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                                 // rsp_mux_001:src_endofpacket -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_endofpacket
	wire          hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_valid;                            // hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_valid -> hps_0_h2f_lw_axi_master_agent:write_rp_valid
	wire  [128:0] hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_data;                             // hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_data -> hps_0_h2f_lw_axi_master_agent:write_rp_data
	wire          hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_ready;                            // hps_0_h2f_lw_axi_master_agent:write_rp_ready -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_ready
	wire   [11:0] hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_channel;                          // hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_channel -> hps_0_h2f_lw_axi_master_agent:write_rp_channel
	wire          hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_startofpacket;                    // hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_startofpacket -> hps_0_h2f_lw_axi_master_agent:write_rp_startofpacket
	wire          hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_endofpacket;                      // hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_endofpacket -> hps_0_h2f_lw_axi_master_agent:write_rp_endofpacket
	wire          router_002_src_valid;                                                        // router_002:src_valid -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_valid
	wire  [128:0] router_002_src_data;                                                         // router_002:src_data -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_data
	wire          router_002_src_ready;                                                        // hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_ready -> router_002:src_ready
	wire   [11:0] router_002_src_channel;                                                      // router_002:src_channel -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_channel
	wire          router_002_src_startofpacket;                                                // router_002:src_startofpacket -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_startofpacket
	wire          router_002_src_endofpacket;                                                  // router_002:src_endofpacket -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_endofpacket
	wire  [128:0] hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_data;                             // hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_data -> cmd_demux_002:sink_data
	wire          hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_ready;                            // cmd_demux_002:sink_ready -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_ready
	wire   [11:0] hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_channel;                          // hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_channel -> cmd_demux_002:sink_channel
	wire          hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_startofpacket;                    // hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_startofpacket -> cmd_demux_002:sink_startofpacket
	wire          hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_endofpacket;                      // hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_endofpacket -> cmd_demux_002:sink_endofpacket
	wire          rsp_mux_002_src_valid;                                                       // rsp_mux_002:src_valid -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_valid
	wire  [128:0] rsp_mux_002_src_data;                                                        // rsp_mux_002:src_data -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_data
	wire          rsp_mux_002_src_ready;                                                       // hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_ready -> rsp_mux_002:src_ready
	wire   [11:0] rsp_mux_002_src_channel;                                                     // rsp_mux_002:src_channel -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_channel
	wire          rsp_mux_002_src_startofpacket;                                               // rsp_mux_002:src_startofpacket -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_startofpacket
	wire          rsp_mux_002_src_endofpacket;                                                 // rsp_mux_002:src_endofpacket -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_endofpacket
	wire          hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_valid;                            // hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_valid -> hps_0_h2f_lw_axi_master_agent:read_rp_valid
	wire  [128:0] hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_data;                             // hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_data -> hps_0_h2f_lw_axi_master_agent:read_rp_data
	wire          hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_ready;                            // hps_0_h2f_lw_axi_master_agent:read_rp_ready -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_ready
	wire   [11:0] hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_channel;                          // hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_channel -> hps_0_h2f_lw_axi_master_agent:read_rp_channel
	wire          hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_startofpacket;                    // hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_startofpacket -> hps_0_h2f_lw_axi_master_agent:read_rp_startofpacket
	wire          hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_endofpacket;                      // hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_endofpacket -> hps_0_h2f_lw_axi_master_agent:read_rp_endofpacket
	wire          cmd_mux_002_src_valid;                                                       // cmd_mux_002:src_valid -> SDRAM_s1_burst_adapter:sink0_valid
	wire  [110:0] cmd_mux_002_src_data;                                                        // cmd_mux_002:src_data -> SDRAM_s1_burst_adapter:sink0_data
	wire          cmd_mux_002_src_ready;                                                       // SDRAM_s1_burst_adapter:sink0_ready -> cmd_mux_002:src_ready
	wire   [11:0] cmd_mux_002_src_channel;                                                     // cmd_mux_002:src_channel -> SDRAM_s1_burst_adapter:sink0_channel
	wire          cmd_mux_002_src_startofpacket;                                               // cmd_mux_002:src_startofpacket -> SDRAM_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                                 // cmd_mux_002:src_endofpacket -> SDRAM_s1_burst_adapter:sink0_endofpacket
	wire          sdram_s1_burst_adapter_source0_valid;                                        // SDRAM_s1_burst_adapter:source0_valid -> SDRAM_s1_agent:cp_valid
	wire  [110:0] sdram_s1_burst_adapter_source0_data;                                         // SDRAM_s1_burst_adapter:source0_data -> SDRAM_s1_agent:cp_data
	wire          sdram_s1_burst_adapter_source0_ready;                                        // SDRAM_s1_agent:cp_ready -> SDRAM_s1_burst_adapter:source0_ready
	wire   [11:0] sdram_s1_burst_adapter_source0_channel;                                      // SDRAM_s1_burst_adapter:source0_channel -> SDRAM_s1_agent:cp_channel
	wire          sdram_s1_burst_adapter_source0_startofpacket;                                // SDRAM_s1_burst_adapter:source0_startofpacket -> SDRAM_s1_agent:cp_startofpacket
	wire          sdram_s1_burst_adapter_source0_endofpacket;                                  // SDRAM_s1_burst_adapter:source0_endofpacket -> SDRAM_s1_agent:cp_endofpacket
	wire          cmd_mux_003_src_valid;                                                       // cmd_mux_003:src_valid -> SW_s1_burst_adapter:sink0_valid
	wire  [128:0] cmd_mux_003_src_data;                                                        // cmd_mux_003:src_data -> SW_s1_burst_adapter:sink0_data
	wire          cmd_mux_003_src_ready;                                                       // SW_s1_burst_adapter:sink0_ready -> cmd_mux_003:src_ready
	wire   [11:0] cmd_mux_003_src_channel;                                                     // cmd_mux_003:src_channel -> SW_s1_burst_adapter:sink0_channel
	wire          cmd_mux_003_src_startofpacket;                                               // cmd_mux_003:src_startofpacket -> SW_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                                 // cmd_mux_003:src_endofpacket -> SW_s1_burst_adapter:sink0_endofpacket
	wire          sw_s1_burst_adapter_source0_valid;                                           // SW_s1_burst_adapter:source0_valid -> SW_s1_agent:cp_valid
	wire  [128:0] sw_s1_burst_adapter_source0_data;                                            // SW_s1_burst_adapter:source0_data -> SW_s1_agent:cp_data
	wire          sw_s1_burst_adapter_source0_ready;                                           // SW_s1_agent:cp_ready -> SW_s1_burst_adapter:source0_ready
	wire   [11:0] sw_s1_burst_adapter_source0_channel;                                         // SW_s1_burst_adapter:source0_channel -> SW_s1_agent:cp_channel
	wire          sw_s1_burst_adapter_source0_startofpacket;                                   // SW_s1_burst_adapter:source0_startofpacket -> SW_s1_agent:cp_startofpacket
	wire          sw_s1_burst_adapter_source0_endofpacket;                                     // SW_s1_burst_adapter:source0_endofpacket -> SW_s1_agent:cp_endofpacket
	wire          cmd_mux_004_src_valid;                                                       // cmd_mux_004:src_valid -> SEG6_s1_burst_adapter:sink0_valid
	wire  [128:0] cmd_mux_004_src_data;                                                        // cmd_mux_004:src_data -> SEG6_s1_burst_adapter:sink0_data
	wire          cmd_mux_004_src_ready;                                                       // SEG6_s1_burst_adapter:sink0_ready -> cmd_mux_004:src_ready
	wire   [11:0] cmd_mux_004_src_channel;                                                     // cmd_mux_004:src_channel -> SEG6_s1_burst_adapter:sink0_channel
	wire          cmd_mux_004_src_startofpacket;                                               // cmd_mux_004:src_startofpacket -> SEG6_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                                 // cmd_mux_004:src_endofpacket -> SEG6_s1_burst_adapter:sink0_endofpacket
	wire          seg6_s1_burst_adapter_source0_valid;                                         // SEG6_s1_burst_adapter:source0_valid -> SEG6_s1_agent:cp_valid
	wire  [128:0] seg6_s1_burst_adapter_source0_data;                                          // SEG6_s1_burst_adapter:source0_data -> SEG6_s1_agent:cp_data
	wire          seg6_s1_burst_adapter_source0_ready;                                         // SEG6_s1_agent:cp_ready -> SEG6_s1_burst_adapter:source0_ready
	wire   [11:0] seg6_s1_burst_adapter_source0_channel;                                       // SEG6_s1_burst_adapter:source0_channel -> SEG6_s1_agent:cp_channel
	wire          seg6_s1_burst_adapter_source0_startofpacket;                                 // SEG6_s1_burst_adapter:source0_startofpacket -> SEG6_s1_agent:cp_startofpacket
	wire          seg6_s1_burst_adapter_source0_endofpacket;                                   // SEG6_s1_burst_adapter:source0_endofpacket -> SEG6_s1_agent:cp_endofpacket
	wire          cmd_mux_005_src_valid;                                                       // cmd_mux_005:src_valid -> SEG5_s1_burst_adapter:sink0_valid
	wire  [128:0] cmd_mux_005_src_data;                                                        // cmd_mux_005:src_data -> SEG5_s1_burst_adapter:sink0_data
	wire          cmd_mux_005_src_ready;                                                       // SEG5_s1_burst_adapter:sink0_ready -> cmd_mux_005:src_ready
	wire   [11:0] cmd_mux_005_src_channel;                                                     // cmd_mux_005:src_channel -> SEG5_s1_burst_adapter:sink0_channel
	wire          cmd_mux_005_src_startofpacket;                                               // cmd_mux_005:src_startofpacket -> SEG5_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_005_src_endofpacket;                                                 // cmd_mux_005:src_endofpacket -> SEG5_s1_burst_adapter:sink0_endofpacket
	wire          seg5_s1_burst_adapter_source0_valid;                                         // SEG5_s1_burst_adapter:source0_valid -> SEG5_s1_agent:cp_valid
	wire  [128:0] seg5_s1_burst_adapter_source0_data;                                          // SEG5_s1_burst_adapter:source0_data -> SEG5_s1_agent:cp_data
	wire          seg5_s1_burst_adapter_source0_ready;                                         // SEG5_s1_agent:cp_ready -> SEG5_s1_burst_adapter:source0_ready
	wire   [11:0] seg5_s1_burst_adapter_source0_channel;                                       // SEG5_s1_burst_adapter:source0_channel -> SEG5_s1_agent:cp_channel
	wire          seg5_s1_burst_adapter_source0_startofpacket;                                 // SEG5_s1_burst_adapter:source0_startofpacket -> SEG5_s1_agent:cp_startofpacket
	wire          seg5_s1_burst_adapter_source0_endofpacket;                                   // SEG5_s1_burst_adapter:source0_endofpacket -> SEG5_s1_agent:cp_endofpacket
	wire          cmd_mux_006_src_valid;                                                       // cmd_mux_006:src_valid -> SEG4_s1_burst_adapter:sink0_valid
	wire  [128:0] cmd_mux_006_src_data;                                                        // cmd_mux_006:src_data -> SEG4_s1_burst_adapter:sink0_data
	wire          cmd_mux_006_src_ready;                                                       // SEG4_s1_burst_adapter:sink0_ready -> cmd_mux_006:src_ready
	wire   [11:0] cmd_mux_006_src_channel;                                                     // cmd_mux_006:src_channel -> SEG4_s1_burst_adapter:sink0_channel
	wire          cmd_mux_006_src_startofpacket;                                               // cmd_mux_006:src_startofpacket -> SEG4_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_006_src_endofpacket;                                                 // cmd_mux_006:src_endofpacket -> SEG4_s1_burst_adapter:sink0_endofpacket
	wire          seg4_s1_burst_adapter_source0_valid;                                         // SEG4_s1_burst_adapter:source0_valid -> SEG4_s1_agent:cp_valid
	wire  [128:0] seg4_s1_burst_adapter_source0_data;                                          // SEG4_s1_burst_adapter:source0_data -> SEG4_s1_agent:cp_data
	wire          seg4_s1_burst_adapter_source0_ready;                                         // SEG4_s1_agent:cp_ready -> SEG4_s1_burst_adapter:source0_ready
	wire   [11:0] seg4_s1_burst_adapter_source0_channel;                                       // SEG4_s1_burst_adapter:source0_channel -> SEG4_s1_agent:cp_channel
	wire          seg4_s1_burst_adapter_source0_startofpacket;                                 // SEG4_s1_burst_adapter:source0_startofpacket -> SEG4_s1_agent:cp_startofpacket
	wire          seg4_s1_burst_adapter_source0_endofpacket;                                   // SEG4_s1_burst_adapter:source0_endofpacket -> SEG4_s1_agent:cp_endofpacket
	wire          cmd_mux_007_src_valid;                                                       // cmd_mux_007:src_valid -> SEG3_s1_burst_adapter:sink0_valid
	wire  [128:0] cmd_mux_007_src_data;                                                        // cmd_mux_007:src_data -> SEG3_s1_burst_adapter:sink0_data
	wire          cmd_mux_007_src_ready;                                                       // SEG3_s1_burst_adapter:sink0_ready -> cmd_mux_007:src_ready
	wire   [11:0] cmd_mux_007_src_channel;                                                     // cmd_mux_007:src_channel -> SEG3_s1_burst_adapter:sink0_channel
	wire          cmd_mux_007_src_startofpacket;                                               // cmd_mux_007:src_startofpacket -> SEG3_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_007_src_endofpacket;                                                 // cmd_mux_007:src_endofpacket -> SEG3_s1_burst_adapter:sink0_endofpacket
	wire          seg3_s1_burst_adapter_source0_valid;                                         // SEG3_s1_burst_adapter:source0_valid -> SEG3_s1_agent:cp_valid
	wire  [128:0] seg3_s1_burst_adapter_source0_data;                                          // SEG3_s1_burst_adapter:source0_data -> SEG3_s1_agent:cp_data
	wire          seg3_s1_burst_adapter_source0_ready;                                         // SEG3_s1_agent:cp_ready -> SEG3_s1_burst_adapter:source0_ready
	wire   [11:0] seg3_s1_burst_adapter_source0_channel;                                       // SEG3_s1_burst_adapter:source0_channel -> SEG3_s1_agent:cp_channel
	wire          seg3_s1_burst_adapter_source0_startofpacket;                                 // SEG3_s1_burst_adapter:source0_startofpacket -> SEG3_s1_agent:cp_startofpacket
	wire          seg3_s1_burst_adapter_source0_endofpacket;                                   // SEG3_s1_burst_adapter:source0_endofpacket -> SEG3_s1_agent:cp_endofpacket
	wire          cmd_mux_008_src_valid;                                                       // cmd_mux_008:src_valid -> SEG2_s1_burst_adapter:sink0_valid
	wire  [128:0] cmd_mux_008_src_data;                                                        // cmd_mux_008:src_data -> SEG2_s1_burst_adapter:sink0_data
	wire          cmd_mux_008_src_ready;                                                       // SEG2_s1_burst_adapter:sink0_ready -> cmd_mux_008:src_ready
	wire   [11:0] cmd_mux_008_src_channel;                                                     // cmd_mux_008:src_channel -> SEG2_s1_burst_adapter:sink0_channel
	wire          cmd_mux_008_src_startofpacket;                                               // cmd_mux_008:src_startofpacket -> SEG2_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_008_src_endofpacket;                                                 // cmd_mux_008:src_endofpacket -> SEG2_s1_burst_adapter:sink0_endofpacket
	wire          seg2_s1_burst_adapter_source0_valid;                                         // SEG2_s1_burst_adapter:source0_valid -> SEG2_s1_agent:cp_valid
	wire  [128:0] seg2_s1_burst_adapter_source0_data;                                          // SEG2_s1_burst_adapter:source0_data -> SEG2_s1_agent:cp_data
	wire          seg2_s1_burst_adapter_source0_ready;                                         // SEG2_s1_agent:cp_ready -> SEG2_s1_burst_adapter:source0_ready
	wire   [11:0] seg2_s1_burst_adapter_source0_channel;                                       // SEG2_s1_burst_adapter:source0_channel -> SEG2_s1_agent:cp_channel
	wire          seg2_s1_burst_adapter_source0_startofpacket;                                 // SEG2_s1_burst_adapter:source0_startofpacket -> SEG2_s1_agent:cp_startofpacket
	wire          seg2_s1_burst_adapter_source0_endofpacket;                                   // SEG2_s1_burst_adapter:source0_endofpacket -> SEG2_s1_agent:cp_endofpacket
	wire          cmd_mux_009_src_valid;                                                       // cmd_mux_009:src_valid -> SEG1_s1_burst_adapter:sink0_valid
	wire  [128:0] cmd_mux_009_src_data;                                                        // cmd_mux_009:src_data -> SEG1_s1_burst_adapter:sink0_data
	wire          cmd_mux_009_src_ready;                                                       // SEG1_s1_burst_adapter:sink0_ready -> cmd_mux_009:src_ready
	wire   [11:0] cmd_mux_009_src_channel;                                                     // cmd_mux_009:src_channel -> SEG1_s1_burst_adapter:sink0_channel
	wire          cmd_mux_009_src_startofpacket;                                               // cmd_mux_009:src_startofpacket -> SEG1_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_009_src_endofpacket;                                                 // cmd_mux_009:src_endofpacket -> SEG1_s1_burst_adapter:sink0_endofpacket
	wire          seg1_s1_burst_adapter_source0_valid;                                         // SEG1_s1_burst_adapter:source0_valid -> SEG1_s1_agent:cp_valid
	wire  [128:0] seg1_s1_burst_adapter_source0_data;                                          // SEG1_s1_burst_adapter:source0_data -> SEG1_s1_agent:cp_data
	wire          seg1_s1_burst_adapter_source0_ready;                                         // SEG1_s1_agent:cp_ready -> SEG1_s1_burst_adapter:source0_ready
	wire   [11:0] seg1_s1_burst_adapter_source0_channel;                                       // SEG1_s1_burst_adapter:source0_channel -> SEG1_s1_agent:cp_channel
	wire          seg1_s1_burst_adapter_source0_startofpacket;                                 // SEG1_s1_burst_adapter:source0_startofpacket -> SEG1_s1_agent:cp_startofpacket
	wire          seg1_s1_burst_adapter_source0_endofpacket;                                   // SEG1_s1_burst_adapter:source0_endofpacket -> SEG1_s1_agent:cp_endofpacket
	wire          cmd_mux_010_src_valid;                                                       // cmd_mux_010:src_valid -> KEYS_s1_burst_adapter:sink0_valid
	wire  [128:0] cmd_mux_010_src_data;                                                        // cmd_mux_010:src_data -> KEYS_s1_burst_adapter:sink0_data
	wire          cmd_mux_010_src_ready;                                                       // KEYS_s1_burst_adapter:sink0_ready -> cmd_mux_010:src_ready
	wire   [11:0] cmd_mux_010_src_channel;                                                     // cmd_mux_010:src_channel -> KEYS_s1_burst_adapter:sink0_channel
	wire          cmd_mux_010_src_startofpacket;                                               // cmd_mux_010:src_startofpacket -> KEYS_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_010_src_endofpacket;                                                 // cmd_mux_010:src_endofpacket -> KEYS_s1_burst_adapter:sink0_endofpacket
	wire          keys_s1_burst_adapter_source0_valid;                                         // KEYS_s1_burst_adapter:source0_valid -> KEYS_s1_agent:cp_valid
	wire  [128:0] keys_s1_burst_adapter_source0_data;                                          // KEYS_s1_burst_adapter:source0_data -> KEYS_s1_agent:cp_data
	wire          keys_s1_burst_adapter_source0_ready;                                         // KEYS_s1_agent:cp_ready -> KEYS_s1_burst_adapter:source0_ready
	wire   [11:0] keys_s1_burst_adapter_source0_channel;                                       // KEYS_s1_burst_adapter:source0_channel -> KEYS_s1_agent:cp_channel
	wire          keys_s1_burst_adapter_source0_startofpacket;                                 // KEYS_s1_burst_adapter:source0_startofpacket -> KEYS_s1_agent:cp_startofpacket
	wire          keys_s1_burst_adapter_source0_endofpacket;                                   // KEYS_s1_burst_adapter:source0_endofpacket -> KEYS_s1_agent:cp_endofpacket
	wire          cmd_mux_011_src_valid;                                                       // cmd_mux_011:src_valid -> LEDS_s1_burst_adapter:sink0_valid
	wire  [128:0] cmd_mux_011_src_data;                                                        // cmd_mux_011:src_data -> LEDS_s1_burst_adapter:sink0_data
	wire          cmd_mux_011_src_ready;                                                       // LEDS_s1_burst_adapter:sink0_ready -> cmd_mux_011:src_ready
	wire   [11:0] cmd_mux_011_src_channel;                                                     // cmd_mux_011:src_channel -> LEDS_s1_burst_adapter:sink0_channel
	wire          cmd_mux_011_src_startofpacket;                                               // cmd_mux_011:src_startofpacket -> LEDS_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_011_src_endofpacket;                                                 // cmd_mux_011:src_endofpacket -> LEDS_s1_burst_adapter:sink0_endofpacket
	wire          leds_s1_burst_adapter_source0_valid;                                         // LEDS_s1_burst_adapter:source0_valid -> LEDS_s1_agent:cp_valid
	wire  [128:0] leds_s1_burst_adapter_source0_data;                                          // LEDS_s1_burst_adapter:source0_data -> LEDS_s1_agent:cp_data
	wire          leds_s1_burst_adapter_source0_ready;                                         // LEDS_s1_agent:cp_ready -> LEDS_s1_burst_adapter:source0_ready
	wire   [11:0] leds_s1_burst_adapter_source0_channel;                                       // LEDS_s1_burst_adapter:source0_channel -> LEDS_s1_agent:cp_channel
	wire          leds_s1_burst_adapter_source0_startofpacket;                                 // LEDS_s1_burst_adapter:source0_startofpacket -> LEDS_s1_agent:cp_startofpacket
	wire          leds_s1_burst_adapter_source0_endofpacket;                                   // LEDS_s1_burst_adapter:source0_endofpacket -> LEDS_s1_agent:cp_endofpacket
	wire          cmd_demux_src0_valid;                                                        // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [128:0] cmd_demux_src0_data;                                                         // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                                        // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire   [11:0] cmd_demux_src0_channel;                                                      // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                                // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                  // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                                        // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [128:0] cmd_demux_src1_data;                                                         // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire          cmd_demux_src1_ready;                                                        // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire   [11:0] cmd_demux_src1_channel;                                                      // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_src1_startofpacket;                                                // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          cmd_demux_src1_endofpacket;                                                  // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_src3_valid;                                                        // cmd_demux:src3_valid -> cmd_mux_003:sink0_valid
	wire  [128:0] cmd_demux_src3_data;                                                         // cmd_demux:src3_data -> cmd_mux_003:sink0_data
	wire          cmd_demux_src3_ready;                                                        // cmd_mux_003:sink0_ready -> cmd_demux:src3_ready
	wire   [11:0] cmd_demux_src3_channel;                                                      // cmd_demux:src3_channel -> cmd_mux_003:sink0_channel
	wire          cmd_demux_src3_startofpacket;                                                // cmd_demux:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          cmd_demux_src3_endofpacket;                                                  // cmd_demux:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_src4_valid;                                                        // cmd_demux:src4_valid -> cmd_mux_004:sink0_valid
	wire  [128:0] cmd_demux_src4_data;                                                         // cmd_demux:src4_data -> cmd_mux_004:sink0_data
	wire          cmd_demux_src4_ready;                                                        // cmd_mux_004:sink0_ready -> cmd_demux:src4_ready
	wire   [11:0] cmd_demux_src4_channel;                                                      // cmd_demux:src4_channel -> cmd_mux_004:sink0_channel
	wire          cmd_demux_src4_startofpacket;                                                // cmd_demux:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          cmd_demux_src4_endofpacket;                                                  // cmd_demux:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_src5_valid;                                                        // cmd_demux:src5_valid -> cmd_mux_005:sink0_valid
	wire  [128:0] cmd_demux_src5_data;                                                         // cmd_demux:src5_data -> cmd_mux_005:sink0_data
	wire          cmd_demux_src5_ready;                                                        // cmd_mux_005:sink0_ready -> cmd_demux:src5_ready
	wire   [11:0] cmd_demux_src5_channel;                                                      // cmd_demux:src5_channel -> cmd_mux_005:sink0_channel
	wire          cmd_demux_src5_startofpacket;                                                // cmd_demux:src5_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire          cmd_demux_src5_endofpacket;                                                  // cmd_demux:src5_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire          cmd_demux_src6_valid;                                                        // cmd_demux:src6_valid -> cmd_mux_006:sink0_valid
	wire  [128:0] cmd_demux_src6_data;                                                         // cmd_demux:src6_data -> cmd_mux_006:sink0_data
	wire          cmd_demux_src6_ready;                                                        // cmd_mux_006:sink0_ready -> cmd_demux:src6_ready
	wire   [11:0] cmd_demux_src6_channel;                                                      // cmd_demux:src6_channel -> cmd_mux_006:sink0_channel
	wire          cmd_demux_src6_startofpacket;                                                // cmd_demux:src6_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire          cmd_demux_src6_endofpacket;                                                  // cmd_demux:src6_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire          cmd_demux_src7_valid;                                                        // cmd_demux:src7_valid -> cmd_mux_007:sink0_valid
	wire  [128:0] cmd_demux_src7_data;                                                         // cmd_demux:src7_data -> cmd_mux_007:sink0_data
	wire          cmd_demux_src7_ready;                                                        // cmd_mux_007:sink0_ready -> cmd_demux:src7_ready
	wire   [11:0] cmd_demux_src7_channel;                                                      // cmd_demux:src7_channel -> cmd_mux_007:sink0_channel
	wire          cmd_demux_src7_startofpacket;                                                // cmd_demux:src7_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire          cmd_demux_src7_endofpacket;                                                  // cmd_demux:src7_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire          cmd_demux_src8_valid;                                                        // cmd_demux:src8_valid -> cmd_mux_008:sink0_valid
	wire  [128:0] cmd_demux_src8_data;                                                         // cmd_demux:src8_data -> cmd_mux_008:sink0_data
	wire          cmd_demux_src8_ready;                                                        // cmd_mux_008:sink0_ready -> cmd_demux:src8_ready
	wire   [11:0] cmd_demux_src8_channel;                                                      // cmd_demux:src8_channel -> cmd_mux_008:sink0_channel
	wire          cmd_demux_src8_startofpacket;                                                // cmd_demux:src8_startofpacket -> cmd_mux_008:sink0_startofpacket
	wire          cmd_demux_src8_endofpacket;                                                  // cmd_demux:src8_endofpacket -> cmd_mux_008:sink0_endofpacket
	wire          cmd_demux_src9_valid;                                                        // cmd_demux:src9_valid -> cmd_mux_009:sink0_valid
	wire  [128:0] cmd_demux_src9_data;                                                         // cmd_demux:src9_data -> cmd_mux_009:sink0_data
	wire          cmd_demux_src9_ready;                                                        // cmd_mux_009:sink0_ready -> cmd_demux:src9_ready
	wire   [11:0] cmd_demux_src9_channel;                                                      // cmd_demux:src9_channel -> cmd_mux_009:sink0_channel
	wire          cmd_demux_src9_startofpacket;                                                // cmd_demux:src9_startofpacket -> cmd_mux_009:sink0_startofpacket
	wire          cmd_demux_src9_endofpacket;                                                  // cmd_demux:src9_endofpacket -> cmd_mux_009:sink0_endofpacket
	wire          cmd_demux_src10_valid;                                                       // cmd_demux:src10_valid -> cmd_mux_010:sink0_valid
	wire  [128:0] cmd_demux_src10_data;                                                        // cmd_demux:src10_data -> cmd_mux_010:sink0_data
	wire          cmd_demux_src10_ready;                                                       // cmd_mux_010:sink0_ready -> cmd_demux:src10_ready
	wire   [11:0] cmd_demux_src10_channel;                                                     // cmd_demux:src10_channel -> cmd_mux_010:sink0_channel
	wire          cmd_demux_src10_startofpacket;                                               // cmd_demux:src10_startofpacket -> cmd_mux_010:sink0_startofpacket
	wire          cmd_demux_src10_endofpacket;                                                 // cmd_demux:src10_endofpacket -> cmd_mux_010:sink0_endofpacket
	wire          cmd_demux_src11_valid;                                                       // cmd_demux:src11_valid -> cmd_mux_011:sink0_valid
	wire  [128:0] cmd_demux_src11_data;                                                        // cmd_demux:src11_data -> cmd_mux_011:sink0_data
	wire          cmd_demux_src11_ready;                                                       // cmd_mux_011:sink0_ready -> cmd_demux:src11_ready
	wire   [11:0] cmd_demux_src11_channel;                                                     // cmd_demux:src11_channel -> cmd_mux_011:sink0_channel
	wire          cmd_demux_src11_startofpacket;                                               // cmd_demux:src11_startofpacket -> cmd_mux_011:sink0_startofpacket
	wire          cmd_demux_src11_endofpacket;                                                 // cmd_demux:src11_endofpacket -> cmd_mux_011:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                                    // cmd_demux_001:src0_valid -> cmd_mux_003:sink1_valid
	wire  [128:0] cmd_demux_001_src0_data;                                                     // cmd_demux_001:src0_data -> cmd_mux_003:sink1_data
	wire          cmd_demux_001_src0_ready;                                                    // cmd_mux_003:sink1_ready -> cmd_demux_001:src0_ready
	wire   [11:0] cmd_demux_001_src0_channel;                                                  // cmd_demux_001:src0_channel -> cmd_mux_003:sink1_channel
	wire          cmd_demux_001_src0_startofpacket;                                            // cmd_demux_001:src0_startofpacket -> cmd_mux_003:sink1_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                              // cmd_demux_001:src0_endofpacket -> cmd_mux_003:sink1_endofpacket
	wire          cmd_demux_001_src1_valid;                                                    // cmd_demux_001:src1_valid -> cmd_mux_004:sink1_valid
	wire  [128:0] cmd_demux_001_src1_data;                                                     // cmd_demux_001:src1_data -> cmd_mux_004:sink1_data
	wire          cmd_demux_001_src1_ready;                                                    // cmd_mux_004:sink1_ready -> cmd_demux_001:src1_ready
	wire   [11:0] cmd_demux_001_src1_channel;                                                  // cmd_demux_001:src1_channel -> cmd_mux_004:sink1_channel
	wire          cmd_demux_001_src1_startofpacket;                                            // cmd_demux_001:src1_startofpacket -> cmd_mux_004:sink1_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                                              // cmd_demux_001:src1_endofpacket -> cmd_mux_004:sink1_endofpacket
	wire          cmd_demux_001_src2_valid;                                                    // cmd_demux_001:src2_valid -> cmd_mux_005:sink1_valid
	wire  [128:0] cmd_demux_001_src2_data;                                                     // cmd_demux_001:src2_data -> cmd_mux_005:sink1_data
	wire          cmd_demux_001_src2_ready;                                                    // cmd_mux_005:sink1_ready -> cmd_demux_001:src2_ready
	wire   [11:0] cmd_demux_001_src2_channel;                                                  // cmd_demux_001:src2_channel -> cmd_mux_005:sink1_channel
	wire          cmd_demux_001_src2_startofpacket;                                            // cmd_demux_001:src2_startofpacket -> cmd_mux_005:sink1_startofpacket
	wire          cmd_demux_001_src2_endofpacket;                                              // cmd_demux_001:src2_endofpacket -> cmd_mux_005:sink1_endofpacket
	wire          cmd_demux_001_src3_valid;                                                    // cmd_demux_001:src3_valid -> cmd_mux_006:sink1_valid
	wire  [128:0] cmd_demux_001_src3_data;                                                     // cmd_demux_001:src3_data -> cmd_mux_006:sink1_data
	wire          cmd_demux_001_src3_ready;                                                    // cmd_mux_006:sink1_ready -> cmd_demux_001:src3_ready
	wire   [11:0] cmd_demux_001_src3_channel;                                                  // cmd_demux_001:src3_channel -> cmd_mux_006:sink1_channel
	wire          cmd_demux_001_src3_startofpacket;                                            // cmd_demux_001:src3_startofpacket -> cmd_mux_006:sink1_startofpacket
	wire          cmd_demux_001_src3_endofpacket;                                              // cmd_demux_001:src3_endofpacket -> cmd_mux_006:sink1_endofpacket
	wire          cmd_demux_001_src4_valid;                                                    // cmd_demux_001:src4_valid -> cmd_mux_007:sink1_valid
	wire  [128:0] cmd_demux_001_src4_data;                                                     // cmd_demux_001:src4_data -> cmd_mux_007:sink1_data
	wire          cmd_demux_001_src4_ready;                                                    // cmd_mux_007:sink1_ready -> cmd_demux_001:src4_ready
	wire   [11:0] cmd_demux_001_src4_channel;                                                  // cmd_demux_001:src4_channel -> cmd_mux_007:sink1_channel
	wire          cmd_demux_001_src4_startofpacket;                                            // cmd_demux_001:src4_startofpacket -> cmd_mux_007:sink1_startofpacket
	wire          cmd_demux_001_src4_endofpacket;                                              // cmd_demux_001:src4_endofpacket -> cmd_mux_007:sink1_endofpacket
	wire          cmd_demux_001_src5_valid;                                                    // cmd_demux_001:src5_valid -> cmd_mux_008:sink1_valid
	wire  [128:0] cmd_demux_001_src5_data;                                                     // cmd_demux_001:src5_data -> cmd_mux_008:sink1_data
	wire          cmd_demux_001_src5_ready;                                                    // cmd_mux_008:sink1_ready -> cmd_demux_001:src5_ready
	wire   [11:0] cmd_demux_001_src5_channel;                                                  // cmd_demux_001:src5_channel -> cmd_mux_008:sink1_channel
	wire          cmd_demux_001_src5_startofpacket;                                            // cmd_demux_001:src5_startofpacket -> cmd_mux_008:sink1_startofpacket
	wire          cmd_demux_001_src5_endofpacket;                                              // cmd_demux_001:src5_endofpacket -> cmd_mux_008:sink1_endofpacket
	wire          cmd_demux_001_src6_valid;                                                    // cmd_demux_001:src6_valid -> cmd_mux_009:sink1_valid
	wire  [128:0] cmd_demux_001_src6_data;                                                     // cmd_demux_001:src6_data -> cmd_mux_009:sink1_data
	wire          cmd_demux_001_src6_ready;                                                    // cmd_mux_009:sink1_ready -> cmd_demux_001:src6_ready
	wire   [11:0] cmd_demux_001_src6_channel;                                                  // cmd_demux_001:src6_channel -> cmd_mux_009:sink1_channel
	wire          cmd_demux_001_src6_startofpacket;                                            // cmd_demux_001:src6_startofpacket -> cmd_mux_009:sink1_startofpacket
	wire          cmd_demux_001_src6_endofpacket;                                              // cmd_demux_001:src6_endofpacket -> cmd_mux_009:sink1_endofpacket
	wire          cmd_demux_001_src7_valid;                                                    // cmd_demux_001:src7_valid -> cmd_mux_010:sink1_valid
	wire  [128:0] cmd_demux_001_src7_data;                                                     // cmd_demux_001:src7_data -> cmd_mux_010:sink1_data
	wire          cmd_demux_001_src7_ready;                                                    // cmd_mux_010:sink1_ready -> cmd_demux_001:src7_ready
	wire   [11:0] cmd_demux_001_src7_channel;                                                  // cmd_demux_001:src7_channel -> cmd_mux_010:sink1_channel
	wire          cmd_demux_001_src7_startofpacket;                                            // cmd_demux_001:src7_startofpacket -> cmd_mux_010:sink1_startofpacket
	wire          cmd_demux_001_src7_endofpacket;                                              // cmd_demux_001:src7_endofpacket -> cmd_mux_010:sink1_endofpacket
	wire          cmd_demux_001_src8_valid;                                                    // cmd_demux_001:src8_valid -> cmd_mux_011:sink1_valid
	wire  [128:0] cmd_demux_001_src8_data;                                                     // cmd_demux_001:src8_data -> cmd_mux_011:sink1_data
	wire          cmd_demux_001_src8_ready;                                                    // cmd_mux_011:sink1_ready -> cmd_demux_001:src8_ready
	wire   [11:0] cmd_demux_001_src8_channel;                                                  // cmd_demux_001:src8_channel -> cmd_mux_011:sink1_channel
	wire          cmd_demux_001_src8_startofpacket;                                            // cmd_demux_001:src8_startofpacket -> cmd_mux_011:sink1_startofpacket
	wire          cmd_demux_001_src8_endofpacket;                                              // cmd_demux_001:src8_endofpacket -> cmd_mux_011:sink1_endofpacket
	wire          cmd_demux_002_src0_valid;                                                    // cmd_demux_002:src0_valid -> cmd_mux_003:sink2_valid
	wire  [128:0] cmd_demux_002_src0_data;                                                     // cmd_demux_002:src0_data -> cmd_mux_003:sink2_data
	wire          cmd_demux_002_src0_ready;                                                    // cmd_mux_003:sink2_ready -> cmd_demux_002:src0_ready
	wire   [11:0] cmd_demux_002_src0_channel;                                                  // cmd_demux_002:src0_channel -> cmd_mux_003:sink2_channel
	wire          cmd_demux_002_src0_startofpacket;                                            // cmd_demux_002:src0_startofpacket -> cmd_mux_003:sink2_startofpacket
	wire          cmd_demux_002_src0_endofpacket;                                              // cmd_demux_002:src0_endofpacket -> cmd_mux_003:sink2_endofpacket
	wire          cmd_demux_002_src1_valid;                                                    // cmd_demux_002:src1_valid -> cmd_mux_004:sink2_valid
	wire  [128:0] cmd_demux_002_src1_data;                                                     // cmd_demux_002:src1_data -> cmd_mux_004:sink2_data
	wire          cmd_demux_002_src1_ready;                                                    // cmd_mux_004:sink2_ready -> cmd_demux_002:src1_ready
	wire   [11:0] cmd_demux_002_src1_channel;                                                  // cmd_demux_002:src1_channel -> cmd_mux_004:sink2_channel
	wire          cmd_demux_002_src1_startofpacket;                                            // cmd_demux_002:src1_startofpacket -> cmd_mux_004:sink2_startofpacket
	wire          cmd_demux_002_src1_endofpacket;                                              // cmd_demux_002:src1_endofpacket -> cmd_mux_004:sink2_endofpacket
	wire          cmd_demux_002_src2_valid;                                                    // cmd_demux_002:src2_valid -> cmd_mux_005:sink2_valid
	wire  [128:0] cmd_demux_002_src2_data;                                                     // cmd_demux_002:src2_data -> cmd_mux_005:sink2_data
	wire          cmd_demux_002_src2_ready;                                                    // cmd_mux_005:sink2_ready -> cmd_demux_002:src2_ready
	wire   [11:0] cmd_demux_002_src2_channel;                                                  // cmd_demux_002:src2_channel -> cmd_mux_005:sink2_channel
	wire          cmd_demux_002_src2_startofpacket;                                            // cmd_demux_002:src2_startofpacket -> cmd_mux_005:sink2_startofpacket
	wire          cmd_demux_002_src2_endofpacket;                                              // cmd_demux_002:src2_endofpacket -> cmd_mux_005:sink2_endofpacket
	wire          cmd_demux_002_src3_valid;                                                    // cmd_demux_002:src3_valid -> cmd_mux_006:sink2_valid
	wire  [128:0] cmd_demux_002_src3_data;                                                     // cmd_demux_002:src3_data -> cmd_mux_006:sink2_data
	wire          cmd_demux_002_src3_ready;                                                    // cmd_mux_006:sink2_ready -> cmd_demux_002:src3_ready
	wire   [11:0] cmd_demux_002_src3_channel;                                                  // cmd_demux_002:src3_channel -> cmd_mux_006:sink2_channel
	wire          cmd_demux_002_src3_startofpacket;                                            // cmd_demux_002:src3_startofpacket -> cmd_mux_006:sink2_startofpacket
	wire          cmd_demux_002_src3_endofpacket;                                              // cmd_demux_002:src3_endofpacket -> cmd_mux_006:sink2_endofpacket
	wire          cmd_demux_002_src4_valid;                                                    // cmd_demux_002:src4_valid -> cmd_mux_007:sink2_valid
	wire  [128:0] cmd_demux_002_src4_data;                                                     // cmd_demux_002:src4_data -> cmd_mux_007:sink2_data
	wire          cmd_demux_002_src4_ready;                                                    // cmd_mux_007:sink2_ready -> cmd_demux_002:src4_ready
	wire   [11:0] cmd_demux_002_src4_channel;                                                  // cmd_demux_002:src4_channel -> cmd_mux_007:sink2_channel
	wire          cmd_demux_002_src4_startofpacket;                                            // cmd_demux_002:src4_startofpacket -> cmd_mux_007:sink2_startofpacket
	wire          cmd_demux_002_src4_endofpacket;                                              // cmd_demux_002:src4_endofpacket -> cmd_mux_007:sink2_endofpacket
	wire          cmd_demux_002_src5_valid;                                                    // cmd_demux_002:src5_valid -> cmd_mux_008:sink2_valid
	wire  [128:0] cmd_demux_002_src5_data;                                                     // cmd_demux_002:src5_data -> cmd_mux_008:sink2_data
	wire          cmd_demux_002_src5_ready;                                                    // cmd_mux_008:sink2_ready -> cmd_demux_002:src5_ready
	wire   [11:0] cmd_demux_002_src5_channel;                                                  // cmd_demux_002:src5_channel -> cmd_mux_008:sink2_channel
	wire          cmd_demux_002_src5_startofpacket;                                            // cmd_demux_002:src5_startofpacket -> cmd_mux_008:sink2_startofpacket
	wire          cmd_demux_002_src5_endofpacket;                                              // cmd_demux_002:src5_endofpacket -> cmd_mux_008:sink2_endofpacket
	wire          cmd_demux_002_src6_valid;                                                    // cmd_demux_002:src6_valid -> cmd_mux_009:sink2_valid
	wire  [128:0] cmd_demux_002_src6_data;                                                     // cmd_demux_002:src6_data -> cmd_mux_009:sink2_data
	wire          cmd_demux_002_src6_ready;                                                    // cmd_mux_009:sink2_ready -> cmd_demux_002:src6_ready
	wire   [11:0] cmd_demux_002_src6_channel;                                                  // cmd_demux_002:src6_channel -> cmd_mux_009:sink2_channel
	wire          cmd_demux_002_src6_startofpacket;                                            // cmd_demux_002:src6_startofpacket -> cmd_mux_009:sink2_startofpacket
	wire          cmd_demux_002_src6_endofpacket;                                              // cmd_demux_002:src6_endofpacket -> cmd_mux_009:sink2_endofpacket
	wire          cmd_demux_002_src7_valid;                                                    // cmd_demux_002:src7_valid -> cmd_mux_010:sink2_valid
	wire  [128:0] cmd_demux_002_src7_data;                                                     // cmd_demux_002:src7_data -> cmd_mux_010:sink2_data
	wire          cmd_demux_002_src7_ready;                                                    // cmd_mux_010:sink2_ready -> cmd_demux_002:src7_ready
	wire   [11:0] cmd_demux_002_src7_channel;                                                  // cmd_demux_002:src7_channel -> cmd_mux_010:sink2_channel
	wire          cmd_demux_002_src7_startofpacket;                                            // cmd_demux_002:src7_startofpacket -> cmd_mux_010:sink2_startofpacket
	wire          cmd_demux_002_src7_endofpacket;                                              // cmd_demux_002:src7_endofpacket -> cmd_mux_010:sink2_endofpacket
	wire          cmd_demux_002_src8_valid;                                                    // cmd_demux_002:src8_valid -> cmd_mux_011:sink2_valid
	wire  [128:0] cmd_demux_002_src8_data;                                                     // cmd_demux_002:src8_data -> cmd_mux_011:sink2_data
	wire          cmd_demux_002_src8_ready;                                                    // cmd_mux_011:sink2_ready -> cmd_demux_002:src8_ready
	wire   [11:0] cmd_demux_002_src8_channel;                                                  // cmd_demux_002:src8_channel -> cmd_mux_011:sink2_channel
	wire          cmd_demux_002_src8_startofpacket;                                            // cmd_demux_002:src8_startofpacket -> cmd_mux_011:sink2_startofpacket
	wire          cmd_demux_002_src8_endofpacket;                                              // cmd_demux_002:src8_endofpacket -> cmd_mux_011:sink2_endofpacket
	wire          rsp_demux_src0_valid;                                                        // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [128:0] rsp_demux_src0_data;                                                         // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                                        // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire   [11:0] rsp_demux_src0_channel;                                                      // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                                // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                  // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                                    // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [128:0] rsp_demux_001_src0_data;                                                     // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire          rsp_demux_001_src0_ready;                                                    // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire   [11:0] rsp_demux_001_src0_channel;                                                  // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire          rsp_demux_001_src0_startofpacket;                                            // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                              // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_003_src0_valid;                                                    // rsp_demux_003:src0_valid -> rsp_mux:sink3_valid
	wire  [128:0] rsp_demux_003_src0_data;                                                     // rsp_demux_003:src0_data -> rsp_mux:sink3_data
	wire          rsp_demux_003_src0_ready;                                                    // rsp_mux:sink3_ready -> rsp_demux_003:src0_ready
	wire   [11:0] rsp_demux_003_src0_channel;                                                  // rsp_demux_003:src0_channel -> rsp_mux:sink3_channel
	wire          rsp_demux_003_src0_startofpacket;                                            // rsp_demux_003:src0_startofpacket -> rsp_mux:sink3_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                              // rsp_demux_003:src0_endofpacket -> rsp_mux:sink3_endofpacket
	wire          rsp_demux_003_src1_valid;                                                    // rsp_demux_003:src1_valid -> rsp_mux_001:sink0_valid
	wire  [128:0] rsp_demux_003_src1_data;                                                     // rsp_demux_003:src1_data -> rsp_mux_001:sink0_data
	wire          rsp_demux_003_src1_ready;                                                    // rsp_mux_001:sink0_ready -> rsp_demux_003:src1_ready
	wire   [11:0] rsp_demux_003_src1_channel;                                                  // rsp_demux_003:src1_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_003_src1_startofpacket;                                            // rsp_demux_003:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          rsp_demux_003_src1_endofpacket;                                              // rsp_demux_003:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_003_src2_valid;                                                    // rsp_demux_003:src2_valid -> rsp_mux_002:sink0_valid
	wire  [128:0] rsp_demux_003_src2_data;                                                     // rsp_demux_003:src2_data -> rsp_mux_002:sink0_data
	wire          rsp_demux_003_src2_ready;                                                    // rsp_mux_002:sink0_ready -> rsp_demux_003:src2_ready
	wire   [11:0] rsp_demux_003_src2_channel;                                                  // rsp_demux_003:src2_channel -> rsp_mux_002:sink0_channel
	wire          rsp_demux_003_src2_startofpacket;                                            // rsp_demux_003:src2_startofpacket -> rsp_mux_002:sink0_startofpacket
	wire          rsp_demux_003_src2_endofpacket;                                              // rsp_demux_003:src2_endofpacket -> rsp_mux_002:sink0_endofpacket
	wire          rsp_demux_004_src0_valid;                                                    // rsp_demux_004:src0_valid -> rsp_mux:sink4_valid
	wire  [128:0] rsp_demux_004_src0_data;                                                     // rsp_demux_004:src0_data -> rsp_mux:sink4_data
	wire          rsp_demux_004_src0_ready;                                                    // rsp_mux:sink4_ready -> rsp_demux_004:src0_ready
	wire   [11:0] rsp_demux_004_src0_channel;                                                  // rsp_demux_004:src0_channel -> rsp_mux:sink4_channel
	wire          rsp_demux_004_src0_startofpacket;                                            // rsp_demux_004:src0_startofpacket -> rsp_mux:sink4_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                              // rsp_demux_004:src0_endofpacket -> rsp_mux:sink4_endofpacket
	wire          rsp_demux_004_src1_valid;                                                    // rsp_demux_004:src1_valid -> rsp_mux_001:sink1_valid
	wire  [128:0] rsp_demux_004_src1_data;                                                     // rsp_demux_004:src1_data -> rsp_mux_001:sink1_data
	wire          rsp_demux_004_src1_ready;                                                    // rsp_mux_001:sink1_ready -> rsp_demux_004:src1_ready
	wire   [11:0] rsp_demux_004_src1_channel;                                                  // rsp_demux_004:src1_channel -> rsp_mux_001:sink1_channel
	wire          rsp_demux_004_src1_startofpacket;                                            // rsp_demux_004:src1_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          rsp_demux_004_src1_endofpacket;                                              // rsp_demux_004:src1_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire          rsp_demux_004_src2_valid;                                                    // rsp_demux_004:src2_valid -> rsp_mux_002:sink1_valid
	wire  [128:0] rsp_demux_004_src2_data;                                                     // rsp_demux_004:src2_data -> rsp_mux_002:sink1_data
	wire          rsp_demux_004_src2_ready;                                                    // rsp_mux_002:sink1_ready -> rsp_demux_004:src2_ready
	wire   [11:0] rsp_demux_004_src2_channel;                                                  // rsp_demux_004:src2_channel -> rsp_mux_002:sink1_channel
	wire          rsp_demux_004_src2_startofpacket;                                            // rsp_demux_004:src2_startofpacket -> rsp_mux_002:sink1_startofpacket
	wire          rsp_demux_004_src2_endofpacket;                                              // rsp_demux_004:src2_endofpacket -> rsp_mux_002:sink1_endofpacket
	wire          rsp_demux_005_src0_valid;                                                    // rsp_demux_005:src0_valid -> rsp_mux:sink5_valid
	wire  [128:0] rsp_demux_005_src0_data;                                                     // rsp_demux_005:src0_data -> rsp_mux:sink5_data
	wire          rsp_demux_005_src0_ready;                                                    // rsp_mux:sink5_ready -> rsp_demux_005:src0_ready
	wire   [11:0] rsp_demux_005_src0_channel;                                                  // rsp_demux_005:src0_channel -> rsp_mux:sink5_channel
	wire          rsp_demux_005_src0_startofpacket;                                            // rsp_demux_005:src0_startofpacket -> rsp_mux:sink5_startofpacket
	wire          rsp_demux_005_src0_endofpacket;                                              // rsp_demux_005:src0_endofpacket -> rsp_mux:sink5_endofpacket
	wire          rsp_demux_005_src1_valid;                                                    // rsp_demux_005:src1_valid -> rsp_mux_001:sink2_valid
	wire  [128:0] rsp_demux_005_src1_data;                                                     // rsp_demux_005:src1_data -> rsp_mux_001:sink2_data
	wire          rsp_demux_005_src1_ready;                                                    // rsp_mux_001:sink2_ready -> rsp_demux_005:src1_ready
	wire   [11:0] rsp_demux_005_src1_channel;                                                  // rsp_demux_005:src1_channel -> rsp_mux_001:sink2_channel
	wire          rsp_demux_005_src1_startofpacket;                                            // rsp_demux_005:src1_startofpacket -> rsp_mux_001:sink2_startofpacket
	wire          rsp_demux_005_src1_endofpacket;                                              // rsp_demux_005:src1_endofpacket -> rsp_mux_001:sink2_endofpacket
	wire          rsp_demux_005_src2_valid;                                                    // rsp_demux_005:src2_valid -> rsp_mux_002:sink2_valid
	wire  [128:0] rsp_demux_005_src2_data;                                                     // rsp_demux_005:src2_data -> rsp_mux_002:sink2_data
	wire          rsp_demux_005_src2_ready;                                                    // rsp_mux_002:sink2_ready -> rsp_demux_005:src2_ready
	wire   [11:0] rsp_demux_005_src2_channel;                                                  // rsp_demux_005:src2_channel -> rsp_mux_002:sink2_channel
	wire          rsp_demux_005_src2_startofpacket;                                            // rsp_demux_005:src2_startofpacket -> rsp_mux_002:sink2_startofpacket
	wire          rsp_demux_005_src2_endofpacket;                                              // rsp_demux_005:src2_endofpacket -> rsp_mux_002:sink2_endofpacket
	wire          rsp_demux_006_src0_valid;                                                    // rsp_demux_006:src0_valid -> rsp_mux:sink6_valid
	wire  [128:0] rsp_demux_006_src0_data;                                                     // rsp_demux_006:src0_data -> rsp_mux:sink6_data
	wire          rsp_demux_006_src0_ready;                                                    // rsp_mux:sink6_ready -> rsp_demux_006:src0_ready
	wire   [11:0] rsp_demux_006_src0_channel;                                                  // rsp_demux_006:src0_channel -> rsp_mux:sink6_channel
	wire          rsp_demux_006_src0_startofpacket;                                            // rsp_demux_006:src0_startofpacket -> rsp_mux:sink6_startofpacket
	wire          rsp_demux_006_src0_endofpacket;                                              // rsp_demux_006:src0_endofpacket -> rsp_mux:sink6_endofpacket
	wire          rsp_demux_006_src1_valid;                                                    // rsp_demux_006:src1_valid -> rsp_mux_001:sink3_valid
	wire  [128:0] rsp_demux_006_src1_data;                                                     // rsp_demux_006:src1_data -> rsp_mux_001:sink3_data
	wire          rsp_demux_006_src1_ready;                                                    // rsp_mux_001:sink3_ready -> rsp_demux_006:src1_ready
	wire   [11:0] rsp_demux_006_src1_channel;                                                  // rsp_demux_006:src1_channel -> rsp_mux_001:sink3_channel
	wire          rsp_demux_006_src1_startofpacket;                                            // rsp_demux_006:src1_startofpacket -> rsp_mux_001:sink3_startofpacket
	wire          rsp_demux_006_src1_endofpacket;                                              // rsp_demux_006:src1_endofpacket -> rsp_mux_001:sink3_endofpacket
	wire          rsp_demux_006_src2_valid;                                                    // rsp_demux_006:src2_valid -> rsp_mux_002:sink3_valid
	wire  [128:0] rsp_demux_006_src2_data;                                                     // rsp_demux_006:src2_data -> rsp_mux_002:sink3_data
	wire          rsp_demux_006_src2_ready;                                                    // rsp_mux_002:sink3_ready -> rsp_demux_006:src2_ready
	wire   [11:0] rsp_demux_006_src2_channel;                                                  // rsp_demux_006:src2_channel -> rsp_mux_002:sink3_channel
	wire          rsp_demux_006_src2_startofpacket;                                            // rsp_demux_006:src2_startofpacket -> rsp_mux_002:sink3_startofpacket
	wire          rsp_demux_006_src2_endofpacket;                                              // rsp_demux_006:src2_endofpacket -> rsp_mux_002:sink3_endofpacket
	wire          rsp_demux_007_src0_valid;                                                    // rsp_demux_007:src0_valid -> rsp_mux:sink7_valid
	wire  [128:0] rsp_demux_007_src0_data;                                                     // rsp_demux_007:src0_data -> rsp_mux:sink7_data
	wire          rsp_demux_007_src0_ready;                                                    // rsp_mux:sink7_ready -> rsp_demux_007:src0_ready
	wire   [11:0] rsp_demux_007_src0_channel;                                                  // rsp_demux_007:src0_channel -> rsp_mux:sink7_channel
	wire          rsp_demux_007_src0_startofpacket;                                            // rsp_demux_007:src0_startofpacket -> rsp_mux:sink7_startofpacket
	wire          rsp_demux_007_src0_endofpacket;                                              // rsp_demux_007:src0_endofpacket -> rsp_mux:sink7_endofpacket
	wire          rsp_demux_007_src1_valid;                                                    // rsp_demux_007:src1_valid -> rsp_mux_001:sink4_valid
	wire  [128:0] rsp_demux_007_src1_data;                                                     // rsp_demux_007:src1_data -> rsp_mux_001:sink4_data
	wire          rsp_demux_007_src1_ready;                                                    // rsp_mux_001:sink4_ready -> rsp_demux_007:src1_ready
	wire   [11:0] rsp_demux_007_src1_channel;                                                  // rsp_demux_007:src1_channel -> rsp_mux_001:sink4_channel
	wire          rsp_demux_007_src1_startofpacket;                                            // rsp_demux_007:src1_startofpacket -> rsp_mux_001:sink4_startofpacket
	wire          rsp_demux_007_src1_endofpacket;                                              // rsp_demux_007:src1_endofpacket -> rsp_mux_001:sink4_endofpacket
	wire          rsp_demux_007_src2_valid;                                                    // rsp_demux_007:src2_valid -> rsp_mux_002:sink4_valid
	wire  [128:0] rsp_demux_007_src2_data;                                                     // rsp_demux_007:src2_data -> rsp_mux_002:sink4_data
	wire          rsp_demux_007_src2_ready;                                                    // rsp_mux_002:sink4_ready -> rsp_demux_007:src2_ready
	wire   [11:0] rsp_demux_007_src2_channel;                                                  // rsp_demux_007:src2_channel -> rsp_mux_002:sink4_channel
	wire          rsp_demux_007_src2_startofpacket;                                            // rsp_demux_007:src2_startofpacket -> rsp_mux_002:sink4_startofpacket
	wire          rsp_demux_007_src2_endofpacket;                                              // rsp_demux_007:src2_endofpacket -> rsp_mux_002:sink4_endofpacket
	wire          rsp_demux_008_src0_valid;                                                    // rsp_demux_008:src0_valid -> rsp_mux:sink8_valid
	wire  [128:0] rsp_demux_008_src0_data;                                                     // rsp_demux_008:src0_data -> rsp_mux:sink8_data
	wire          rsp_demux_008_src0_ready;                                                    // rsp_mux:sink8_ready -> rsp_demux_008:src0_ready
	wire   [11:0] rsp_demux_008_src0_channel;                                                  // rsp_demux_008:src0_channel -> rsp_mux:sink8_channel
	wire          rsp_demux_008_src0_startofpacket;                                            // rsp_demux_008:src0_startofpacket -> rsp_mux:sink8_startofpacket
	wire          rsp_demux_008_src0_endofpacket;                                              // rsp_demux_008:src0_endofpacket -> rsp_mux:sink8_endofpacket
	wire          rsp_demux_008_src1_valid;                                                    // rsp_demux_008:src1_valid -> rsp_mux_001:sink5_valid
	wire  [128:0] rsp_demux_008_src1_data;                                                     // rsp_demux_008:src1_data -> rsp_mux_001:sink5_data
	wire          rsp_demux_008_src1_ready;                                                    // rsp_mux_001:sink5_ready -> rsp_demux_008:src1_ready
	wire   [11:0] rsp_demux_008_src1_channel;                                                  // rsp_demux_008:src1_channel -> rsp_mux_001:sink5_channel
	wire          rsp_demux_008_src1_startofpacket;                                            // rsp_demux_008:src1_startofpacket -> rsp_mux_001:sink5_startofpacket
	wire          rsp_demux_008_src1_endofpacket;                                              // rsp_demux_008:src1_endofpacket -> rsp_mux_001:sink5_endofpacket
	wire          rsp_demux_008_src2_valid;                                                    // rsp_demux_008:src2_valid -> rsp_mux_002:sink5_valid
	wire  [128:0] rsp_demux_008_src2_data;                                                     // rsp_demux_008:src2_data -> rsp_mux_002:sink5_data
	wire          rsp_demux_008_src2_ready;                                                    // rsp_mux_002:sink5_ready -> rsp_demux_008:src2_ready
	wire   [11:0] rsp_demux_008_src2_channel;                                                  // rsp_demux_008:src2_channel -> rsp_mux_002:sink5_channel
	wire          rsp_demux_008_src2_startofpacket;                                            // rsp_demux_008:src2_startofpacket -> rsp_mux_002:sink5_startofpacket
	wire          rsp_demux_008_src2_endofpacket;                                              // rsp_demux_008:src2_endofpacket -> rsp_mux_002:sink5_endofpacket
	wire          rsp_demux_009_src0_valid;                                                    // rsp_demux_009:src0_valid -> rsp_mux:sink9_valid
	wire  [128:0] rsp_demux_009_src0_data;                                                     // rsp_demux_009:src0_data -> rsp_mux:sink9_data
	wire          rsp_demux_009_src0_ready;                                                    // rsp_mux:sink9_ready -> rsp_demux_009:src0_ready
	wire   [11:0] rsp_demux_009_src0_channel;                                                  // rsp_demux_009:src0_channel -> rsp_mux:sink9_channel
	wire          rsp_demux_009_src0_startofpacket;                                            // rsp_demux_009:src0_startofpacket -> rsp_mux:sink9_startofpacket
	wire          rsp_demux_009_src0_endofpacket;                                              // rsp_demux_009:src0_endofpacket -> rsp_mux:sink9_endofpacket
	wire          rsp_demux_009_src1_valid;                                                    // rsp_demux_009:src1_valid -> rsp_mux_001:sink6_valid
	wire  [128:0] rsp_demux_009_src1_data;                                                     // rsp_demux_009:src1_data -> rsp_mux_001:sink6_data
	wire          rsp_demux_009_src1_ready;                                                    // rsp_mux_001:sink6_ready -> rsp_demux_009:src1_ready
	wire   [11:0] rsp_demux_009_src1_channel;                                                  // rsp_demux_009:src1_channel -> rsp_mux_001:sink6_channel
	wire          rsp_demux_009_src1_startofpacket;                                            // rsp_demux_009:src1_startofpacket -> rsp_mux_001:sink6_startofpacket
	wire          rsp_demux_009_src1_endofpacket;                                              // rsp_demux_009:src1_endofpacket -> rsp_mux_001:sink6_endofpacket
	wire          rsp_demux_009_src2_valid;                                                    // rsp_demux_009:src2_valid -> rsp_mux_002:sink6_valid
	wire  [128:0] rsp_demux_009_src2_data;                                                     // rsp_demux_009:src2_data -> rsp_mux_002:sink6_data
	wire          rsp_demux_009_src2_ready;                                                    // rsp_mux_002:sink6_ready -> rsp_demux_009:src2_ready
	wire   [11:0] rsp_demux_009_src2_channel;                                                  // rsp_demux_009:src2_channel -> rsp_mux_002:sink6_channel
	wire          rsp_demux_009_src2_startofpacket;                                            // rsp_demux_009:src2_startofpacket -> rsp_mux_002:sink6_startofpacket
	wire          rsp_demux_009_src2_endofpacket;                                              // rsp_demux_009:src2_endofpacket -> rsp_mux_002:sink6_endofpacket
	wire          rsp_demux_010_src0_valid;                                                    // rsp_demux_010:src0_valid -> rsp_mux:sink10_valid
	wire  [128:0] rsp_demux_010_src0_data;                                                     // rsp_demux_010:src0_data -> rsp_mux:sink10_data
	wire          rsp_demux_010_src0_ready;                                                    // rsp_mux:sink10_ready -> rsp_demux_010:src0_ready
	wire   [11:0] rsp_demux_010_src0_channel;                                                  // rsp_demux_010:src0_channel -> rsp_mux:sink10_channel
	wire          rsp_demux_010_src0_startofpacket;                                            // rsp_demux_010:src0_startofpacket -> rsp_mux:sink10_startofpacket
	wire          rsp_demux_010_src0_endofpacket;                                              // rsp_demux_010:src0_endofpacket -> rsp_mux:sink10_endofpacket
	wire          rsp_demux_010_src1_valid;                                                    // rsp_demux_010:src1_valid -> rsp_mux_001:sink7_valid
	wire  [128:0] rsp_demux_010_src1_data;                                                     // rsp_demux_010:src1_data -> rsp_mux_001:sink7_data
	wire          rsp_demux_010_src1_ready;                                                    // rsp_mux_001:sink7_ready -> rsp_demux_010:src1_ready
	wire   [11:0] rsp_demux_010_src1_channel;                                                  // rsp_demux_010:src1_channel -> rsp_mux_001:sink7_channel
	wire          rsp_demux_010_src1_startofpacket;                                            // rsp_demux_010:src1_startofpacket -> rsp_mux_001:sink7_startofpacket
	wire          rsp_demux_010_src1_endofpacket;                                              // rsp_demux_010:src1_endofpacket -> rsp_mux_001:sink7_endofpacket
	wire          rsp_demux_010_src2_valid;                                                    // rsp_demux_010:src2_valid -> rsp_mux_002:sink7_valid
	wire  [128:0] rsp_demux_010_src2_data;                                                     // rsp_demux_010:src2_data -> rsp_mux_002:sink7_data
	wire          rsp_demux_010_src2_ready;                                                    // rsp_mux_002:sink7_ready -> rsp_demux_010:src2_ready
	wire   [11:0] rsp_demux_010_src2_channel;                                                  // rsp_demux_010:src2_channel -> rsp_mux_002:sink7_channel
	wire          rsp_demux_010_src2_startofpacket;                                            // rsp_demux_010:src2_startofpacket -> rsp_mux_002:sink7_startofpacket
	wire          rsp_demux_010_src2_endofpacket;                                              // rsp_demux_010:src2_endofpacket -> rsp_mux_002:sink7_endofpacket
	wire          rsp_demux_011_src0_valid;                                                    // rsp_demux_011:src0_valid -> rsp_mux:sink11_valid
	wire  [128:0] rsp_demux_011_src0_data;                                                     // rsp_demux_011:src0_data -> rsp_mux:sink11_data
	wire          rsp_demux_011_src0_ready;                                                    // rsp_mux:sink11_ready -> rsp_demux_011:src0_ready
	wire   [11:0] rsp_demux_011_src0_channel;                                                  // rsp_demux_011:src0_channel -> rsp_mux:sink11_channel
	wire          rsp_demux_011_src0_startofpacket;                                            // rsp_demux_011:src0_startofpacket -> rsp_mux:sink11_startofpacket
	wire          rsp_demux_011_src0_endofpacket;                                              // rsp_demux_011:src0_endofpacket -> rsp_mux:sink11_endofpacket
	wire          rsp_demux_011_src1_valid;                                                    // rsp_demux_011:src1_valid -> rsp_mux_001:sink8_valid
	wire  [128:0] rsp_demux_011_src1_data;                                                     // rsp_demux_011:src1_data -> rsp_mux_001:sink8_data
	wire          rsp_demux_011_src1_ready;                                                    // rsp_mux_001:sink8_ready -> rsp_demux_011:src1_ready
	wire   [11:0] rsp_demux_011_src1_channel;                                                  // rsp_demux_011:src1_channel -> rsp_mux_001:sink8_channel
	wire          rsp_demux_011_src1_startofpacket;                                            // rsp_demux_011:src1_startofpacket -> rsp_mux_001:sink8_startofpacket
	wire          rsp_demux_011_src1_endofpacket;                                              // rsp_demux_011:src1_endofpacket -> rsp_mux_001:sink8_endofpacket
	wire          rsp_demux_011_src2_valid;                                                    // rsp_demux_011:src2_valid -> rsp_mux_002:sink8_valid
	wire  [128:0] rsp_demux_011_src2_data;                                                     // rsp_demux_011:src2_data -> rsp_mux_002:sink8_data
	wire          rsp_demux_011_src2_ready;                                                    // rsp_mux_002:sink8_ready -> rsp_demux_011:src2_ready
	wire   [11:0] rsp_demux_011_src2_channel;                                                  // rsp_demux_011:src2_channel -> rsp_mux_002:sink8_channel
	wire          rsp_demux_011_src2_startofpacket;                                            // rsp_demux_011:src2_startofpacket -> rsp_mux_002:sink8_startofpacket
	wire          rsp_demux_011_src2_endofpacket;                                              // rsp_demux_011:src2_endofpacket -> rsp_mux_002:sink8_endofpacket
	wire          cmd_demux_src2_valid;                                                        // cmd_demux:src2_valid -> nios2_qsys_0_data_master_to_SDRAM_s1_cmd_width_adapter:in_valid
	wire  [128:0] cmd_demux_src2_data;                                                         // cmd_demux:src2_data -> nios2_qsys_0_data_master_to_SDRAM_s1_cmd_width_adapter:in_data
	wire          cmd_demux_src2_ready;                                                        // nios2_qsys_0_data_master_to_SDRAM_s1_cmd_width_adapter:in_ready -> cmd_demux:src2_ready
	wire   [11:0] cmd_demux_src2_channel;                                                      // cmd_demux:src2_channel -> nios2_qsys_0_data_master_to_SDRAM_s1_cmd_width_adapter:in_channel
	wire          cmd_demux_src2_startofpacket;                                                // cmd_demux:src2_startofpacket -> nios2_qsys_0_data_master_to_SDRAM_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_src2_endofpacket;                                                  // cmd_demux:src2_endofpacket -> nios2_qsys_0_data_master_to_SDRAM_s1_cmd_width_adapter:in_endofpacket
	wire          nios2_qsys_0_data_master_to_sdram_s1_cmd_width_adapter_src_valid;            // nios2_qsys_0_data_master_to_SDRAM_s1_cmd_width_adapter:out_valid -> cmd_mux_002:sink0_valid
	wire  [110:0] nios2_qsys_0_data_master_to_sdram_s1_cmd_width_adapter_src_data;             // nios2_qsys_0_data_master_to_SDRAM_s1_cmd_width_adapter:out_data -> cmd_mux_002:sink0_data
	wire          nios2_qsys_0_data_master_to_sdram_s1_cmd_width_adapter_src_ready;            // cmd_mux_002:sink0_ready -> nios2_qsys_0_data_master_to_SDRAM_s1_cmd_width_adapter:out_ready
	wire   [11:0] nios2_qsys_0_data_master_to_sdram_s1_cmd_width_adapter_src_channel;          // nios2_qsys_0_data_master_to_SDRAM_s1_cmd_width_adapter:out_channel -> cmd_mux_002:sink0_channel
	wire          nios2_qsys_0_data_master_to_sdram_s1_cmd_width_adapter_src_startofpacket;    // nios2_qsys_0_data_master_to_SDRAM_s1_cmd_width_adapter:out_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          nios2_qsys_0_data_master_to_sdram_s1_cmd_width_adapter_src_endofpacket;      // nios2_qsys_0_data_master_to_SDRAM_s1_cmd_width_adapter:out_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_003_src0_valid;                                                    // cmd_demux_003:src0_valid -> hps_0_h2f_axi_master_wr_to_SDRAM_s1_cmd_width_adapter:in_valid
	wire  [164:0] cmd_demux_003_src0_data;                                                     // cmd_demux_003:src0_data -> hps_0_h2f_axi_master_wr_to_SDRAM_s1_cmd_width_adapter:in_data
	wire          cmd_demux_003_src0_ready;                                                    // hps_0_h2f_axi_master_wr_to_SDRAM_s1_cmd_width_adapter:in_ready -> cmd_demux_003:src0_ready
	wire   [11:0] cmd_demux_003_src0_channel;                                                  // cmd_demux_003:src0_channel -> hps_0_h2f_axi_master_wr_to_SDRAM_s1_cmd_width_adapter:in_channel
	wire          cmd_demux_003_src0_startofpacket;                                            // cmd_demux_003:src0_startofpacket -> hps_0_h2f_axi_master_wr_to_SDRAM_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_003_src0_endofpacket;                                              // cmd_demux_003:src0_endofpacket -> hps_0_h2f_axi_master_wr_to_SDRAM_s1_cmd_width_adapter:in_endofpacket
	wire          hps_0_h2f_axi_master_wr_to_sdram_s1_cmd_width_adapter_src_valid;             // hps_0_h2f_axi_master_wr_to_SDRAM_s1_cmd_width_adapter:out_valid -> cmd_mux_002:sink1_valid
	wire  [110:0] hps_0_h2f_axi_master_wr_to_sdram_s1_cmd_width_adapter_src_data;              // hps_0_h2f_axi_master_wr_to_SDRAM_s1_cmd_width_adapter:out_data -> cmd_mux_002:sink1_data
	wire          hps_0_h2f_axi_master_wr_to_sdram_s1_cmd_width_adapter_src_ready;             // cmd_mux_002:sink1_ready -> hps_0_h2f_axi_master_wr_to_SDRAM_s1_cmd_width_adapter:out_ready
	wire   [11:0] hps_0_h2f_axi_master_wr_to_sdram_s1_cmd_width_adapter_src_channel;           // hps_0_h2f_axi_master_wr_to_SDRAM_s1_cmd_width_adapter:out_channel -> cmd_mux_002:sink1_channel
	wire          hps_0_h2f_axi_master_wr_to_sdram_s1_cmd_width_adapter_src_startofpacket;     // hps_0_h2f_axi_master_wr_to_SDRAM_s1_cmd_width_adapter:out_startofpacket -> cmd_mux_002:sink1_startofpacket
	wire          hps_0_h2f_axi_master_wr_to_sdram_s1_cmd_width_adapter_src_endofpacket;       // hps_0_h2f_axi_master_wr_to_SDRAM_s1_cmd_width_adapter:out_endofpacket -> cmd_mux_002:sink1_endofpacket
	wire          cmd_demux_004_src0_valid;                                                    // cmd_demux_004:src0_valid -> hps_0_h2f_axi_master_rd_to_SDRAM_s1_cmd_width_adapter:in_valid
	wire  [164:0] cmd_demux_004_src0_data;                                                     // cmd_demux_004:src0_data -> hps_0_h2f_axi_master_rd_to_SDRAM_s1_cmd_width_adapter:in_data
	wire          cmd_demux_004_src0_ready;                                                    // hps_0_h2f_axi_master_rd_to_SDRAM_s1_cmd_width_adapter:in_ready -> cmd_demux_004:src0_ready
	wire   [11:0] cmd_demux_004_src0_channel;                                                  // cmd_demux_004:src0_channel -> hps_0_h2f_axi_master_rd_to_SDRAM_s1_cmd_width_adapter:in_channel
	wire          cmd_demux_004_src0_startofpacket;                                            // cmd_demux_004:src0_startofpacket -> hps_0_h2f_axi_master_rd_to_SDRAM_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_004_src0_endofpacket;                                              // cmd_demux_004:src0_endofpacket -> hps_0_h2f_axi_master_rd_to_SDRAM_s1_cmd_width_adapter:in_endofpacket
	wire          hps_0_h2f_axi_master_rd_to_sdram_s1_cmd_width_adapter_src_valid;             // hps_0_h2f_axi_master_rd_to_SDRAM_s1_cmd_width_adapter:out_valid -> cmd_mux_002:sink2_valid
	wire  [110:0] hps_0_h2f_axi_master_rd_to_sdram_s1_cmd_width_adapter_src_data;              // hps_0_h2f_axi_master_rd_to_SDRAM_s1_cmd_width_adapter:out_data -> cmd_mux_002:sink2_data
	wire          hps_0_h2f_axi_master_rd_to_sdram_s1_cmd_width_adapter_src_ready;             // cmd_mux_002:sink2_ready -> hps_0_h2f_axi_master_rd_to_SDRAM_s1_cmd_width_adapter:out_ready
	wire   [11:0] hps_0_h2f_axi_master_rd_to_sdram_s1_cmd_width_adapter_src_channel;           // hps_0_h2f_axi_master_rd_to_SDRAM_s1_cmd_width_adapter:out_channel -> cmd_mux_002:sink2_channel
	wire          hps_0_h2f_axi_master_rd_to_sdram_s1_cmd_width_adapter_src_startofpacket;     // hps_0_h2f_axi_master_rd_to_SDRAM_s1_cmd_width_adapter:out_startofpacket -> cmd_mux_002:sink2_startofpacket
	wire          hps_0_h2f_axi_master_rd_to_sdram_s1_cmd_width_adapter_src_endofpacket;       // hps_0_h2f_axi_master_rd_to_SDRAM_s1_cmd_width_adapter:out_endofpacket -> cmd_mux_002:sink2_endofpacket
	wire          rsp_demux_002_src0_valid;                                                    // rsp_demux_002:src0_valid -> SDRAM_s1_to_nios2_qsys_0_data_master_rsp_width_adapter:in_valid
	wire  [110:0] rsp_demux_002_src0_data;                                                     // rsp_demux_002:src0_data -> SDRAM_s1_to_nios2_qsys_0_data_master_rsp_width_adapter:in_data
	wire          rsp_demux_002_src0_ready;                                                    // SDRAM_s1_to_nios2_qsys_0_data_master_rsp_width_adapter:in_ready -> rsp_demux_002:src0_ready
	wire   [11:0] rsp_demux_002_src0_channel;                                                  // rsp_demux_002:src0_channel -> SDRAM_s1_to_nios2_qsys_0_data_master_rsp_width_adapter:in_channel
	wire          rsp_demux_002_src0_startofpacket;                                            // rsp_demux_002:src0_startofpacket -> SDRAM_s1_to_nios2_qsys_0_data_master_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                              // rsp_demux_002:src0_endofpacket -> SDRAM_s1_to_nios2_qsys_0_data_master_rsp_width_adapter:in_endofpacket
	wire          sdram_s1_to_nios2_qsys_0_data_master_rsp_width_adapter_src_valid;            // SDRAM_s1_to_nios2_qsys_0_data_master_rsp_width_adapter:out_valid -> rsp_mux:sink2_valid
	wire  [128:0] sdram_s1_to_nios2_qsys_0_data_master_rsp_width_adapter_src_data;             // SDRAM_s1_to_nios2_qsys_0_data_master_rsp_width_adapter:out_data -> rsp_mux:sink2_data
	wire          sdram_s1_to_nios2_qsys_0_data_master_rsp_width_adapter_src_ready;            // rsp_mux:sink2_ready -> SDRAM_s1_to_nios2_qsys_0_data_master_rsp_width_adapter:out_ready
	wire   [11:0] sdram_s1_to_nios2_qsys_0_data_master_rsp_width_adapter_src_channel;          // SDRAM_s1_to_nios2_qsys_0_data_master_rsp_width_adapter:out_channel -> rsp_mux:sink2_channel
	wire          sdram_s1_to_nios2_qsys_0_data_master_rsp_width_adapter_src_startofpacket;    // SDRAM_s1_to_nios2_qsys_0_data_master_rsp_width_adapter:out_startofpacket -> rsp_mux:sink2_startofpacket
	wire          sdram_s1_to_nios2_qsys_0_data_master_rsp_width_adapter_src_endofpacket;      // SDRAM_s1_to_nios2_qsys_0_data_master_rsp_width_adapter:out_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_002_src1_valid;                                                    // rsp_demux_002:src1_valid -> SDRAM_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:in_valid
	wire  [110:0] rsp_demux_002_src1_data;                                                     // rsp_demux_002:src1_data -> SDRAM_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:in_data
	wire          rsp_demux_002_src1_ready;                                                    // SDRAM_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:in_ready -> rsp_demux_002:src1_ready
	wire   [11:0] rsp_demux_002_src1_channel;                                                  // rsp_demux_002:src1_channel -> SDRAM_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:in_channel
	wire          rsp_demux_002_src1_startofpacket;                                            // rsp_demux_002:src1_startofpacket -> SDRAM_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_002_src1_endofpacket;                                              // rsp_demux_002:src1_endofpacket -> SDRAM_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:in_endofpacket
	wire          sdram_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_valid;             // SDRAM_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:out_valid -> rsp_mux_003:sink0_valid
	wire  [164:0] sdram_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_data;              // SDRAM_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:out_data -> rsp_mux_003:sink0_data
	wire          sdram_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_ready;             // rsp_mux_003:sink0_ready -> SDRAM_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:out_ready
	wire   [11:0] sdram_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_channel;           // SDRAM_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:out_channel -> rsp_mux_003:sink0_channel
	wire          sdram_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_startofpacket;     // SDRAM_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:out_startofpacket -> rsp_mux_003:sink0_startofpacket
	wire          sdram_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_endofpacket;       // SDRAM_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:out_endofpacket -> rsp_mux_003:sink0_endofpacket
	wire          rsp_demux_002_src2_valid;                                                    // rsp_demux_002:src2_valid -> SDRAM_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:in_valid
	wire  [110:0] rsp_demux_002_src2_data;                                                     // rsp_demux_002:src2_data -> SDRAM_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:in_data
	wire          rsp_demux_002_src2_ready;                                                    // SDRAM_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:in_ready -> rsp_demux_002:src2_ready
	wire   [11:0] rsp_demux_002_src2_channel;                                                  // rsp_demux_002:src2_channel -> SDRAM_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:in_channel
	wire          rsp_demux_002_src2_startofpacket;                                            // rsp_demux_002:src2_startofpacket -> SDRAM_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_002_src2_endofpacket;                                              // rsp_demux_002:src2_endofpacket -> SDRAM_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:in_endofpacket
	wire          sdram_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_valid;             // SDRAM_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:out_valid -> rsp_mux_004:sink0_valid
	wire  [164:0] sdram_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_data;              // SDRAM_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:out_data -> rsp_mux_004:sink0_data
	wire          sdram_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_ready;             // rsp_mux_004:sink0_ready -> SDRAM_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:out_ready
	wire   [11:0] sdram_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_channel;           // SDRAM_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:out_channel -> rsp_mux_004:sink0_channel
	wire          sdram_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_startofpacket;     // SDRAM_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:out_startofpacket -> rsp_mux_004:sink0_startofpacket
	wire          sdram_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_endofpacket;       // SDRAM_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:out_endofpacket -> rsp_mux_004:sink0_endofpacket
	wire   [11:0] hps_0_h2f_lw_axi_master_wr_limiter_cmd_valid_data;                           // hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_valid -> cmd_demux_001:sink_valid
	wire   [11:0] hps_0_h2f_lw_axi_master_rd_limiter_cmd_valid_data;                           // hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_valid -> cmd_demux_002:sink_valid
	wire          ram_s1_agent_rdata_fifo_out_valid;                                           // RAM_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter:in_0_valid
	wire   [33:0] ram_s1_agent_rdata_fifo_out_data;                                            // RAM_s1_agent_rdata_fifo:out_data -> avalon_st_adapter:in_0_data
	wire          ram_s1_agent_rdata_fifo_out_ready;                                           // avalon_st_adapter:in_0_ready -> RAM_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_out_0_valid;                                               // avalon_st_adapter:out_0_valid -> RAM_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_out_0_data;                                                // avalon_st_adapter:out_0_data -> RAM_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                               // RAM_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                               // avalon_st_adapter:out_0_error -> RAM_s1_agent:rdata_fifo_sink_error
	wire          timer_s1_agent_rdata_fifo_out_valid;                                         // TIMER_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_001:in_0_valid
	wire   [33:0] timer_s1_agent_rdata_fifo_out_data;                                          // TIMER_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_001:in_0_data
	wire          timer_s1_agent_rdata_fifo_out_ready;                                         // avalon_st_adapter_001:in_0_ready -> TIMER_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_001_out_0_valid;                                           // avalon_st_adapter_001:out_0_valid -> TIMER_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_001_out_0_data;                                            // avalon_st_adapter_001:out_0_data -> TIMER_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                                           // TIMER_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                                           // avalon_st_adapter_001:out_0_error -> TIMER_s1_agent:rdata_fifo_sink_error
	wire          sdram_s1_agent_rdata_fifo_out_valid;                                         // SDRAM_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_002:in_0_valid
	wire   [17:0] sdram_s1_agent_rdata_fifo_out_data;                                          // SDRAM_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_002:in_0_data
	wire          sdram_s1_agent_rdata_fifo_out_ready;                                         // avalon_st_adapter_002:in_0_ready -> SDRAM_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_002_out_0_valid;                                           // avalon_st_adapter_002:out_0_valid -> SDRAM_s1_agent:rdata_fifo_sink_valid
	wire   [17:0] avalon_st_adapter_002_out_0_data;                                            // avalon_st_adapter_002:out_0_data -> SDRAM_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_002_out_0_ready;                                           // SDRAM_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire    [0:0] avalon_st_adapter_002_out_0_error;                                           // avalon_st_adapter_002:out_0_error -> SDRAM_s1_agent:rdata_fifo_sink_error
	wire          sw_s1_agent_rdata_fifo_out_valid;                                            // SW_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_003:in_0_valid
	wire   [33:0] sw_s1_agent_rdata_fifo_out_data;                                             // SW_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_003:in_0_data
	wire          sw_s1_agent_rdata_fifo_out_ready;                                            // avalon_st_adapter_003:in_0_ready -> SW_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_003_out_0_valid;                                           // avalon_st_adapter_003:out_0_valid -> SW_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_003_out_0_data;                                            // avalon_st_adapter_003:out_0_data -> SW_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_003_out_0_ready;                                           // SW_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire    [0:0] avalon_st_adapter_003_out_0_error;                                           // avalon_st_adapter_003:out_0_error -> SW_s1_agent:rdata_fifo_sink_error
	wire          seg6_s1_agent_rdata_fifo_out_valid;                                          // SEG6_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_004:in_0_valid
	wire   [33:0] seg6_s1_agent_rdata_fifo_out_data;                                           // SEG6_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_004:in_0_data
	wire          seg6_s1_agent_rdata_fifo_out_ready;                                          // avalon_st_adapter_004:in_0_ready -> SEG6_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_004_out_0_valid;                                           // avalon_st_adapter_004:out_0_valid -> SEG6_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_004_out_0_data;                                            // avalon_st_adapter_004:out_0_data -> SEG6_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_004_out_0_ready;                                           // SEG6_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire    [0:0] avalon_st_adapter_004_out_0_error;                                           // avalon_st_adapter_004:out_0_error -> SEG6_s1_agent:rdata_fifo_sink_error
	wire          seg5_s1_agent_rdata_fifo_out_valid;                                          // SEG5_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_005:in_0_valid
	wire   [33:0] seg5_s1_agent_rdata_fifo_out_data;                                           // SEG5_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_005:in_0_data
	wire          seg5_s1_agent_rdata_fifo_out_ready;                                          // avalon_st_adapter_005:in_0_ready -> SEG5_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_005_out_0_valid;                                           // avalon_st_adapter_005:out_0_valid -> SEG5_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_005_out_0_data;                                            // avalon_st_adapter_005:out_0_data -> SEG5_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_005_out_0_ready;                                           // SEG5_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_005:out_0_ready
	wire    [0:0] avalon_st_adapter_005_out_0_error;                                           // avalon_st_adapter_005:out_0_error -> SEG5_s1_agent:rdata_fifo_sink_error
	wire          seg4_s1_agent_rdata_fifo_out_valid;                                          // SEG4_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_006:in_0_valid
	wire   [33:0] seg4_s1_agent_rdata_fifo_out_data;                                           // SEG4_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_006:in_0_data
	wire          seg4_s1_agent_rdata_fifo_out_ready;                                          // avalon_st_adapter_006:in_0_ready -> SEG4_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_006_out_0_valid;                                           // avalon_st_adapter_006:out_0_valid -> SEG4_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_006_out_0_data;                                            // avalon_st_adapter_006:out_0_data -> SEG4_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_006_out_0_ready;                                           // SEG4_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_006:out_0_ready
	wire    [0:0] avalon_st_adapter_006_out_0_error;                                           // avalon_st_adapter_006:out_0_error -> SEG4_s1_agent:rdata_fifo_sink_error
	wire          seg3_s1_agent_rdata_fifo_out_valid;                                          // SEG3_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_007:in_0_valid
	wire   [33:0] seg3_s1_agent_rdata_fifo_out_data;                                           // SEG3_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_007:in_0_data
	wire          seg3_s1_agent_rdata_fifo_out_ready;                                          // avalon_st_adapter_007:in_0_ready -> SEG3_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_007_out_0_valid;                                           // avalon_st_adapter_007:out_0_valid -> SEG3_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_007_out_0_data;                                            // avalon_st_adapter_007:out_0_data -> SEG3_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_007_out_0_ready;                                           // SEG3_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_007:out_0_ready
	wire    [0:0] avalon_st_adapter_007_out_0_error;                                           // avalon_st_adapter_007:out_0_error -> SEG3_s1_agent:rdata_fifo_sink_error
	wire          seg2_s1_agent_rdata_fifo_out_valid;                                          // SEG2_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_008:in_0_valid
	wire   [33:0] seg2_s1_agent_rdata_fifo_out_data;                                           // SEG2_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_008:in_0_data
	wire          seg2_s1_agent_rdata_fifo_out_ready;                                          // avalon_st_adapter_008:in_0_ready -> SEG2_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_008_out_0_valid;                                           // avalon_st_adapter_008:out_0_valid -> SEG2_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_008_out_0_data;                                            // avalon_st_adapter_008:out_0_data -> SEG2_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_008_out_0_ready;                                           // SEG2_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_008:out_0_ready
	wire    [0:0] avalon_st_adapter_008_out_0_error;                                           // avalon_st_adapter_008:out_0_error -> SEG2_s1_agent:rdata_fifo_sink_error
	wire          seg1_s1_agent_rdata_fifo_out_valid;                                          // SEG1_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_009:in_0_valid
	wire   [33:0] seg1_s1_agent_rdata_fifo_out_data;                                           // SEG1_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_009:in_0_data
	wire          seg1_s1_agent_rdata_fifo_out_ready;                                          // avalon_st_adapter_009:in_0_ready -> SEG1_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_009_out_0_valid;                                           // avalon_st_adapter_009:out_0_valid -> SEG1_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_009_out_0_data;                                            // avalon_st_adapter_009:out_0_data -> SEG1_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_009_out_0_ready;                                           // SEG1_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_009:out_0_ready
	wire    [0:0] avalon_st_adapter_009_out_0_error;                                           // avalon_st_adapter_009:out_0_error -> SEG1_s1_agent:rdata_fifo_sink_error
	wire          keys_s1_agent_rdata_fifo_out_valid;                                          // KEYS_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_010:in_0_valid
	wire   [33:0] keys_s1_agent_rdata_fifo_out_data;                                           // KEYS_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_010:in_0_data
	wire          keys_s1_agent_rdata_fifo_out_ready;                                          // avalon_st_adapter_010:in_0_ready -> KEYS_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_010_out_0_valid;                                           // avalon_st_adapter_010:out_0_valid -> KEYS_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_010_out_0_data;                                            // avalon_st_adapter_010:out_0_data -> KEYS_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_010_out_0_ready;                                           // KEYS_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_010:out_0_ready
	wire    [0:0] avalon_st_adapter_010_out_0_error;                                           // avalon_st_adapter_010:out_0_error -> KEYS_s1_agent:rdata_fifo_sink_error
	wire          leds_s1_agent_rdata_fifo_out_valid;                                          // LEDS_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_011:in_0_valid
	wire   [33:0] leds_s1_agent_rdata_fifo_out_data;                                           // LEDS_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_011:in_0_data
	wire          leds_s1_agent_rdata_fifo_out_ready;                                          // avalon_st_adapter_011:in_0_ready -> LEDS_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_011_out_0_valid;                                           // avalon_st_adapter_011:out_0_valid -> LEDS_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_011_out_0_data;                                            // avalon_st_adapter_011:out_0_data -> LEDS_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_011_out_0_ready;                                           // LEDS_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_011:out_0_ready
	wire    [0:0] avalon_st_adapter_011_out_0_error;                                           // avalon_st_adapter_011:out_0_error -> LEDS_s1_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (27),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (30),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) nios2_qsys_0_data_master_translator (
		.clk                    (clk_0_clk_clk),                                                               //                       clk.clk
		.reset                  (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),                            //                     reset.reset
		.uav_address            (nios2_qsys_0_data_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (nios2_qsys_0_data_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (nios2_qsys_0_data_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (nios2_qsys_0_data_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (nios2_qsys_0_data_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (nios2_qsys_0_data_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (nios2_qsys_0_data_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (nios2_qsys_0_data_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (nios2_qsys_0_data_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (nios2_qsys_0_data_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (nios2_qsys_0_data_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (nios2_qsys_0_data_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (nios2_qsys_0_data_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (nios2_qsys_0_data_master_byteenable),                                         //                          .byteenable
		.av_read                (nios2_qsys_0_data_master_read),                                               //                          .read
		.av_readdata            (nios2_qsys_0_data_master_readdata),                                           //                          .readdata
		.av_write               (nios2_qsys_0_data_master_write),                                              //                          .write
		.av_writedata           (nios2_qsys_0_data_master_writedata),                                          //                          .writedata
		.av_burstcount          (1'b1),                                                                        //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                        //               (terminated)
		.av_begintransfer       (1'b0),                                                                        //               (terminated)
		.av_chipselect          (1'b0),                                                                        //               (terminated)
		.av_readdatavalid       (),                                                                            //               (terminated)
		.av_lock                (1'b0),                                                                        //               (terminated)
		.av_debugaccess         (1'b0),                                                                        //               (terminated)
		.uav_clken              (),                                                                            //               (terminated)
		.av_clken               (1'b1),                                                                        //               (terminated)
		.uav_response           (2'b00),                                                                       //               (terminated)
		.av_response            (),                                                                            //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                        //               (terminated)
		.av_writeresponsevalid  ()                                                                             //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (16),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) ram_s1_translator (
		.clk                    (clk_0_clk_clk),                                    //                      clk.clk
		.reset                  (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (ram_s1_agent_m0_address),                          // avalon_universal_slave_0.address
		.uav_burstcount         (ram_s1_agent_m0_burstcount),                       //                         .burstcount
		.uav_read               (ram_s1_agent_m0_read),                             //                         .read
		.uav_write              (ram_s1_agent_m0_write),                            //                         .write
		.uav_waitrequest        (ram_s1_agent_m0_waitrequest),                      //                         .waitrequest
		.uav_readdatavalid      (ram_s1_agent_m0_readdatavalid),                    //                         .readdatavalid
		.uav_byteenable         (ram_s1_agent_m0_byteenable),                       //                         .byteenable
		.uav_readdata           (ram_s1_agent_m0_readdata),                         //                         .readdata
		.uav_writedata          (ram_s1_agent_m0_writedata),                        //                         .writedata
		.uav_lock               (ram_s1_agent_m0_lock),                             //                         .lock
		.uav_debugaccess        (ram_s1_agent_m0_debugaccess),                      //                         .debugaccess
		.av_address             (RAM_s1_address),                                   //      avalon_anti_slave_0.address
		.av_write               (RAM_s1_write),                                     //                         .write
		.av_readdata            (RAM_s1_readdata),                                  //                         .readdata
		.av_writedata           (RAM_s1_writedata),                                 //                         .writedata
		.av_byteenable          (RAM_s1_byteenable),                                //                         .byteenable
		.av_chipselect          (RAM_s1_chipselect),                                //                         .chipselect
		.av_clken               (RAM_s1_clken),                                     //                         .clken
		.av_read                (),                                                 //              (terminated)
		.av_begintransfer       (),                                                 //              (terminated)
		.av_beginbursttransfer  (),                                                 //              (terminated)
		.av_burstcount          (),                                                 //              (terminated)
		.av_readdatavalid       (1'b0),                                             //              (terminated)
		.av_waitrequest         (1'b0),                                             //              (terminated)
		.av_writebyteenable     (),                                                 //              (terminated)
		.av_lock                (),                                                 //              (terminated)
		.uav_clken              (1'b0),                                             //              (terminated)
		.av_debugaccess         (),                                                 //              (terminated)
		.av_outputenable        (),                                                 //              (terminated)
		.uav_response           (),                                                 //              (terminated)
		.av_response            (2'b00),                                            //              (terminated)
		.uav_writeresponsevalid (),                                                 //              (terminated)
		.av_writeresponsevalid  (1'b0)                                              //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) timer_s1_translator (
		.clk                    (clk_0_clk_clk),                                    //                      clk.clk
		.reset                  (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (timer_s1_agent_m0_address),                        // avalon_universal_slave_0.address
		.uav_burstcount         (timer_s1_agent_m0_burstcount),                     //                         .burstcount
		.uav_read               (timer_s1_agent_m0_read),                           //                         .read
		.uav_write              (timer_s1_agent_m0_write),                          //                         .write
		.uav_waitrequest        (timer_s1_agent_m0_waitrequest),                    //                         .waitrequest
		.uav_readdatavalid      (timer_s1_agent_m0_readdatavalid),                  //                         .readdatavalid
		.uav_byteenable         (timer_s1_agent_m0_byteenable),                     //                         .byteenable
		.uav_readdata           (timer_s1_agent_m0_readdata),                       //                         .readdata
		.uav_writedata          (timer_s1_agent_m0_writedata),                      //                         .writedata
		.uav_lock               (timer_s1_agent_m0_lock),                           //                         .lock
		.uav_debugaccess        (timer_s1_agent_m0_debugaccess),                    //                         .debugaccess
		.av_address             (TIMER_s1_address),                                 //      avalon_anti_slave_0.address
		.av_write               (TIMER_s1_write),                                   //                         .write
		.av_readdata            (TIMER_s1_readdata),                                //                         .readdata
		.av_writedata           (TIMER_s1_writedata),                               //                         .writedata
		.av_chipselect          (TIMER_s1_chipselect),                              //                         .chipselect
		.av_read                (),                                                 //              (terminated)
		.av_begintransfer       (),                                                 //              (terminated)
		.av_beginbursttransfer  (),                                                 //              (terminated)
		.av_burstcount          (),                                                 //              (terminated)
		.av_byteenable          (),                                                 //              (terminated)
		.av_readdatavalid       (1'b0),                                             //              (terminated)
		.av_waitrequest         (1'b0),                                             //              (terminated)
		.av_writebyteenable     (),                                                 //              (terminated)
		.av_lock                (),                                                 //              (terminated)
		.av_clken               (),                                                 //              (terminated)
		.uav_clken              (1'b0),                                             //              (terminated)
		.av_debugaccess         (),                                                 //              (terminated)
		.av_outputenable        (),                                                 //              (terminated)
		.uav_response           (),                                                 //              (terminated)
		.av_response            (2'b00),                                            //              (terminated)
		.uav_writeresponsevalid (),                                                 //              (terminated)
		.av_writeresponsevalid  (1'b0)                                              //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (25),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (16),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (2),
		.UAV_BYTEENABLE_W               (2),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (2),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (2),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sdram_s1_translator (
		.clk                    (clk_0_clk_clk),                                    //                      clk.clk
		.reset                  (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sdram_s1_agent_m0_address),                        // avalon_universal_slave_0.address
		.uav_burstcount         (sdram_s1_agent_m0_burstcount),                     //                         .burstcount
		.uav_read               (sdram_s1_agent_m0_read),                           //                         .read
		.uav_write              (sdram_s1_agent_m0_write),                          //                         .write
		.uav_waitrequest        (sdram_s1_agent_m0_waitrequest),                    //                         .waitrequest
		.uav_readdatavalid      (sdram_s1_agent_m0_readdatavalid),                  //                         .readdatavalid
		.uav_byteenable         (sdram_s1_agent_m0_byteenable),                     //                         .byteenable
		.uav_readdata           (sdram_s1_agent_m0_readdata),                       //                         .readdata
		.uav_writedata          (sdram_s1_agent_m0_writedata),                      //                         .writedata
		.uav_lock               (sdram_s1_agent_m0_lock),                           //                         .lock
		.uav_debugaccess        (sdram_s1_agent_m0_debugaccess),                    //                         .debugaccess
		.av_address             (SDRAM_s1_address),                                 //      avalon_anti_slave_0.address
		.av_write               (SDRAM_s1_write),                                   //                         .write
		.av_read                (SDRAM_s1_read),                                    //                         .read
		.av_readdata            (SDRAM_s1_readdata),                                //                         .readdata
		.av_writedata           (SDRAM_s1_writedata),                               //                         .writedata
		.av_byteenable          (SDRAM_s1_byteenable),                              //                         .byteenable
		.av_readdatavalid       (SDRAM_s1_readdatavalid),                           //                         .readdatavalid
		.av_waitrequest         (SDRAM_s1_waitrequest),                             //                         .waitrequest
		.av_chipselect          (SDRAM_s1_chipselect),                              //                         .chipselect
		.av_begintransfer       (),                                                 //              (terminated)
		.av_beginbursttransfer  (),                                                 //              (terminated)
		.av_burstcount          (),                                                 //              (terminated)
		.av_writebyteenable     (),                                                 //              (terminated)
		.av_lock                (),                                                 //              (terminated)
		.av_clken               (),                                                 //              (terminated)
		.uav_clken              (1'b0),                                             //              (terminated)
		.av_debugaccess         (),                                                 //              (terminated)
		.av_outputenable        (),                                                 //              (terminated)
		.uav_response           (),                                                 //              (terminated)
		.av_response            (2'b00),                                            //              (terminated)
		.uav_writeresponsevalid (),                                                 //              (terminated)
		.av_writeresponsevalid  (1'b0)                                              //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sw_s1_translator (
		.clk                    (clk_0_clk_clk),                                    //                      clk.clk
		.reset                  (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sw_s1_agent_m0_address),                           // avalon_universal_slave_0.address
		.uav_burstcount         (sw_s1_agent_m0_burstcount),                        //                         .burstcount
		.uav_read               (sw_s1_agent_m0_read),                              //                         .read
		.uav_write              (sw_s1_agent_m0_write),                             //                         .write
		.uav_waitrequest        (sw_s1_agent_m0_waitrequest),                       //                         .waitrequest
		.uav_readdatavalid      (sw_s1_agent_m0_readdatavalid),                     //                         .readdatavalid
		.uav_byteenable         (sw_s1_agent_m0_byteenable),                        //                         .byteenable
		.uav_readdata           (sw_s1_agent_m0_readdata),                          //                         .readdata
		.uav_writedata          (sw_s1_agent_m0_writedata),                         //                         .writedata
		.uav_lock               (sw_s1_agent_m0_lock),                              //                         .lock
		.uav_debugaccess        (sw_s1_agent_m0_debugaccess),                       //                         .debugaccess
		.av_address             (SW_s1_address),                                    //      avalon_anti_slave_0.address
		.av_readdata            (SW_s1_readdata),                                   //                         .readdata
		.av_write               (),                                                 //              (terminated)
		.av_read                (),                                                 //              (terminated)
		.av_writedata           (),                                                 //              (terminated)
		.av_begintransfer       (),                                                 //              (terminated)
		.av_beginbursttransfer  (),                                                 //              (terminated)
		.av_burstcount          (),                                                 //              (terminated)
		.av_byteenable          (),                                                 //              (terminated)
		.av_readdatavalid       (1'b0),                                             //              (terminated)
		.av_waitrequest         (1'b0),                                             //              (terminated)
		.av_writebyteenable     (),                                                 //              (terminated)
		.av_lock                (),                                                 //              (terminated)
		.av_chipselect          (),                                                 //              (terminated)
		.av_clken               (),                                                 //              (terminated)
		.uav_clken              (1'b0),                                             //              (terminated)
		.av_debugaccess         (),                                                 //              (terminated)
		.av_outputenable        (),                                                 //              (terminated)
		.uav_response           (),                                                 //              (terminated)
		.av_response            (2'b00),                                            //              (terminated)
		.uav_writeresponsevalid (),                                                 //              (terminated)
		.av_writeresponsevalid  (1'b0)                                              //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) seg6_s1_translator (
		.clk                    (clk_0_clk_clk),                                    //                      clk.clk
		.reset                  (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (seg6_s1_agent_m0_address),                         // avalon_universal_slave_0.address
		.uav_burstcount         (seg6_s1_agent_m0_burstcount),                      //                         .burstcount
		.uav_read               (seg6_s1_agent_m0_read),                            //                         .read
		.uav_write              (seg6_s1_agent_m0_write),                           //                         .write
		.uav_waitrequest        (seg6_s1_agent_m0_waitrequest),                     //                         .waitrequest
		.uav_readdatavalid      (seg6_s1_agent_m0_readdatavalid),                   //                         .readdatavalid
		.uav_byteenable         (seg6_s1_agent_m0_byteenable),                      //                         .byteenable
		.uav_readdata           (seg6_s1_agent_m0_readdata),                        //                         .readdata
		.uav_writedata          (seg6_s1_agent_m0_writedata),                       //                         .writedata
		.uav_lock               (seg6_s1_agent_m0_lock),                            //                         .lock
		.uav_debugaccess        (seg6_s1_agent_m0_debugaccess),                     //                         .debugaccess
		.av_address             (SEG6_s1_address),                                  //      avalon_anti_slave_0.address
		.av_write               (SEG6_s1_write),                                    //                         .write
		.av_readdata            (SEG6_s1_readdata),                                 //                         .readdata
		.av_writedata           (SEG6_s1_writedata),                                //                         .writedata
		.av_chipselect          (SEG6_s1_chipselect),                               //                         .chipselect
		.av_read                (),                                                 //              (terminated)
		.av_begintransfer       (),                                                 //              (terminated)
		.av_beginbursttransfer  (),                                                 //              (terminated)
		.av_burstcount          (),                                                 //              (terminated)
		.av_byteenable          (),                                                 //              (terminated)
		.av_readdatavalid       (1'b0),                                             //              (terminated)
		.av_waitrequest         (1'b0),                                             //              (terminated)
		.av_writebyteenable     (),                                                 //              (terminated)
		.av_lock                (),                                                 //              (terminated)
		.av_clken               (),                                                 //              (terminated)
		.uav_clken              (1'b0),                                             //              (terminated)
		.av_debugaccess         (),                                                 //              (terminated)
		.av_outputenable        (),                                                 //              (terminated)
		.uav_response           (),                                                 //              (terminated)
		.av_response            (2'b00),                                            //              (terminated)
		.uav_writeresponsevalid (),                                                 //              (terminated)
		.av_writeresponsevalid  (1'b0)                                              //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) seg5_s1_translator (
		.clk                    (clk_0_clk_clk),                                    //                      clk.clk
		.reset                  (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (seg5_s1_agent_m0_address),                         // avalon_universal_slave_0.address
		.uav_burstcount         (seg5_s1_agent_m0_burstcount),                      //                         .burstcount
		.uav_read               (seg5_s1_agent_m0_read),                            //                         .read
		.uav_write              (seg5_s1_agent_m0_write),                           //                         .write
		.uav_waitrequest        (seg5_s1_agent_m0_waitrequest),                     //                         .waitrequest
		.uav_readdatavalid      (seg5_s1_agent_m0_readdatavalid),                   //                         .readdatavalid
		.uav_byteenable         (seg5_s1_agent_m0_byteenable),                      //                         .byteenable
		.uav_readdata           (seg5_s1_agent_m0_readdata),                        //                         .readdata
		.uav_writedata          (seg5_s1_agent_m0_writedata),                       //                         .writedata
		.uav_lock               (seg5_s1_agent_m0_lock),                            //                         .lock
		.uav_debugaccess        (seg5_s1_agent_m0_debugaccess),                     //                         .debugaccess
		.av_address             (SEG5_s1_address),                                  //      avalon_anti_slave_0.address
		.av_write               (SEG5_s1_write),                                    //                         .write
		.av_readdata            (SEG5_s1_readdata),                                 //                         .readdata
		.av_writedata           (SEG5_s1_writedata),                                //                         .writedata
		.av_chipselect          (SEG5_s1_chipselect),                               //                         .chipselect
		.av_read                (),                                                 //              (terminated)
		.av_begintransfer       (),                                                 //              (terminated)
		.av_beginbursttransfer  (),                                                 //              (terminated)
		.av_burstcount          (),                                                 //              (terminated)
		.av_byteenable          (),                                                 //              (terminated)
		.av_readdatavalid       (1'b0),                                             //              (terminated)
		.av_waitrequest         (1'b0),                                             //              (terminated)
		.av_writebyteenable     (),                                                 //              (terminated)
		.av_lock                (),                                                 //              (terminated)
		.av_clken               (),                                                 //              (terminated)
		.uav_clken              (1'b0),                                             //              (terminated)
		.av_debugaccess         (),                                                 //              (terminated)
		.av_outputenable        (),                                                 //              (terminated)
		.uav_response           (),                                                 //              (terminated)
		.av_response            (2'b00),                                            //              (terminated)
		.uav_writeresponsevalid (),                                                 //              (terminated)
		.av_writeresponsevalid  (1'b0)                                              //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) seg4_s1_translator (
		.clk                    (clk_0_clk_clk),                                    //                      clk.clk
		.reset                  (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (seg4_s1_agent_m0_address),                         // avalon_universal_slave_0.address
		.uav_burstcount         (seg4_s1_agent_m0_burstcount),                      //                         .burstcount
		.uav_read               (seg4_s1_agent_m0_read),                            //                         .read
		.uav_write              (seg4_s1_agent_m0_write),                           //                         .write
		.uav_waitrequest        (seg4_s1_agent_m0_waitrequest),                     //                         .waitrequest
		.uav_readdatavalid      (seg4_s1_agent_m0_readdatavalid),                   //                         .readdatavalid
		.uav_byteenable         (seg4_s1_agent_m0_byteenable),                      //                         .byteenable
		.uav_readdata           (seg4_s1_agent_m0_readdata),                        //                         .readdata
		.uav_writedata          (seg4_s1_agent_m0_writedata),                       //                         .writedata
		.uav_lock               (seg4_s1_agent_m0_lock),                            //                         .lock
		.uav_debugaccess        (seg4_s1_agent_m0_debugaccess),                     //                         .debugaccess
		.av_address             (SEG4_s1_address),                                  //      avalon_anti_slave_0.address
		.av_write               (SEG4_s1_write),                                    //                         .write
		.av_readdata            (SEG4_s1_readdata),                                 //                         .readdata
		.av_writedata           (SEG4_s1_writedata),                                //                         .writedata
		.av_chipselect          (SEG4_s1_chipselect),                               //                         .chipselect
		.av_read                (),                                                 //              (terminated)
		.av_begintransfer       (),                                                 //              (terminated)
		.av_beginbursttransfer  (),                                                 //              (terminated)
		.av_burstcount          (),                                                 //              (terminated)
		.av_byteenable          (),                                                 //              (terminated)
		.av_readdatavalid       (1'b0),                                             //              (terminated)
		.av_waitrequest         (1'b0),                                             //              (terminated)
		.av_writebyteenable     (),                                                 //              (terminated)
		.av_lock                (),                                                 //              (terminated)
		.av_clken               (),                                                 //              (terminated)
		.uav_clken              (1'b0),                                             //              (terminated)
		.av_debugaccess         (),                                                 //              (terminated)
		.av_outputenable        (),                                                 //              (terminated)
		.uav_response           (),                                                 //              (terminated)
		.av_response            (2'b00),                                            //              (terminated)
		.uav_writeresponsevalid (),                                                 //              (terminated)
		.av_writeresponsevalid  (1'b0)                                              //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) seg3_s1_translator (
		.clk                    (clk_0_clk_clk),                                    //                      clk.clk
		.reset                  (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (seg3_s1_agent_m0_address),                         // avalon_universal_slave_0.address
		.uav_burstcount         (seg3_s1_agent_m0_burstcount),                      //                         .burstcount
		.uav_read               (seg3_s1_agent_m0_read),                            //                         .read
		.uav_write              (seg3_s1_agent_m0_write),                           //                         .write
		.uav_waitrequest        (seg3_s1_agent_m0_waitrequest),                     //                         .waitrequest
		.uav_readdatavalid      (seg3_s1_agent_m0_readdatavalid),                   //                         .readdatavalid
		.uav_byteenable         (seg3_s1_agent_m0_byteenable),                      //                         .byteenable
		.uav_readdata           (seg3_s1_agent_m0_readdata),                        //                         .readdata
		.uav_writedata          (seg3_s1_agent_m0_writedata),                       //                         .writedata
		.uav_lock               (seg3_s1_agent_m0_lock),                            //                         .lock
		.uav_debugaccess        (seg3_s1_agent_m0_debugaccess),                     //                         .debugaccess
		.av_address             (SEG3_s1_address),                                  //      avalon_anti_slave_0.address
		.av_write               (SEG3_s1_write),                                    //                         .write
		.av_readdata            (SEG3_s1_readdata),                                 //                         .readdata
		.av_writedata           (SEG3_s1_writedata),                                //                         .writedata
		.av_chipselect          (SEG3_s1_chipselect),                               //                         .chipselect
		.av_read                (),                                                 //              (terminated)
		.av_begintransfer       (),                                                 //              (terminated)
		.av_beginbursttransfer  (),                                                 //              (terminated)
		.av_burstcount          (),                                                 //              (terminated)
		.av_byteenable          (),                                                 //              (terminated)
		.av_readdatavalid       (1'b0),                                             //              (terminated)
		.av_waitrequest         (1'b0),                                             //              (terminated)
		.av_writebyteenable     (),                                                 //              (terminated)
		.av_lock                (),                                                 //              (terminated)
		.av_clken               (),                                                 //              (terminated)
		.uav_clken              (1'b0),                                             //              (terminated)
		.av_debugaccess         (),                                                 //              (terminated)
		.av_outputenable        (),                                                 //              (terminated)
		.uav_response           (),                                                 //              (terminated)
		.av_response            (2'b00),                                            //              (terminated)
		.uav_writeresponsevalid (),                                                 //              (terminated)
		.av_writeresponsevalid  (1'b0)                                              //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) seg2_s1_translator (
		.clk                    (clk_0_clk_clk),                                    //                      clk.clk
		.reset                  (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (seg2_s1_agent_m0_address),                         // avalon_universal_slave_0.address
		.uav_burstcount         (seg2_s1_agent_m0_burstcount),                      //                         .burstcount
		.uav_read               (seg2_s1_agent_m0_read),                            //                         .read
		.uav_write              (seg2_s1_agent_m0_write),                           //                         .write
		.uav_waitrequest        (seg2_s1_agent_m0_waitrequest),                     //                         .waitrequest
		.uav_readdatavalid      (seg2_s1_agent_m0_readdatavalid),                   //                         .readdatavalid
		.uav_byteenable         (seg2_s1_agent_m0_byteenable),                      //                         .byteenable
		.uav_readdata           (seg2_s1_agent_m0_readdata),                        //                         .readdata
		.uav_writedata          (seg2_s1_agent_m0_writedata),                       //                         .writedata
		.uav_lock               (seg2_s1_agent_m0_lock),                            //                         .lock
		.uav_debugaccess        (seg2_s1_agent_m0_debugaccess),                     //                         .debugaccess
		.av_address             (SEG2_s1_address),                                  //      avalon_anti_slave_0.address
		.av_write               (SEG2_s1_write),                                    //                         .write
		.av_readdata            (SEG2_s1_readdata),                                 //                         .readdata
		.av_writedata           (SEG2_s1_writedata),                                //                         .writedata
		.av_chipselect          (SEG2_s1_chipselect),                               //                         .chipselect
		.av_read                (),                                                 //              (terminated)
		.av_begintransfer       (),                                                 //              (terminated)
		.av_beginbursttransfer  (),                                                 //              (terminated)
		.av_burstcount          (),                                                 //              (terminated)
		.av_byteenable          (),                                                 //              (terminated)
		.av_readdatavalid       (1'b0),                                             //              (terminated)
		.av_waitrequest         (1'b0),                                             //              (terminated)
		.av_writebyteenable     (),                                                 //              (terminated)
		.av_lock                (),                                                 //              (terminated)
		.av_clken               (),                                                 //              (terminated)
		.uav_clken              (1'b0),                                             //              (terminated)
		.av_debugaccess         (),                                                 //              (terminated)
		.av_outputenable        (),                                                 //              (terminated)
		.uav_response           (),                                                 //              (terminated)
		.av_response            (2'b00),                                            //              (terminated)
		.uav_writeresponsevalid (),                                                 //              (terminated)
		.av_writeresponsevalid  (1'b0)                                              //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) seg1_s1_translator (
		.clk                    (clk_0_clk_clk),                                    //                      clk.clk
		.reset                  (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (seg1_s1_agent_m0_address),                         // avalon_universal_slave_0.address
		.uav_burstcount         (seg1_s1_agent_m0_burstcount),                      //                         .burstcount
		.uav_read               (seg1_s1_agent_m0_read),                            //                         .read
		.uav_write              (seg1_s1_agent_m0_write),                           //                         .write
		.uav_waitrequest        (seg1_s1_agent_m0_waitrequest),                     //                         .waitrequest
		.uav_readdatavalid      (seg1_s1_agent_m0_readdatavalid),                   //                         .readdatavalid
		.uav_byteenable         (seg1_s1_agent_m0_byteenable),                      //                         .byteenable
		.uav_readdata           (seg1_s1_agent_m0_readdata),                        //                         .readdata
		.uav_writedata          (seg1_s1_agent_m0_writedata),                       //                         .writedata
		.uav_lock               (seg1_s1_agent_m0_lock),                            //                         .lock
		.uav_debugaccess        (seg1_s1_agent_m0_debugaccess),                     //                         .debugaccess
		.av_address             (SEG1_s1_address),                                  //      avalon_anti_slave_0.address
		.av_write               (SEG1_s1_write),                                    //                         .write
		.av_readdata            (SEG1_s1_readdata),                                 //                         .readdata
		.av_writedata           (SEG1_s1_writedata),                                //                         .writedata
		.av_chipselect          (SEG1_s1_chipselect),                               //                         .chipselect
		.av_read                (),                                                 //              (terminated)
		.av_begintransfer       (),                                                 //              (terminated)
		.av_beginbursttransfer  (),                                                 //              (terminated)
		.av_burstcount          (),                                                 //              (terminated)
		.av_byteenable          (),                                                 //              (terminated)
		.av_readdatavalid       (1'b0),                                             //              (terminated)
		.av_waitrequest         (1'b0),                                             //              (terminated)
		.av_writebyteenable     (),                                                 //              (terminated)
		.av_lock                (),                                                 //              (terminated)
		.av_clken               (),                                                 //              (terminated)
		.uav_clken              (1'b0),                                             //              (terminated)
		.av_debugaccess         (),                                                 //              (terminated)
		.av_outputenable        (),                                                 //              (terminated)
		.uav_response           (),                                                 //              (terminated)
		.av_response            (2'b00),                                            //              (terminated)
		.uav_writeresponsevalid (),                                                 //              (terminated)
		.av_writeresponsevalid  (1'b0)                                              //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) keys_s1_translator (
		.clk                    (clk_0_clk_clk),                                    //                      clk.clk
		.reset                  (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (keys_s1_agent_m0_address),                         // avalon_universal_slave_0.address
		.uav_burstcount         (keys_s1_agent_m0_burstcount),                      //                         .burstcount
		.uav_read               (keys_s1_agent_m0_read),                            //                         .read
		.uav_write              (keys_s1_agent_m0_write),                           //                         .write
		.uav_waitrequest        (keys_s1_agent_m0_waitrequest),                     //                         .waitrequest
		.uav_readdatavalid      (keys_s1_agent_m0_readdatavalid),                   //                         .readdatavalid
		.uav_byteenable         (keys_s1_agent_m0_byteenable),                      //                         .byteenable
		.uav_readdata           (keys_s1_agent_m0_readdata),                        //                         .readdata
		.uav_writedata          (keys_s1_agent_m0_writedata),                       //                         .writedata
		.uav_lock               (keys_s1_agent_m0_lock),                            //                         .lock
		.uav_debugaccess        (keys_s1_agent_m0_debugaccess),                     //                         .debugaccess
		.av_address             (KEYS_s1_address),                                  //      avalon_anti_slave_0.address
		.av_readdata            (KEYS_s1_readdata),                                 //                         .readdata
		.av_write               (),                                                 //              (terminated)
		.av_read                (),                                                 //              (terminated)
		.av_writedata           (),                                                 //              (terminated)
		.av_begintransfer       (),                                                 //              (terminated)
		.av_beginbursttransfer  (),                                                 //              (terminated)
		.av_burstcount          (),                                                 //              (terminated)
		.av_byteenable          (),                                                 //              (terminated)
		.av_readdatavalid       (1'b0),                                             //              (terminated)
		.av_waitrequest         (1'b0),                                             //              (terminated)
		.av_writebyteenable     (),                                                 //              (terminated)
		.av_lock                (),                                                 //              (terminated)
		.av_chipselect          (),                                                 //              (terminated)
		.av_clken               (),                                                 //              (terminated)
		.uav_clken              (1'b0),                                             //              (terminated)
		.av_debugaccess         (),                                                 //              (terminated)
		.av_outputenable        (),                                                 //              (terminated)
		.uav_response           (),                                                 //              (terminated)
		.av_response            (2'b00),                                            //              (terminated)
		.uav_writeresponsevalid (),                                                 //              (terminated)
		.av_writeresponsevalid  (1'b0)                                              //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) leds_s1_translator (
		.clk                    (clk_0_clk_clk),                                    //                      clk.clk
		.reset                  (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (leds_s1_agent_m0_address),                         // avalon_universal_slave_0.address
		.uav_burstcount         (leds_s1_agent_m0_burstcount),                      //                         .burstcount
		.uav_read               (leds_s1_agent_m0_read),                            //                         .read
		.uav_write              (leds_s1_agent_m0_write),                           //                         .write
		.uav_waitrequest        (leds_s1_agent_m0_waitrequest),                     //                         .waitrequest
		.uav_readdatavalid      (leds_s1_agent_m0_readdatavalid),                   //                         .readdatavalid
		.uav_byteenable         (leds_s1_agent_m0_byteenable),                      //                         .byteenable
		.uav_readdata           (leds_s1_agent_m0_readdata),                        //                         .readdata
		.uav_writedata          (leds_s1_agent_m0_writedata),                       //                         .writedata
		.uav_lock               (leds_s1_agent_m0_lock),                            //                         .lock
		.uav_debugaccess        (leds_s1_agent_m0_debugaccess),                     //                         .debugaccess
		.av_address             (LEDS_s1_address),                                  //      avalon_anti_slave_0.address
		.av_write               (LEDS_s1_write),                                    //                         .write
		.av_readdata            (LEDS_s1_readdata),                                 //                         .readdata
		.av_writedata           (LEDS_s1_writedata),                                //                         .writedata
		.av_chipselect          (LEDS_s1_chipselect),                               //                         .chipselect
		.av_read                (),                                                 //              (terminated)
		.av_begintransfer       (),                                                 //              (terminated)
		.av_beginbursttransfer  (),                                                 //              (terminated)
		.av_burstcount          (),                                                 //              (terminated)
		.av_byteenable          (),                                                 //              (terminated)
		.av_readdatavalid       (1'b0),                                             //              (terminated)
		.av_waitrequest         (1'b0),                                             //              (terminated)
		.av_writebyteenable     (),                                                 //              (terminated)
		.av_lock                (),                                                 //              (terminated)
		.av_clken               (),                                                 //              (terminated)
		.uav_clken              (1'b0),                                             //              (terminated)
		.av_debugaccess         (),                                                 //              (terminated)
		.av_outputenable        (),                                                 //              (terminated)
		.uav_response           (),                                                 //              (terminated)
		.av_response            (2'b00),                                            //              (terminated)
		.uav_writeresponsevalid (),                                                 //              (terminated)
		.av_writeresponsevalid  (1'b0)                                              //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (128),
		.PKT_ORI_BURST_SIZE_L      (126),
		.PKT_RESPONSE_STATUS_H     (125),
		.PKT_RESPONSE_STATUS_L     (124),
		.PKT_QOS_H                 (96),
		.PKT_QOS_L                 (96),
		.PKT_DATA_SIDEBAND_H       (94),
		.PKT_DATA_SIDEBAND_L       (94),
		.PKT_ADDR_SIDEBAND_H       (93),
		.PKT_ADDR_SIDEBAND_L       (93),
		.PKT_BURST_TYPE_H          (92),
		.PKT_BURST_TYPE_L          (91),
		.PKT_CACHE_H               (123),
		.PKT_CACHE_L               (120),
		.PKT_THREAD_ID_H           (116),
		.PKT_THREAD_ID_L           (105),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_TRANS_EXCLUSIVE       (71),
		.PKT_TRANS_LOCK            (70),
		.PKT_BEGIN_BURST           (95),
		.PKT_PROTECTION_H          (119),
		.PKT_PROTECTION_L          (117),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_POSTED          (67),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (100),
		.PKT_SRC_ID_L              (97),
		.PKT_DEST_ID_H             (104),
		.PKT_DEST_ID_L             (101),
		.ST_DATA_W                 (129),
		.ST_CHANNEL_W              (12),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (2),
		.BURSTWRAP_VALUE           (255),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) nios2_qsys_0_data_master_agent (
		.clk                   (clk_0_clk_clk),                                                               //       clk.clk
		.reset                 (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),                            // clk_reset.reset
		.av_address            (nios2_qsys_0_data_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (nios2_qsys_0_data_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (nios2_qsys_0_data_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (nios2_qsys_0_data_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (nios2_qsys_0_data_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (nios2_qsys_0_data_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (nios2_qsys_0_data_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (nios2_qsys_0_data_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (nios2_qsys_0_data_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (nios2_qsys_0_data_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (nios2_qsys_0_data_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (nios2_qsys_0_data_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (nios2_qsys_0_data_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (nios2_qsys_0_data_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (nios2_qsys_0_data_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (nios2_qsys_0_data_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_src_valid),                                                           //        rp.valid
		.rp_data               (rsp_mux_src_data),                                                            //          .data
		.rp_channel            (rsp_mux_src_channel),                                                         //          .channel
		.rp_startofpacket      (rsp_mux_src_startofpacket),                                                   //          .startofpacket
		.rp_endofpacket        (rsp_mux_src_endofpacket),                                                     //          .endofpacket
		.rp_ready              (rsp_mux_src_ready),                                                           //          .ready
		.av_response           (),                                                                            // (terminated)
		.av_writeresponsevalid ()                                                                             // (terminated)
	);

	altera_merlin_axi_master_ni #(
		.ID_WIDTH                  (12),
		.ADDR_WIDTH                (21),
		.RDATA_WIDTH               (32),
		.WDATA_WIDTH               (32),
		.ADDR_USER_WIDTH           (1),
		.DATA_USER_WIDTH           (1),
		.AXI_BURST_LENGTH_WIDTH    (4),
		.AXI_LOCK_WIDTH            (2),
		.AXI_VERSION               ("AXI3"),
		.WRITE_ISSUING_CAPABILITY  (8),
		.READ_ISSUING_CAPABILITY   (8),
		.PKT_BEGIN_BURST           (95),
		.PKT_CACHE_H               (123),
		.PKT_CACHE_L               (120),
		.PKT_ADDR_SIDEBAND_H       (93),
		.PKT_ADDR_SIDEBAND_L       (93),
		.PKT_PROTECTION_H          (119),
		.PKT_PROTECTION_L          (117),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_BURST_TYPE_H          (92),
		.PKT_BURST_TYPE_L          (91),
		.PKT_RESPONSE_STATUS_L     (124),
		.PKT_RESPONSE_STATUS_H     (125),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_EXCLUSIVE       (71),
		.PKT_TRANS_LOCK            (70),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_POSTED          (67),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (100),
		.PKT_SRC_ID_L              (97),
		.PKT_DEST_ID_H             (104),
		.PKT_DEST_ID_L             (101),
		.PKT_THREAD_ID_H           (116),
		.PKT_THREAD_ID_L           (105),
		.PKT_QOS_L                 (96),
		.PKT_QOS_H                 (96),
		.PKT_ORI_BURST_SIZE_L      (126),
		.PKT_ORI_BURST_SIZE_H      (128),
		.PKT_DATA_SIDEBAND_H       (94),
		.PKT_DATA_SIDEBAND_L       (94),
		.ST_DATA_W                 (129),
		.ST_CHANNEL_W              (12),
		.ID                        (1)
	) hps_0_h2f_lw_axi_master_agent (
		.aclk                   (clk_0_clk_clk),                                                        //              clk.clk
		.aresetn                (~hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //        clk_reset.reset_n
		.write_cp_valid         (hps_0_h2f_lw_axi_master_agent_write_cp_valid),                         //         write_cp.valid
		.write_cp_data          (hps_0_h2f_lw_axi_master_agent_write_cp_data),                          //                 .data
		.write_cp_startofpacket (hps_0_h2f_lw_axi_master_agent_write_cp_startofpacket),                 //                 .startofpacket
		.write_cp_endofpacket   (hps_0_h2f_lw_axi_master_agent_write_cp_endofpacket),                   //                 .endofpacket
		.write_cp_ready         (hps_0_h2f_lw_axi_master_agent_write_cp_ready),                         //                 .ready
		.write_rp_valid         (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_valid),                     //         write_rp.valid
		.write_rp_data          (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_data),                      //                 .data
		.write_rp_channel       (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_channel),                   //                 .channel
		.write_rp_startofpacket (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_startofpacket),             //                 .startofpacket
		.write_rp_endofpacket   (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_endofpacket),               //                 .endofpacket
		.write_rp_ready         (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_ready),                     //                 .ready
		.read_cp_valid          (hps_0_h2f_lw_axi_master_agent_read_cp_valid),                          //          read_cp.valid
		.read_cp_data           (hps_0_h2f_lw_axi_master_agent_read_cp_data),                           //                 .data
		.read_cp_startofpacket  (hps_0_h2f_lw_axi_master_agent_read_cp_startofpacket),                  //                 .startofpacket
		.read_cp_endofpacket    (hps_0_h2f_lw_axi_master_agent_read_cp_endofpacket),                    //                 .endofpacket
		.read_cp_ready          (hps_0_h2f_lw_axi_master_agent_read_cp_ready),                          //                 .ready
		.read_rp_valid          (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_valid),                     //          read_rp.valid
		.read_rp_data           (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_data),                      //                 .data
		.read_rp_channel        (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_channel),                   //                 .channel
		.read_rp_startofpacket  (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_startofpacket),             //                 .startofpacket
		.read_rp_endofpacket    (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_endofpacket),               //                 .endofpacket
		.read_rp_ready          (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_ready),                     //                 .ready
		.awid                   (hps_0_h2f_lw_axi_master_awid),                                         // altera_axi_slave.awid
		.awaddr                 (hps_0_h2f_lw_axi_master_awaddr),                                       //                 .awaddr
		.awlen                  (hps_0_h2f_lw_axi_master_awlen),                                        //                 .awlen
		.awsize                 (hps_0_h2f_lw_axi_master_awsize),                                       //                 .awsize
		.awburst                (hps_0_h2f_lw_axi_master_awburst),                                      //                 .awburst
		.awlock                 (hps_0_h2f_lw_axi_master_awlock),                                       //                 .awlock
		.awcache                (hps_0_h2f_lw_axi_master_awcache),                                      //                 .awcache
		.awprot                 (hps_0_h2f_lw_axi_master_awprot),                                       //                 .awprot
		.awvalid                (hps_0_h2f_lw_axi_master_awvalid),                                      //                 .awvalid
		.awready                (hps_0_h2f_lw_axi_master_awready),                                      //                 .awready
		.wid                    (hps_0_h2f_lw_axi_master_wid),                                          //                 .wid
		.wdata                  (hps_0_h2f_lw_axi_master_wdata),                                        //                 .wdata
		.wstrb                  (hps_0_h2f_lw_axi_master_wstrb),                                        //                 .wstrb
		.wlast                  (hps_0_h2f_lw_axi_master_wlast),                                        //                 .wlast
		.wvalid                 (hps_0_h2f_lw_axi_master_wvalid),                                       //                 .wvalid
		.wready                 (hps_0_h2f_lw_axi_master_wready),                                       //                 .wready
		.bid                    (hps_0_h2f_lw_axi_master_bid),                                          //                 .bid
		.bresp                  (hps_0_h2f_lw_axi_master_bresp),                                        //                 .bresp
		.bvalid                 (hps_0_h2f_lw_axi_master_bvalid),                                       //                 .bvalid
		.bready                 (hps_0_h2f_lw_axi_master_bready),                                       //                 .bready
		.arid                   (hps_0_h2f_lw_axi_master_arid),                                         //                 .arid
		.araddr                 (hps_0_h2f_lw_axi_master_araddr),                                       //                 .araddr
		.arlen                  (hps_0_h2f_lw_axi_master_arlen),                                        //                 .arlen
		.arsize                 (hps_0_h2f_lw_axi_master_arsize),                                       //                 .arsize
		.arburst                (hps_0_h2f_lw_axi_master_arburst),                                      //                 .arburst
		.arlock                 (hps_0_h2f_lw_axi_master_arlock),                                       //                 .arlock
		.arcache                (hps_0_h2f_lw_axi_master_arcache),                                      //                 .arcache
		.arprot                 (hps_0_h2f_lw_axi_master_arprot),                                       //                 .arprot
		.arvalid                (hps_0_h2f_lw_axi_master_arvalid),                                      //                 .arvalid
		.arready                (hps_0_h2f_lw_axi_master_arready),                                      //                 .arready
		.rid                    (hps_0_h2f_lw_axi_master_rid),                                          //                 .rid
		.rdata                  (hps_0_h2f_lw_axi_master_rdata),                                        //                 .rdata
		.rresp                  (hps_0_h2f_lw_axi_master_rresp),                                        //                 .rresp
		.rlast                  (hps_0_h2f_lw_axi_master_rlast),                                        //                 .rlast
		.rvalid                 (hps_0_h2f_lw_axi_master_rvalid),                                       //                 .rvalid
		.rready                 (hps_0_h2f_lw_axi_master_rready),                                       //                 .rready
		.awuser                 (1'b0),                                                                 //      (terminated)
		.aruser                 (1'b0),                                                                 //      (terminated)
		.awqos                  (4'b0000),                                                              //      (terminated)
		.arqos                  (4'b0000),                                                              //      (terminated)
		.awregion               (4'b0000),                                                              //      (terminated)
		.arregion               (4'b0000),                                                              //      (terminated)
		.wuser                  (1'b0),                                                                 //      (terminated)
		.ruser                  (),                                                                     //      (terminated)
		.buser                  ()                                                                      //      (terminated)
	);

	altera_merlin_axi_master_ni #(
		.ID_WIDTH                  (12),
		.ADDR_WIDTH                (30),
		.RDATA_WIDTH               (64),
		.WDATA_WIDTH               (64),
		.ADDR_USER_WIDTH           (1),
		.DATA_USER_WIDTH           (1),
		.AXI_BURST_LENGTH_WIDTH    (4),
		.AXI_LOCK_WIDTH            (2),
		.AXI_VERSION               ("AXI3"),
		.WRITE_ISSUING_CAPABILITY  (8),
		.READ_ISSUING_CAPABILITY   (8),
		.PKT_BEGIN_BURST           (131),
		.PKT_CACHE_H               (159),
		.PKT_CACHE_L               (156),
		.PKT_ADDR_SIDEBAND_H       (129),
		.PKT_ADDR_SIDEBAND_L       (129),
		.PKT_PROTECTION_H          (155),
		.PKT_PROTECTION_L          (153),
		.PKT_BURST_SIZE_H          (126),
		.PKT_BURST_SIZE_L          (124),
		.PKT_BURST_TYPE_H          (128),
		.PKT_BURST_TYPE_L          (127),
		.PKT_RESPONSE_STATUS_L     (160),
		.PKT_RESPONSE_STATUS_H     (161),
		.PKT_BURSTWRAP_H           (123),
		.PKT_BURSTWRAP_L           (116),
		.PKT_BYTE_CNT_H            (115),
		.PKT_BYTE_CNT_L            (108),
		.PKT_ADDR_H                (101),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_EXCLUSIVE       (107),
		.PKT_TRANS_LOCK            (106),
		.PKT_TRANS_COMPRESSED_READ (102),
		.PKT_TRANS_POSTED          (103),
		.PKT_TRANS_WRITE           (104),
		.PKT_TRANS_READ            (105),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (136),
		.PKT_SRC_ID_L              (133),
		.PKT_DEST_ID_H             (140),
		.PKT_DEST_ID_L             (137),
		.PKT_THREAD_ID_H           (152),
		.PKT_THREAD_ID_L           (141),
		.PKT_QOS_L                 (132),
		.PKT_QOS_H                 (132),
		.PKT_ORI_BURST_SIZE_L      (162),
		.PKT_ORI_BURST_SIZE_H      (164),
		.PKT_DATA_SIDEBAND_H       (130),
		.PKT_DATA_SIDEBAND_L       (130),
		.ST_DATA_W                 (165),
		.ST_CHANNEL_W              (12),
		.ID                        (0)
	) hps_0_h2f_axi_master_agent (
		.aclk                   (clk_0_clk_clk),                                                        //              clk.clk
		.aresetn                (~hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //        clk_reset.reset_n
		.write_cp_valid         (hps_0_h2f_axi_master_agent_write_cp_valid),                            //         write_cp.valid
		.write_cp_data          (hps_0_h2f_axi_master_agent_write_cp_data),                             //                 .data
		.write_cp_startofpacket (hps_0_h2f_axi_master_agent_write_cp_startofpacket),                    //                 .startofpacket
		.write_cp_endofpacket   (hps_0_h2f_axi_master_agent_write_cp_endofpacket),                      //                 .endofpacket
		.write_cp_ready         (hps_0_h2f_axi_master_agent_write_cp_ready),                            //                 .ready
		.write_rp_valid         (rsp_mux_003_src_valid),                                                //         write_rp.valid
		.write_rp_data          (rsp_mux_003_src_data),                                                 //                 .data
		.write_rp_channel       (rsp_mux_003_src_channel),                                              //                 .channel
		.write_rp_startofpacket (rsp_mux_003_src_startofpacket),                                        //                 .startofpacket
		.write_rp_endofpacket   (rsp_mux_003_src_endofpacket),                                          //                 .endofpacket
		.write_rp_ready         (rsp_mux_003_src_ready),                                                //                 .ready
		.read_cp_valid          (hps_0_h2f_axi_master_agent_read_cp_valid),                             //          read_cp.valid
		.read_cp_data           (hps_0_h2f_axi_master_agent_read_cp_data),                              //                 .data
		.read_cp_startofpacket  (hps_0_h2f_axi_master_agent_read_cp_startofpacket),                     //                 .startofpacket
		.read_cp_endofpacket    (hps_0_h2f_axi_master_agent_read_cp_endofpacket),                       //                 .endofpacket
		.read_cp_ready          (hps_0_h2f_axi_master_agent_read_cp_ready),                             //                 .ready
		.read_rp_valid          (rsp_mux_004_src_valid),                                                //          read_rp.valid
		.read_rp_data           (rsp_mux_004_src_data),                                                 //                 .data
		.read_rp_channel        (rsp_mux_004_src_channel),                                              //                 .channel
		.read_rp_startofpacket  (rsp_mux_004_src_startofpacket),                                        //                 .startofpacket
		.read_rp_endofpacket    (rsp_mux_004_src_endofpacket),                                          //                 .endofpacket
		.read_rp_ready          (rsp_mux_004_src_ready),                                                //                 .ready
		.awid                   (hps_0_h2f_axi_master_awid),                                            // altera_axi_slave.awid
		.awaddr                 (hps_0_h2f_axi_master_awaddr),                                          //                 .awaddr
		.awlen                  (hps_0_h2f_axi_master_awlen),                                           //                 .awlen
		.awsize                 (hps_0_h2f_axi_master_awsize),                                          //                 .awsize
		.awburst                (hps_0_h2f_axi_master_awburst),                                         //                 .awburst
		.awlock                 (hps_0_h2f_axi_master_awlock),                                          //                 .awlock
		.awcache                (hps_0_h2f_axi_master_awcache),                                         //                 .awcache
		.awprot                 (hps_0_h2f_axi_master_awprot),                                          //                 .awprot
		.awvalid                (hps_0_h2f_axi_master_awvalid),                                         //                 .awvalid
		.awready                (hps_0_h2f_axi_master_awready),                                         //                 .awready
		.wid                    (hps_0_h2f_axi_master_wid),                                             //                 .wid
		.wdata                  (hps_0_h2f_axi_master_wdata),                                           //                 .wdata
		.wstrb                  (hps_0_h2f_axi_master_wstrb),                                           //                 .wstrb
		.wlast                  (hps_0_h2f_axi_master_wlast),                                           //                 .wlast
		.wvalid                 (hps_0_h2f_axi_master_wvalid),                                          //                 .wvalid
		.wready                 (hps_0_h2f_axi_master_wready),                                          //                 .wready
		.bid                    (hps_0_h2f_axi_master_bid),                                             //                 .bid
		.bresp                  (hps_0_h2f_axi_master_bresp),                                           //                 .bresp
		.bvalid                 (hps_0_h2f_axi_master_bvalid),                                          //                 .bvalid
		.bready                 (hps_0_h2f_axi_master_bready),                                          //                 .bready
		.arid                   (hps_0_h2f_axi_master_arid),                                            //                 .arid
		.araddr                 (hps_0_h2f_axi_master_araddr),                                          //                 .araddr
		.arlen                  (hps_0_h2f_axi_master_arlen),                                           //                 .arlen
		.arsize                 (hps_0_h2f_axi_master_arsize),                                          //                 .arsize
		.arburst                (hps_0_h2f_axi_master_arburst),                                         //                 .arburst
		.arlock                 (hps_0_h2f_axi_master_arlock),                                          //                 .arlock
		.arcache                (hps_0_h2f_axi_master_arcache),                                         //                 .arcache
		.arprot                 (hps_0_h2f_axi_master_arprot),                                          //                 .arprot
		.arvalid                (hps_0_h2f_axi_master_arvalid),                                         //                 .arvalid
		.arready                (hps_0_h2f_axi_master_arready),                                         //                 .arready
		.rid                    (hps_0_h2f_axi_master_rid),                                             //                 .rid
		.rdata                  (hps_0_h2f_axi_master_rdata),                                           //                 .rdata
		.rresp                  (hps_0_h2f_axi_master_rresp),                                           //                 .rresp
		.rlast                  (hps_0_h2f_axi_master_rlast),                                           //                 .rlast
		.rvalid                 (hps_0_h2f_axi_master_rvalid),                                          //                 .rvalid
		.rready                 (hps_0_h2f_axi_master_rready),                                          //                 .rready
		.awuser                 (1'b0),                                                                 //      (terminated)
		.aruser                 (1'b0),                                                                 //      (terminated)
		.awqos                  (4'b0000),                                                              //      (terminated)
		.arqos                  (4'b0000),                                                              //      (terminated)
		.awregion               (4'b0000),                                                              //      (terminated)
		.arregion               (4'b0000),                                                              //      (terminated)
		.wuser                  (1'b0),                                                                 //      (terminated)
		.ruser                  (),                                                                     //      (terminated)
		.buser                  ()                                                                      //      (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (128),
		.PKT_ORI_BURST_SIZE_L      (126),
		.PKT_RESPONSE_STATUS_H     (125),
		.PKT_RESPONSE_STATUS_L     (124),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_TRANS_LOCK            (70),
		.PKT_BEGIN_BURST           (95),
		.PKT_PROTECTION_H          (119),
		.PKT_PROTECTION_L          (117),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_POSTED          (67),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (100),
		.PKT_SRC_ID_L              (97),
		.PKT_DEST_ID_H             (104),
		.PKT_DEST_ID_L             (101),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (129),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) ram_s1_agent (
		.clk                     (clk_0_clk_clk),                                    //             clk.clk
		.reset                   (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (ram_s1_agent_m0_address),                          //              m0.address
		.m0_burstcount           (ram_s1_agent_m0_burstcount),                       //                .burstcount
		.m0_byteenable           (ram_s1_agent_m0_byteenable),                       //                .byteenable
		.m0_debugaccess          (ram_s1_agent_m0_debugaccess),                      //                .debugaccess
		.m0_lock                 (ram_s1_agent_m0_lock),                             //                .lock
		.m0_readdata             (ram_s1_agent_m0_readdata),                         //                .readdata
		.m0_readdatavalid        (ram_s1_agent_m0_readdatavalid),                    //                .readdatavalid
		.m0_read                 (ram_s1_agent_m0_read),                             //                .read
		.m0_waitrequest          (ram_s1_agent_m0_waitrequest),                      //                .waitrequest
		.m0_writedata            (ram_s1_agent_m0_writedata),                        //                .writedata
		.m0_write                (ram_s1_agent_m0_write),                            //                .write
		.rp_endofpacket          (ram_s1_agent_rp_endofpacket),                      //              rp.endofpacket
		.rp_ready                (ram_s1_agent_rp_ready),                            //                .ready
		.rp_valid                (ram_s1_agent_rp_valid),                            //                .valid
		.rp_data                 (ram_s1_agent_rp_data),                             //                .data
		.rp_startofpacket        (ram_s1_agent_rp_startofpacket),                    //                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                                //              cp.ready
		.cp_valid                (cmd_mux_src_valid),                                //                .valid
		.cp_data                 (cmd_mux_src_data),                                 //                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                        //                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                          //                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                              //                .channel
		.rf_sink_ready           (ram_s1_agent_rsp_fifo_out_ready),                  //         rf_sink.ready
		.rf_sink_valid           (ram_s1_agent_rsp_fifo_out_valid),                  //                .valid
		.rf_sink_startofpacket   (ram_s1_agent_rsp_fifo_out_startofpacket),          //                .startofpacket
		.rf_sink_endofpacket     (ram_s1_agent_rsp_fifo_out_endofpacket),            //                .endofpacket
		.rf_sink_data            (ram_s1_agent_rsp_fifo_out_data),                   //                .data
		.rf_source_ready         (ram_s1_agent_rf_source_ready),                     //       rf_source.ready
		.rf_source_valid         (ram_s1_agent_rf_source_valid),                     //                .valid
		.rf_source_startofpacket (ram_s1_agent_rf_source_startofpacket),             //                .startofpacket
		.rf_source_endofpacket   (ram_s1_agent_rf_source_endofpacket),               //                .endofpacket
		.rf_source_data          (ram_s1_agent_rf_source_data),                      //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                    //                .error
		.rdata_fifo_src_ready    (ram_s1_agent_rdata_fifo_src_ready),                //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ram_s1_agent_rdata_fifo_src_valid),                //                .valid
		.rdata_fifo_src_data     (ram_s1_agent_rdata_fifo_src_data),                 //                .data
		.m0_response             (2'b00),                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (130),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ram_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                    //       clk.clk
		.reset             (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (ram_s1_agent_rf_source_data),                      //        in.data
		.in_valid          (ram_s1_agent_rf_source_valid),                     //          .valid
		.in_ready          (ram_s1_agent_rf_source_ready),                     //          .ready
		.in_startofpacket  (ram_s1_agent_rf_source_startofpacket),             //          .startofpacket
		.in_endofpacket    (ram_s1_agent_rf_source_endofpacket),               //          .endofpacket
		.out_data          (ram_s1_agent_rsp_fifo_out_data),                   //       out.data
		.out_valid         (ram_s1_agent_rsp_fifo_out_valid),                  //          .valid
		.out_ready         (ram_s1_agent_rsp_fifo_out_ready),                  //          .ready
		.out_startofpacket (ram_s1_agent_rsp_fifo_out_startofpacket),          //          .startofpacket
		.out_endofpacket   (ram_s1_agent_rsp_fifo_out_endofpacket),            //          .endofpacket
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ram_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                    //       clk.clk
		.reset             (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (ram_s1_agent_rdata_fifo_src_data),                 //        in.data
		.in_valid          (ram_s1_agent_rdata_fifo_src_valid),                //          .valid
		.in_ready          (ram_s1_agent_rdata_fifo_src_ready),                //          .ready
		.out_data          (ram_s1_agent_rdata_fifo_out_data),                 //       out.data
		.out_valid         (ram_s1_agent_rdata_fifo_out_valid),                //          .valid
		.out_ready         (ram_s1_agent_rdata_fifo_out_ready),                //          .ready
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_startofpacket  (1'b0),                                             // (terminated)
		.in_endofpacket    (1'b0),                                             // (terminated)
		.out_startofpacket (),                                                 // (terminated)
		.out_endofpacket   (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (128),
		.PKT_ORI_BURST_SIZE_L      (126),
		.PKT_RESPONSE_STATUS_H     (125),
		.PKT_RESPONSE_STATUS_L     (124),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_TRANS_LOCK            (70),
		.PKT_BEGIN_BURST           (95),
		.PKT_PROTECTION_H          (119),
		.PKT_PROTECTION_L          (117),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_POSTED          (67),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (100),
		.PKT_SRC_ID_L              (97),
		.PKT_DEST_ID_H             (104),
		.PKT_DEST_ID_L             (101),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (129),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) timer_s1_agent (
		.clk                     (clk_0_clk_clk),                                    //             clk.clk
		.reset                   (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (timer_s1_agent_m0_address),                        //              m0.address
		.m0_burstcount           (timer_s1_agent_m0_burstcount),                     //                .burstcount
		.m0_byteenable           (timer_s1_agent_m0_byteenable),                     //                .byteenable
		.m0_debugaccess          (timer_s1_agent_m0_debugaccess),                    //                .debugaccess
		.m0_lock                 (timer_s1_agent_m0_lock),                           //                .lock
		.m0_readdata             (timer_s1_agent_m0_readdata),                       //                .readdata
		.m0_readdatavalid        (timer_s1_agent_m0_readdatavalid),                  //                .readdatavalid
		.m0_read                 (timer_s1_agent_m0_read),                           //                .read
		.m0_waitrequest          (timer_s1_agent_m0_waitrequest),                    //                .waitrequest
		.m0_writedata            (timer_s1_agent_m0_writedata),                      //                .writedata
		.m0_write                (timer_s1_agent_m0_write),                          //                .write
		.rp_endofpacket          (timer_s1_agent_rp_endofpacket),                    //              rp.endofpacket
		.rp_ready                (timer_s1_agent_rp_ready),                          //                .ready
		.rp_valid                (timer_s1_agent_rp_valid),                          //                .valid
		.rp_data                 (timer_s1_agent_rp_data),                           //                .data
		.rp_startofpacket        (timer_s1_agent_rp_startofpacket),                  //                .startofpacket
		.cp_ready                (cmd_mux_001_src_ready),                            //              cp.ready
		.cp_valid                (cmd_mux_001_src_valid),                            //                .valid
		.cp_data                 (cmd_mux_001_src_data),                             //                .data
		.cp_startofpacket        (cmd_mux_001_src_startofpacket),                    //                .startofpacket
		.cp_endofpacket          (cmd_mux_001_src_endofpacket),                      //                .endofpacket
		.cp_channel              (cmd_mux_001_src_channel),                          //                .channel
		.rf_sink_ready           (timer_s1_agent_rsp_fifo_out_ready),                //         rf_sink.ready
		.rf_sink_valid           (timer_s1_agent_rsp_fifo_out_valid),                //                .valid
		.rf_sink_startofpacket   (timer_s1_agent_rsp_fifo_out_startofpacket),        //                .startofpacket
		.rf_sink_endofpacket     (timer_s1_agent_rsp_fifo_out_endofpacket),          //                .endofpacket
		.rf_sink_data            (timer_s1_agent_rsp_fifo_out_data),                 //                .data
		.rf_source_ready         (timer_s1_agent_rf_source_ready),                   //       rf_source.ready
		.rf_source_valid         (timer_s1_agent_rf_source_valid),                   //                .valid
		.rf_source_startofpacket (timer_s1_agent_rf_source_startofpacket),           //                .startofpacket
		.rf_source_endofpacket   (timer_s1_agent_rf_source_endofpacket),             //                .endofpacket
		.rf_source_data          (timer_s1_agent_rf_source_data),                    //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                 //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                //                .error
		.rdata_fifo_src_ready    (timer_s1_agent_rdata_fifo_src_ready),              //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (timer_s1_agent_rdata_fifo_src_valid),              //                .valid
		.rdata_fifo_src_data     (timer_s1_agent_rdata_fifo_src_data),               //                .data
		.m0_response             (2'b00),                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (130),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) timer_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                    //       clk.clk
		.reset             (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (timer_s1_agent_rf_source_data),                    //        in.data
		.in_valid          (timer_s1_agent_rf_source_valid),                   //          .valid
		.in_ready          (timer_s1_agent_rf_source_ready),                   //          .ready
		.in_startofpacket  (timer_s1_agent_rf_source_startofpacket),           //          .startofpacket
		.in_endofpacket    (timer_s1_agent_rf_source_endofpacket),             //          .endofpacket
		.out_data          (timer_s1_agent_rsp_fifo_out_data),                 //       out.data
		.out_valid         (timer_s1_agent_rsp_fifo_out_valid),                //          .valid
		.out_ready         (timer_s1_agent_rsp_fifo_out_ready),                //          .ready
		.out_startofpacket (timer_s1_agent_rsp_fifo_out_startofpacket),        //          .startofpacket
		.out_endofpacket   (timer_s1_agent_rsp_fifo_out_endofpacket),          //          .endofpacket
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) timer_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                    //       clk.clk
		.reset             (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (timer_s1_agent_rdata_fifo_src_data),               //        in.data
		.in_valid          (timer_s1_agent_rdata_fifo_src_valid),              //          .valid
		.in_ready          (timer_s1_agent_rdata_fifo_src_ready),              //          .ready
		.out_data          (timer_s1_agent_rdata_fifo_out_data),               //       out.data
		.out_valid         (timer_s1_agent_rdata_fifo_out_valid),              //          .valid
		.out_ready         (timer_s1_agent_rdata_fifo_out_ready),              //          .ready
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_startofpacket  (1'b0),                                             // (terminated)
		.in_endofpacket    (1'b0),                                             // (terminated)
		.out_startofpacket (),                                                 // (terminated)
		.out_endofpacket   (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (110),
		.PKT_ORI_BURST_SIZE_L      (108),
		.PKT_RESPONSE_STATUS_H     (107),
		.PKT_RESPONSE_STATUS_L     (106),
		.PKT_BURST_SIZE_H          (72),
		.PKT_BURST_SIZE_L          (70),
		.PKT_TRANS_LOCK            (52),
		.PKT_BEGIN_BURST           (77),
		.PKT_PROTECTION_H          (101),
		.PKT_PROTECTION_L          (99),
		.PKT_BURSTWRAP_H           (69),
		.PKT_BURSTWRAP_L           (62),
		.PKT_BYTE_CNT_H            (61),
		.PKT_BYTE_CNT_L            (54),
		.PKT_ADDR_H                (47),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (48),
		.PKT_TRANS_POSTED          (49),
		.PKT_TRANS_WRITE           (50),
		.PKT_TRANS_READ            (51),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (82),
		.PKT_SRC_ID_L              (79),
		.PKT_DEST_ID_H             (86),
		.PKT_DEST_ID_L             (83),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (111),
		.AVS_BURSTCOUNT_W          (2),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sdram_s1_agent (
		.clk                     (clk_0_clk_clk),                                    //             clk.clk
		.reset                   (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (sdram_s1_agent_m0_address),                        //              m0.address
		.m0_burstcount           (sdram_s1_agent_m0_burstcount),                     //                .burstcount
		.m0_byteenable           (sdram_s1_agent_m0_byteenable),                     //                .byteenable
		.m0_debugaccess          (sdram_s1_agent_m0_debugaccess),                    //                .debugaccess
		.m0_lock                 (sdram_s1_agent_m0_lock),                           //                .lock
		.m0_readdata             (sdram_s1_agent_m0_readdata),                       //                .readdata
		.m0_readdatavalid        (sdram_s1_agent_m0_readdatavalid),                  //                .readdatavalid
		.m0_read                 (sdram_s1_agent_m0_read),                           //                .read
		.m0_waitrequest          (sdram_s1_agent_m0_waitrequest),                    //                .waitrequest
		.m0_writedata            (sdram_s1_agent_m0_writedata),                      //                .writedata
		.m0_write                (sdram_s1_agent_m0_write),                          //                .write
		.rp_endofpacket          (sdram_s1_agent_rp_endofpacket),                    //              rp.endofpacket
		.rp_ready                (sdram_s1_agent_rp_ready),                          //                .ready
		.rp_valid                (sdram_s1_agent_rp_valid),                          //                .valid
		.rp_data                 (sdram_s1_agent_rp_data),                           //                .data
		.rp_startofpacket        (sdram_s1_agent_rp_startofpacket),                  //                .startofpacket
		.cp_ready                (sdram_s1_burst_adapter_source0_ready),             //              cp.ready
		.cp_valid                (sdram_s1_burst_adapter_source0_valid),             //                .valid
		.cp_data                 (sdram_s1_burst_adapter_source0_data),              //                .data
		.cp_startofpacket        (sdram_s1_burst_adapter_source0_startofpacket),     //                .startofpacket
		.cp_endofpacket          (sdram_s1_burst_adapter_source0_endofpacket),       //                .endofpacket
		.cp_channel              (sdram_s1_burst_adapter_source0_channel),           //                .channel
		.rf_sink_ready           (sdram_s1_agent_rsp_fifo_out_ready),                //         rf_sink.ready
		.rf_sink_valid           (sdram_s1_agent_rsp_fifo_out_valid),                //                .valid
		.rf_sink_startofpacket   (sdram_s1_agent_rsp_fifo_out_startofpacket),        //                .startofpacket
		.rf_sink_endofpacket     (sdram_s1_agent_rsp_fifo_out_endofpacket),          //                .endofpacket
		.rf_sink_data            (sdram_s1_agent_rsp_fifo_out_data),                 //                .data
		.rf_source_ready         (sdram_s1_agent_rf_source_ready),                   //       rf_source.ready
		.rf_source_valid         (sdram_s1_agent_rf_source_valid),                   //                .valid
		.rf_source_startofpacket (sdram_s1_agent_rf_source_startofpacket),           //                .startofpacket
		.rf_source_endofpacket   (sdram_s1_agent_rf_source_endofpacket),             //                .endofpacket
		.rf_source_data          (sdram_s1_agent_rf_source_data),                    //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                 //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                //                .error
		.rdata_fifo_src_ready    (sdram_s1_agent_rdata_fifo_src_ready),              //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sdram_s1_agent_rdata_fifo_src_valid),              //                .valid
		.rdata_fifo_src_data     (sdram_s1_agent_rdata_fifo_src_data),               //                .data
		.m0_response             (2'b00),                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (112),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sdram_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                    //       clk.clk
		.reset             (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sdram_s1_agent_rf_source_data),                    //        in.data
		.in_valid          (sdram_s1_agent_rf_source_valid),                   //          .valid
		.in_ready          (sdram_s1_agent_rf_source_ready),                   //          .ready
		.in_startofpacket  (sdram_s1_agent_rf_source_startofpacket),           //          .startofpacket
		.in_endofpacket    (sdram_s1_agent_rf_source_endofpacket),             //          .endofpacket
		.out_data          (sdram_s1_agent_rsp_fifo_out_data),                 //       out.data
		.out_valid         (sdram_s1_agent_rsp_fifo_out_valid),                //          .valid
		.out_ready         (sdram_s1_agent_rsp_fifo_out_ready),                //          .ready
		.out_startofpacket (sdram_s1_agent_rsp_fifo_out_startofpacket),        //          .startofpacket
		.out_endofpacket   (sdram_s1_agent_rsp_fifo_out_endofpacket),          //          .endofpacket
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (18),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sdram_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                    //       clk.clk
		.reset             (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sdram_s1_agent_rdata_fifo_src_data),               //        in.data
		.in_valid          (sdram_s1_agent_rdata_fifo_src_valid),              //          .valid
		.in_ready          (sdram_s1_agent_rdata_fifo_src_ready),              //          .ready
		.out_data          (sdram_s1_agent_rdata_fifo_out_data),               //       out.data
		.out_valid         (sdram_s1_agent_rdata_fifo_out_valid),              //          .valid
		.out_ready         (sdram_s1_agent_rdata_fifo_out_ready),              //          .ready
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_startofpacket  (1'b0),                                             // (terminated)
		.in_endofpacket    (1'b0),                                             // (terminated)
		.out_startofpacket (),                                                 // (terminated)
		.out_endofpacket   (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (128),
		.PKT_ORI_BURST_SIZE_L      (126),
		.PKT_RESPONSE_STATUS_H     (125),
		.PKT_RESPONSE_STATUS_L     (124),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_TRANS_LOCK            (70),
		.PKT_BEGIN_BURST           (95),
		.PKT_PROTECTION_H          (119),
		.PKT_PROTECTION_L          (117),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_POSTED          (67),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (100),
		.PKT_SRC_ID_L              (97),
		.PKT_DEST_ID_H             (104),
		.PKT_DEST_ID_L             (101),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (129),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sw_s1_agent (
		.clk                     (clk_0_clk_clk),                                    //             clk.clk
		.reset                   (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (sw_s1_agent_m0_address),                           //              m0.address
		.m0_burstcount           (sw_s1_agent_m0_burstcount),                        //                .burstcount
		.m0_byteenable           (sw_s1_agent_m0_byteenable),                        //                .byteenable
		.m0_debugaccess          (sw_s1_agent_m0_debugaccess),                       //                .debugaccess
		.m0_lock                 (sw_s1_agent_m0_lock),                              //                .lock
		.m0_readdata             (sw_s1_agent_m0_readdata),                          //                .readdata
		.m0_readdatavalid        (sw_s1_agent_m0_readdatavalid),                     //                .readdatavalid
		.m0_read                 (sw_s1_agent_m0_read),                              //                .read
		.m0_waitrequest          (sw_s1_agent_m0_waitrequest),                       //                .waitrequest
		.m0_writedata            (sw_s1_agent_m0_writedata),                         //                .writedata
		.m0_write                (sw_s1_agent_m0_write),                             //                .write
		.rp_endofpacket          (sw_s1_agent_rp_endofpacket),                       //              rp.endofpacket
		.rp_ready                (sw_s1_agent_rp_ready),                             //                .ready
		.rp_valid                (sw_s1_agent_rp_valid),                             //                .valid
		.rp_data                 (sw_s1_agent_rp_data),                              //                .data
		.rp_startofpacket        (sw_s1_agent_rp_startofpacket),                     //                .startofpacket
		.cp_ready                (sw_s1_burst_adapter_source0_ready),                //              cp.ready
		.cp_valid                (sw_s1_burst_adapter_source0_valid),                //                .valid
		.cp_data                 (sw_s1_burst_adapter_source0_data),                 //                .data
		.cp_startofpacket        (sw_s1_burst_adapter_source0_startofpacket),        //                .startofpacket
		.cp_endofpacket          (sw_s1_burst_adapter_source0_endofpacket),          //                .endofpacket
		.cp_channel              (sw_s1_burst_adapter_source0_channel),              //                .channel
		.rf_sink_ready           (sw_s1_agent_rsp_fifo_out_ready),                   //         rf_sink.ready
		.rf_sink_valid           (sw_s1_agent_rsp_fifo_out_valid),                   //                .valid
		.rf_sink_startofpacket   (sw_s1_agent_rsp_fifo_out_startofpacket),           //                .startofpacket
		.rf_sink_endofpacket     (sw_s1_agent_rsp_fifo_out_endofpacket),             //                .endofpacket
		.rf_sink_data            (sw_s1_agent_rsp_fifo_out_data),                    //                .data
		.rf_source_ready         (sw_s1_agent_rf_source_ready),                      //       rf_source.ready
		.rf_source_valid         (sw_s1_agent_rf_source_valid),                      //                .valid
		.rf_source_startofpacket (sw_s1_agent_rf_source_startofpacket),              //                .startofpacket
		.rf_source_endofpacket   (sw_s1_agent_rf_source_endofpacket),                //                .endofpacket
		.rf_source_data          (sw_s1_agent_rf_source_data),                       //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),                // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),                //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),                 //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),                //                .error
		.rdata_fifo_src_ready    (sw_s1_agent_rdata_fifo_src_ready),                 //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sw_s1_agent_rdata_fifo_src_valid),                 //                .valid
		.rdata_fifo_src_data     (sw_s1_agent_rdata_fifo_src_data),                  //                .data
		.m0_response             (2'b00),                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (130),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sw_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                    //       clk.clk
		.reset             (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sw_s1_agent_rf_source_data),                       //        in.data
		.in_valid          (sw_s1_agent_rf_source_valid),                      //          .valid
		.in_ready          (sw_s1_agent_rf_source_ready),                      //          .ready
		.in_startofpacket  (sw_s1_agent_rf_source_startofpacket),              //          .startofpacket
		.in_endofpacket    (sw_s1_agent_rf_source_endofpacket),                //          .endofpacket
		.out_data          (sw_s1_agent_rsp_fifo_out_data),                    //       out.data
		.out_valid         (sw_s1_agent_rsp_fifo_out_valid),                   //          .valid
		.out_ready         (sw_s1_agent_rsp_fifo_out_ready),                   //          .ready
		.out_startofpacket (sw_s1_agent_rsp_fifo_out_startofpacket),           //          .startofpacket
		.out_endofpacket   (sw_s1_agent_rsp_fifo_out_endofpacket),             //          .endofpacket
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sw_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                    //       clk.clk
		.reset             (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sw_s1_agent_rdata_fifo_src_data),                  //        in.data
		.in_valid          (sw_s1_agent_rdata_fifo_src_valid),                 //          .valid
		.in_ready          (sw_s1_agent_rdata_fifo_src_ready),                 //          .ready
		.out_data          (sw_s1_agent_rdata_fifo_out_data),                  //       out.data
		.out_valid         (sw_s1_agent_rdata_fifo_out_valid),                 //          .valid
		.out_ready         (sw_s1_agent_rdata_fifo_out_ready),                 //          .ready
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_startofpacket  (1'b0),                                             // (terminated)
		.in_endofpacket    (1'b0),                                             // (terminated)
		.out_startofpacket (),                                                 // (terminated)
		.out_endofpacket   (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (128),
		.PKT_ORI_BURST_SIZE_L      (126),
		.PKT_RESPONSE_STATUS_H     (125),
		.PKT_RESPONSE_STATUS_L     (124),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_TRANS_LOCK            (70),
		.PKT_BEGIN_BURST           (95),
		.PKT_PROTECTION_H          (119),
		.PKT_PROTECTION_L          (117),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_POSTED          (67),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (100),
		.PKT_SRC_ID_L              (97),
		.PKT_DEST_ID_H             (104),
		.PKT_DEST_ID_L             (101),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (129),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) seg6_s1_agent (
		.clk                     (clk_0_clk_clk),                                    //             clk.clk
		.reset                   (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (seg6_s1_agent_m0_address),                         //              m0.address
		.m0_burstcount           (seg6_s1_agent_m0_burstcount),                      //                .burstcount
		.m0_byteenable           (seg6_s1_agent_m0_byteenable),                      //                .byteenable
		.m0_debugaccess          (seg6_s1_agent_m0_debugaccess),                     //                .debugaccess
		.m0_lock                 (seg6_s1_agent_m0_lock),                            //                .lock
		.m0_readdata             (seg6_s1_agent_m0_readdata),                        //                .readdata
		.m0_readdatavalid        (seg6_s1_agent_m0_readdatavalid),                   //                .readdatavalid
		.m0_read                 (seg6_s1_agent_m0_read),                            //                .read
		.m0_waitrequest          (seg6_s1_agent_m0_waitrequest),                     //                .waitrequest
		.m0_writedata            (seg6_s1_agent_m0_writedata),                       //                .writedata
		.m0_write                (seg6_s1_agent_m0_write),                           //                .write
		.rp_endofpacket          (seg6_s1_agent_rp_endofpacket),                     //              rp.endofpacket
		.rp_ready                (seg6_s1_agent_rp_ready),                           //                .ready
		.rp_valid                (seg6_s1_agent_rp_valid),                           //                .valid
		.rp_data                 (seg6_s1_agent_rp_data),                            //                .data
		.rp_startofpacket        (seg6_s1_agent_rp_startofpacket),                   //                .startofpacket
		.cp_ready                (seg6_s1_burst_adapter_source0_ready),              //              cp.ready
		.cp_valid                (seg6_s1_burst_adapter_source0_valid),              //                .valid
		.cp_data                 (seg6_s1_burst_adapter_source0_data),               //                .data
		.cp_startofpacket        (seg6_s1_burst_adapter_source0_startofpacket),      //                .startofpacket
		.cp_endofpacket          (seg6_s1_burst_adapter_source0_endofpacket),        //                .endofpacket
		.cp_channel              (seg6_s1_burst_adapter_source0_channel),            //                .channel
		.rf_sink_ready           (seg6_s1_agent_rsp_fifo_out_ready),                 //         rf_sink.ready
		.rf_sink_valid           (seg6_s1_agent_rsp_fifo_out_valid),                 //                .valid
		.rf_sink_startofpacket   (seg6_s1_agent_rsp_fifo_out_startofpacket),         //                .startofpacket
		.rf_sink_endofpacket     (seg6_s1_agent_rsp_fifo_out_endofpacket),           //                .endofpacket
		.rf_sink_data            (seg6_s1_agent_rsp_fifo_out_data),                  //                .data
		.rf_source_ready         (seg6_s1_agent_rf_source_ready),                    //       rf_source.ready
		.rf_source_valid         (seg6_s1_agent_rf_source_valid),                    //                .valid
		.rf_source_startofpacket (seg6_s1_agent_rf_source_startofpacket),            //                .startofpacket
		.rf_source_endofpacket   (seg6_s1_agent_rf_source_endofpacket),              //                .endofpacket
		.rf_source_data          (seg6_s1_agent_rf_source_data),                     //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),                // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),                //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),                 //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),                //                .error
		.rdata_fifo_src_ready    (seg6_s1_agent_rdata_fifo_src_ready),               //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (seg6_s1_agent_rdata_fifo_src_valid),               //                .valid
		.rdata_fifo_src_data     (seg6_s1_agent_rdata_fifo_src_data),                //                .data
		.m0_response             (2'b00),                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (130),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) seg6_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                    //       clk.clk
		.reset             (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (seg6_s1_agent_rf_source_data),                     //        in.data
		.in_valid          (seg6_s1_agent_rf_source_valid),                    //          .valid
		.in_ready          (seg6_s1_agent_rf_source_ready),                    //          .ready
		.in_startofpacket  (seg6_s1_agent_rf_source_startofpacket),            //          .startofpacket
		.in_endofpacket    (seg6_s1_agent_rf_source_endofpacket),              //          .endofpacket
		.out_data          (seg6_s1_agent_rsp_fifo_out_data),                  //       out.data
		.out_valid         (seg6_s1_agent_rsp_fifo_out_valid),                 //          .valid
		.out_ready         (seg6_s1_agent_rsp_fifo_out_ready),                 //          .ready
		.out_startofpacket (seg6_s1_agent_rsp_fifo_out_startofpacket),         //          .startofpacket
		.out_endofpacket   (seg6_s1_agent_rsp_fifo_out_endofpacket),           //          .endofpacket
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) seg6_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                    //       clk.clk
		.reset             (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (seg6_s1_agent_rdata_fifo_src_data),                //        in.data
		.in_valid          (seg6_s1_agent_rdata_fifo_src_valid),               //          .valid
		.in_ready          (seg6_s1_agent_rdata_fifo_src_ready),               //          .ready
		.out_data          (seg6_s1_agent_rdata_fifo_out_data),                //       out.data
		.out_valid         (seg6_s1_agent_rdata_fifo_out_valid),               //          .valid
		.out_ready         (seg6_s1_agent_rdata_fifo_out_ready),               //          .ready
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_startofpacket  (1'b0),                                             // (terminated)
		.in_endofpacket    (1'b0),                                             // (terminated)
		.out_startofpacket (),                                                 // (terminated)
		.out_endofpacket   (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (128),
		.PKT_ORI_BURST_SIZE_L      (126),
		.PKT_RESPONSE_STATUS_H     (125),
		.PKT_RESPONSE_STATUS_L     (124),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_TRANS_LOCK            (70),
		.PKT_BEGIN_BURST           (95),
		.PKT_PROTECTION_H          (119),
		.PKT_PROTECTION_L          (117),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_POSTED          (67),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (100),
		.PKT_SRC_ID_L              (97),
		.PKT_DEST_ID_H             (104),
		.PKT_DEST_ID_L             (101),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (129),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) seg5_s1_agent (
		.clk                     (clk_0_clk_clk),                                    //             clk.clk
		.reset                   (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (seg5_s1_agent_m0_address),                         //              m0.address
		.m0_burstcount           (seg5_s1_agent_m0_burstcount),                      //                .burstcount
		.m0_byteenable           (seg5_s1_agent_m0_byteenable),                      //                .byteenable
		.m0_debugaccess          (seg5_s1_agent_m0_debugaccess),                     //                .debugaccess
		.m0_lock                 (seg5_s1_agent_m0_lock),                            //                .lock
		.m0_readdata             (seg5_s1_agent_m0_readdata),                        //                .readdata
		.m0_readdatavalid        (seg5_s1_agent_m0_readdatavalid),                   //                .readdatavalid
		.m0_read                 (seg5_s1_agent_m0_read),                            //                .read
		.m0_waitrequest          (seg5_s1_agent_m0_waitrequest),                     //                .waitrequest
		.m0_writedata            (seg5_s1_agent_m0_writedata),                       //                .writedata
		.m0_write                (seg5_s1_agent_m0_write),                           //                .write
		.rp_endofpacket          (seg5_s1_agent_rp_endofpacket),                     //              rp.endofpacket
		.rp_ready                (seg5_s1_agent_rp_ready),                           //                .ready
		.rp_valid                (seg5_s1_agent_rp_valid),                           //                .valid
		.rp_data                 (seg5_s1_agent_rp_data),                            //                .data
		.rp_startofpacket        (seg5_s1_agent_rp_startofpacket),                   //                .startofpacket
		.cp_ready                (seg5_s1_burst_adapter_source0_ready),              //              cp.ready
		.cp_valid                (seg5_s1_burst_adapter_source0_valid),              //                .valid
		.cp_data                 (seg5_s1_burst_adapter_source0_data),               //                .data
		.cp_startofpacket        (seg5_s1_burst_adapter_source0_startofpacket),      //                .startofpacket
		.cp_endofpacket          (seg5_s1_burst_adapter_source0_endofpacket),        //                .endofpacket
		.cp_channel              (seg5_s1_burst_adapter_source0_channel),            //                .channel
		.rf_sink_ready           (seg5_s1_agent_rsp_fifo_out_ready),                 //         rf_sink.ready
		.rf_sink_valid           (seg5_s1_agent_rsp_fifo_out_valid),                 //                .valid
		.rf_sink_startofpacket   (seg5_s1_agent_rsp_fifo_out_startofpacket),         //                .startofpacket
		.rf_sink_endofpacket     (seg5_s1_agent_rsp_fifo_out_endofpacket),           //                .endofpacket
		.rf_sink_data            (seg5_s1_agent_rsp_fifo_out_data),                  //                .data
		.rf_source_ready         (seg5_s1_agent_rf_source_ready),                    //       rf_source.ready
		.rf_source_valid         (seg5_s1_agent_rf_source_valid),                    //                .valid
		.rf_source_startofpacket (seg5_s1_agent_rf_source_startofpacket),            //                .startofpacket
		.rf_source_endofpacket   (seg5_s1_agent_rf_source_endofpacket),              //                .endofpacket
		.rf_source_data          (seg5_s1_agent_rf_source_data),                     //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_005_out_0_ready),                // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_005_out_0_valid),                //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_005_out_0_data),                 //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_005_out_0_error),                //                .error
		.rdata_fifo_src_ready    (seg5_s1_agent_rdata_fifo_src_ready),               //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (seg5_s1_agent_rdata_fifo_src_valid),               //                .valid
		.rdata_fifo_src_data     (seg5_s1_agent_rdata_fifo_src_data),                //                .data
		.m0_response             (2'b00),                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (130),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) seg5_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                    //       clk.clk
		.reset             (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (seg5_s1_agent_rf_source_data),                     //        in.data
		.in_valid          (seg5_s1_agent_rf_source_valid),                    //          .valid
		.in_ready          (seg5_s1_agent_rf_source_ready),                    //          .ready
		.in_startofpacket  (seg5_s1_agent_rf_source_startofpacket),            //          .startofpacket
		.in_endofpacket    (seg5_s1_agent_rf_source_endofpacket),              //          .endofpacket
		.out_data          (seg5_s1_agent_rsp_fifo_out_data),                  //       out.data
		.out_valid         (seg5_s1_agent_rsp_fifo_out_valid),                 //          .valid
		.out_ready         (seg5_s1_agent_rsp_fifo_out_ready),                 //          .ready
		.out_startofpacket (seg5_s1_agent_rsp_fifo_out_startofpacket),         //          .startofpacket
		.out_endofpacket   (seg5_s1_agent_rsp_fifo_out_endofpacket),           //          .endofpacket
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) seg5_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                    //       clk.clk
		.reset             (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (seg5_s1_agent_rdata_fifo_src_data),                //        in.data
		.in_valid          (seg5_s1_agent_rdata_fifo_src_valid),               //          .valid
		.in_ready          (seg5_s1_agent_rdata_fifo_src_ready),               //          .ready
		.out_data          (seg5_s1_agent_rdata_fifo_out_data),                //       out.data
		.out_valid         (seg5_s1_agent_rdata_fifo_out_valid),               //          .valid
		.out_ready         (seg5_s1_agent_rdata_fifo_out_ready),               //          .ready
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_startofpacket  (1'b0),                                             // (terminated)
		.in_endofpacket    (1'b0),                                             // (terminated)
		.out_startofpacket (),                                                 // (terminated)
		.out_endofpacket   (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (128),
		.PKT_ORI_BURST_SIZE_L      (126),
		.PKT_RESPONSE_STATUS_H     (125),
		.PKT_RESPONSE_STATUS_L     (124),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_TRANS_LOCK            (70),
		.PKT_BEGIN_BURST           (95),
		.PKT_PROTECTION_H          (119),
		.PKT_PROTECTION_L          (117),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_POSTED          (67),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (100),
		.PKT_SRC_ID_L              (97),
		.PKT_DEST_ID_H             (104),
		.PKT_DEST_ID_L             (101),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (129),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) seg4_s1_agent (
		.clk                     (clk_0_clk_clk),                                    //             clk.clk
		.reset                   (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (seg4_s1_agent_m0_address),                         //              m0.address
		.m0_burstcount           (seg4_s1_agent_m0_burstcount),                      //                .burstcount
		.m0_byteenable           (seg4_s1_agent_m0_byteenable),                      //                .byteenable
		.m0_debugaccess          (seg4_s1_agent_m0_debugaccess),                     //                .debugaccess
		.m0_lock                 (seg4_s1_agent_m0_lock),                            //                .lock
		.m0_readdata             (seg4_s1_agent_m0_readdata),                        //                .readdata
		.m0_readdatavalid        (seg4_s1_agent_m0_readdatavalid),                   //                .readdatavalid
		.m0_read                 (seg4_s1_agent_m0_read),                            //                .read
		.m0_waitrequest          (seg4_s1_agent_m0_waitrequest),                     //                .waitrequest
		.m0_writedata            (seg4_s1_agent_m0_writedata),                       //                .writedata
		.m0_write                (seg4_s1_agent_m0_write),                           //                .write
		.rp_endofpacket          (seg4_s1_agent_rp_endofpacket),                     //              rp.endofpacket
		.rp_ready                (seg4_s1_agent_rp_ready),                           //                .ready
		.rp_valid                (seg4_s1_agent_rp_valid),                           //                .valid
		.rp_data                 (seg4_s1_agent_rp_data),                            //                .data
		.rp_startofpacket        (seg4_s1_agent_rp_startofpacket),                   //                .startofpacket
		.cp_ready                (seg4_s1_burst_adapter_source0_ready),              //              cp.ready
		.cp_valid                (seg4_s1_burst_adapter_source0_valid),              //                .valid
		.cp_data                 (seg4_s1_burst_adapter_source0_data),               //                .data
		.cp_startofpacket        (seg4_s1_burst_adapter_source0_startofpacket),      //                .startofpacket
		.cp_endofpacket          (seg4_s1_burst_adapter_source0_endofpacket),        //                .endofpacket
		.cp_channel              (seg4_s1_burst_adapter_source0_channel),            //                .channel
		.rf_sink_ready           (seg4_s1_agent_rsp_fifo_out_ready),                 //         rf_sink.ready
		.rf_sink_valid           (seg4_s1_agent_rsp_fifo_out_valid),                 //                .valid
		.rf_sink_startofpacket   (seg4_s1_agent_rsp_fifo_out_startofpacket),         //                .startofpacket
		.rf_sink_endofpacket     (seg4_s1_agent_rsp_fifo_out_endofpacket),           //                .endofpacket
		.rf_sink_data            (seg4_s1_agent_rsp_fifo_out_data),                  //                .data
		.rf_source_ready         (seg4_s1_agent_rf_source_ready),                    //       rf_source.ready
		.rf_source_valid         (seg4_s1_agent_rf_source_valid),                    //                .valid
		.rf_source_startofpacket (seg4_s1_agent_rf_source_startofpacket),            //                .startofpacket
		.rf_source_endofpacket   (seg4_s1_agent_rf_source_endofpacket),              //                .endofpacket
		.rf_source_data          (seg4_s1_agent_rf_source_data),                     //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_006_out_0_ready),                // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_006_out_0_valid),                //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_006_out_0_data),                 //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_006_out_0_error),                //                .error
		.rdata_fifo_src_ready    (seg4_s1_agent_rdata_fifo_src_ready),               //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (seg4_s1_agent_rdata_fifo_src_valid),               //                .valid
		.rdata_fifo_src_data     (seg4_s1_agent_rdata_fifo_src_data),                //                .data
		.m0_response             (2'b00),                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (130),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) seg4_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                    //       clk.clk
		.reset             (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (seg4_s1_agent_rf_source_data),                     //        in.data
		.in_valid          (seg4_s1_agent_rf_source_valid),                    //          .valid
		.in_ready          (seg4_s1_agent_rf_source_ready),                    //          .ready
		.in_startofpacket  (seg4_s1_agent_rf_source_startofpacket),            //          .startofpacket
		.in_endofpacket    (seg4_s1_agent_rf_source_endofpacket),              //          .endofpacket
		.out_data          (seg4_s1_agent_rsp_fifo_out_data),                  //       out.data
		.out_valid         (seg4_s1_agent_rsp_fifo_out_valid),                 //          .valid
		.out_ready         (seg4_s1_agent_rsp_fifo_out_ready),                 //          .ready
		.out_startofpacket (seg4_s1_agent_rsp_fifo_out_startofpacket),         //          .startofpacket
		.out_endofpacket   (seg4_s1_agent_rsp_fifo_out_endofpacket),           //          .endofpacket
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) seg4_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                    //       clk.clk
		.reset             (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (seg4_s1_agent_rdata_fifo_src_data),                //        in.data
		.in_valid          (seg4_s1_agent_rdata_fifo_src_valid),               //          .valid
		.in_ready          (seg4_s1_agent_rdata_fifo_src_ready),               //          .ready
		.out_data          (seg4_s1_agent_rdata_fifo_out_data),                //       out.data
		.out_valid         (seg4_s1_agent_rdata_fifo_out_valid),               //          .valid
		.out_ready         (seg4_s1_agent_rdata_fifo_out_ready),               //          .ready
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_startofpacket  (1'b0),                                             // (terminated)
		.in_endofpacket    (1'b0),                                             // (terminated)
		.out_startofpacket (),                                                 // (terminated)
		.out_endofpacket   (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (128),
		.PKT_ORI_BURST_SIZE_L      (126),
		.PKT_RESPONSE_STATUS_H     (125),
		.PKT_RESPONSE_STATUS_L     (124),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_TRANS_LOCK            (70),
		.PKT_BEGIN_BURST           (95),
		.PKT_PROTECTION_H          (119),
		.PKT_PROTECTION_L          (117),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_POSTED          (67),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (100),
		.PKT_SRC_ID_L              (97),
		.PKT_DEST_ID_H             (104),
		.PKT_DEST_ID_L             (101),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (129),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) seg3_s1_agent (
		.clk                     (clk_0_clk_clk),                                    //             clk.clk
		.reset                   (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (seg3_s1_agent_m0_address),                         //              m0.address
		.m0_burstcount           (seg3_s1_agent_m0_burstcount),                      //                .burstcount
		.m0_byteenable           (seg3_s1_agent_m0_byteenable),                      //                .byteenable
		.m0_debugaccess          (seg3_s1_agent_m0_debugaccess),                     //                .debugaccess
		.m0_lock                 (seg3_s1_agent_m0_lock),                            //                .lock
		.m0_readdata             (seg3_s1_agent_m0_readdata),                        //                .readdata
		.m0_readdatavalid        (seg3_s1_agent_m0_readdatavalid),                   //                .readdatavalid
		.m0_read                 (seg3_s1_agent_m0_read),                            //                .read
		.m0_waitrequest          (seg3_s1_agent_m0_waitrequest),                     //                .waitrequest
		.m0_writedata            (seg3_s1_agent_m0_writedata),                       //                .writedata
		.m0_write                (seg3_s1_agent_m0_write),                           //                .write
		.rp_endofpacket          (seg3_s1_agent_rp_endofpacket),                     //              rp.endofpacket
		.rp_ready                (seg3_s1_agent_rp_ready),                           //                .ready
		.rp_valid                (seg3_s1_agent_rp_valid),                           //                .valid
		.rp_data                 (seg3_s1_agent_rp_data),                            //                .data
		.rp_startofpacket        (seg3_s1_agent_rp_startofpacket),                   //                .startofpacket
		.cp_ready                (seg3_s1_burst_adapter_source0_ready),              //              cp.ready
		.cp_valid                (seg3_s1_burst_adapter_source0_valid),              //                .valid
		.cp_data                 (seg3_s1_burst_adapter_source0_data),               //                .data
		.cp_startofpacket        (seg3_s1_burst_adapter_source0_startofpacket),      //                .startofpacket
		.cp_endofpacket          (seg3_s1_burst_adapter_source0_endofpacket),        //                .endofpacket
		.cp_channel              (seg3_s1_burst_adapter_source0_channel),            //                .channel
		.rf_sink_ready           (seg3_s1_agent_rsp_fifo_out_ready),                 //         rf_sink.ready
		.rf_sink_valid           (seg3_s1_agent_rsp_fifo_out_valid),                 //                .valid
		.rf_sink_startofpacket   (seg3_s1_agent_rsp_fifo_out_startofpacket),         //                .startofpacket
		.rf_sink_endofpacket     (seg3_s1_agent_rsp_fifo_out_endofpacket),           //                .endofpacket
		.rf_sink_data            (seg3_s1_agent_rsp_fifo_out_data),                  //                .data
		.rf_source_ready         (seg3_s1_agent_rf_source_ready),                    //       rf_source.ready
		.rf_source_valid         (seg3_s1_agent_rf_source_valid),                    //                .valid
		.rf_source_startofpacket (seg3_s1_agent_rf_source_startofpacket),            //                .startofpacket
		.rf_source_endofpacket   (seg3_s1_agent_rf_source_endofpacket),              //                .endofpacket
		.rf_source_data          (seg3_s1_agent_rf_source_data),                     //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_007_out_0_ready),                // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_007_out_0_valid),                //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_007_out_0_data),                 //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_007_out_0_error),                //                .error
		.rdata_fifo_src_ready    (seg3_s1_agent_rdata_fifo_src_ready),               //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (seg3_s1_agent_rdata_fifo_src_valid),               //                .valid
		.rdata_fifo_src_data     (seg3_s1_agent_rdata_fifo_src_data),                //                .data
		.m0_response             (2'b00),                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (130),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) seg3_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                    //       clk.clk
		.reset             (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (seg3_s1_agent_rf_source_data),                     //        in.data
		.in_valid          (seg3_s1_agent_rf_source_valid),                    //          .valid
		.in_ready          (seg3_s1_agent_rf_source_ready),                    //          .ready
		.in_startofpacket  (seg3_s1_agent_rf_source_startofpacket),            //          .startofpacket
		.in_endofpacket    (seg3_s1_agent_rf_source_endofpacket),              //          .endofpacket
		.out_data          (seg3_s1_agent_rsp_fifo_out_data),                  //       out.data
		.out_valid         (seg3_s1_agent_rsp_fifo_out_valid),                 //          .valid
		.out_ready         (seg3_s1_agent_rsp_fifo_out_ready),                 //          .ready
		.out_startofpacket (seg3_s1_agent_rsp_fifo_out_startofpacket),         //          .startofpacket
		.out_endofpacket   (seg3_s1_agent_rsp_fifo_out_endofpacket),           //          .endofpacket
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) seg3_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                    //       clk.clk
		.reset             (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (seg3_s1_agent_rdata_fifo_src_data),                //        in.data
		.in_valid          (seg3_s1_agent_rdata_fifo_src_valid),               //          .valid
		.in_ready          (seg3_s1_agent_rdata_fifo_src_ready),               //          .ready
		.out_data          (seg3_s1_agent_rdata_fifo_out_data),                //       out.data
		.out_valid         (seg3_s1_agent_rdata_fifo_out_valid),               //          .valid
		.out_ready         (seg3_s1_agent_rdata_fifo_out_ready),               //          .ready
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_startofpacket  (1'b0),                                             // (terminated)
		.in_endofpacket    (1'b0),                                             // (terminated)
		.out_startofpacket (),                                                 // (terminated)
		.out_endofpacket   (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (128),
		.PKT_ORI_BURST_SIZE_L      (126),
		.PKT_RESPONSE_STATUS_H     (125),
		.PKT_RESPONSE_STATUS_L     (124),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_TRANS_LOCK            (70),
		.PKT_BEGIN_BURST           (95),
		.PKT_PROTECTION_H          (119),
		.PKT_PROTECTION_L          (117),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_POSTED          (67),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (100),
		.PKT_SRC_ID_L              (97),
		.PKT_DEST_ID_H             (104),
		.PKT_DEST_ID_L             (101),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (129),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) seg2_s1_agent (
		.clk                     (clk_0_clk_clk),                                    //             clk.clk
		.reset                   (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (seg2_s1_agent_m0_address),                         //              m0.address
		.m0_burstcount           (seg2_s1_agent_m0_burstcount),                      //                .burstcount
		.m0_byteenable           (seg2_s1_agent_m0_byteenable),                      //                .byteenable
		.m0_debugaccess          (seg2_s1_agent_m0_debugaccess),                     //                .debugaccess
		.m0_lock                 (seg2_s1_agent_m0_lock),                            //                .lock
		.m0_readdata             (seg2_s1_agent_m0_readdata),                        //                .readdata
		.m0_readdatavalid        (seg2_s1_agent_m0_readdatavalid),                   //                .readdatavalid
		.m0_read                 (seg2_s1_agent_m0_read),                            //                .read
		.m0_waitrequest          (seg2_s1_agent_m0_waitrequest),                     //                .waitrequest
		.m0_writedata            (seg2_s1_agent_m0_writedata),                       //                .writedata
		.m0_write                (seg2_s1_agent_m0_write),                           //                .write
		.rp_endofpacket          (seg2_s1_agent_rp_endofpacket),                     //              rp.endofpacket
		.rp_ready                (seg2_s1_agent_rp_ready),                           //                .ready
		.rp_valid                (seg2_s1_agent_rp_valid),                           //                .valid
		.rp_data                 (seg2_s1_agent_rp_data),                            //                .data
		.rp_startofpacket        (seg2_s1_agent_rp_startofpacket),                   //                .startofpacket
		.cp_ready                (seg2_s1_burst_adapter_source0_ready),              //              cp.ready
		.cp_valid                (seg2_s1_burst_adapter_source0_valid),              //                .valid
		.cp_data                 (seg2_s1_burst_adapter_source0_data),               //                .data
		.cp_startofpacket        (seg2_s1_burst_adapter_source0_startofpacket),      //                .startofpacket
		.cp_endofpacket          (seg2_s1_burst_adapter_source0_endofpacket),        //                .endofpacket
		.cp_channel              (seg2_s1_burst_adapter_source0_channel),            //                .channel
		.rf_sink_ready           (seg2_s1_agent_rsp_fifo_out_ready),                 //         rf_sink.ready
		.rf_sink_valid           (seg2_s1_agent_rsp_fifo_out_valid),                 //                .valid
		.rf_sink_startofpacket   (seg2_s1_agent_rsp_fifo_out_startofpacket),         //                .startofpacket
		.rf_sink_endofpacket     (seg2_s1_agent_rsp_fifo_out_endofpacket),           //                .endofpacket
		.rf_sink_data            (seg2_s1_agent_rsp_fifo_out_data),                  //                .data
		.rf_source_ready         (seg2_s1_agent_rf_source_ready),                    //       rf_source.ready
		.rf_source_valid         (seg2_s1_agent_rf_source_valid),                    //                .valid
		.rf_source_startofpacket (seg2_s1_agent_rf_source_startofpacket),            //                .startofpacket
		.rf_source_endofpacket   (seg2_s1_agent_rf_source_endofpacket),              //                .endofpacket
		.rf_source_data          (seg2_s1_agent_rf_source_data),                     //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_008_out_0_ready),                // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_008_out_0_valid),                //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_008_out_0_data),                 //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_008_out_0_error),                //                .error
		.rdata_fifo_src_ready    (seg2_s1_agent_rdata_fifo_src_ready),               //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (seg2_s1_agent_rdata_fifo_src_valid),               //                .valid
		.rdata_fifo_src_data     (seg2_s1_agent_rdata_fifo_src_data),                //                .data
		.m0_response             (2'b00),                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (130),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) seg2_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                    //       clk.clk
		.reset             (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (seg2_s1_agent_rf_source_data),                     //        in.data
		.in_valid          (seg2_s1_agent_rf_source_valid),                    //          .valid
		.in_ready          (seg2_s1_agent_rf_source_ready),                    //          .ready
		.in_startofpacket  (seg2_s1_agent_rf_source_startofpacket),            //          .startofpacket
		.in_endofpacket    (seg2_s1_agent_rf_source_endofpacket),              //          .endofpacket
		.out_data          (seg2_s1_agent_rsp_fifo_out_data),                  //       out.data
		.out_valid         (seg2_s1_agent_rsp_fifo_out_valid),                 //          .valid
		.out_ready         (seg2_s1_agent_rsp_fifo_out_ready),                 //          .ready
		.out_startofpacket (seg2_s1_agent_rsp_fifo_out_startofpacket),         //          .startofpacket
		.out_endofpacket   (seg2_s1_agent_rsp_fifo_out_endofpacket),           //          .endofpacket
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) seg2_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                    //       clk.clk
		.reset             (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (seg2_s1_agent_rdata_fifo_src_data),                //        in.data
		.in_valid          (seg2_s1_agent_rdata_fifo_src_valid),               //          .valid
		.in_ready          (seg2_s1_agent_rdata_fifo_src_ready),               //          .ready
		.out_data          (seg2_s1_agent_rdata_fifo_out_data),                //       out.data
		.out_valid         (seg2_s1_agent_rdata_fifo_out_valid),               //          .valid
		.out_ready         (seg2_s1_agent_rdata_fifo_out_ready),               //          .ready
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_startofpacket  (1'b0),                                             // (terminated)
		.in_endofpacket    (1'b0),                                             // (terminated)
		.out_startofpacket (),                                                 // (terminated)
		.out_endofpacket   (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (128),
		.PKT_ORI_BURST_SIZE_L      (126),
		.PKT_RESPONSE_STATUS_H     (125),
		.PKT_RESPONSE_STATUS_L     (124),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_TRANS_LOCK            (70),
		.PKT_BEGIN_BURST           (95),
		.PKT_PROTECTION_H          (119),
		.PKT_PROTECTION_L          (117),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_POSTED          (67),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (100),
		.PKT_SRC_ID_L              (97),
		.PKT_DEST_ID_H             (104),
		.PKT_DEST_ID_L             (101),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (129),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) seg1_s1_agent (
		.clk                     (clk_0_clk_clk),                                    //             clk.clk
		.reset                   (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (seg1_s1_agent_m0_address),                         //              m0.address
		.m0_burstcount           (seg1_s1_agent_m0_burstcount),                      //                .burstcount
		.m0_byteenable           (seg1_s1_agent_m0_byteenable),                      //                .byteenable
		.m0_debugaccess          (seg1_s1_agent_m0_debugaccess),                     //                .debugaccess
		.m0_lock                 (seg1_s1_agent_m0_lock),                            //                .lock
		.m0_readdata             (seg1_s1_agent_m0_readdata),                        //                .readdata
		.m0_readdatavalid        (seg1_s1_agent_m0_readdatavalid),                   //                .readdatavalid
		.m0_read                 (seg1_s1_agent_m0_read),                            //                .read
		.m0_waitrequest          (seg1_s1_agent_m0_waitrequest),                     //                .waitrequest
		.m0_writedata            (seg1_s1_agent_m0_writedata),                       //                .writedata
		.m0_write                (seg1_s1_agent_m0_write),                           //                .write
		.rp_endofpacket          (seg1_s1_agent_rp_endofpacket),                     //              rp.endofpacket
		.rp_ready                (seg1_s1_agent_rp_ready),                           //                .ready
		.rp_valid                (seg1_s1_agent_rp_valid),                           //                .valid
		.rp_data                 (seg1_s1_agent_rp_data),                            //                .data
		.rp_startofpacket        (seg1_s1_agent_rp_startofpacket),                   //                .startofpacket
		.cp_ready                (seg1_s1_burst_adapter_source0_ready),              //              cp.ready
		.cp_valid                (seg1_s1_burst_adapter_source0_valid),              //                .valid
		.cp_data                 (seg1_s1_burst_adapter_source0_data),               //                .data
		.cp_startofpacket        (seg1_s1_burst_adapter_source0_startofpacket),      //                .startofpacket
		.cp_endofpacket          (seg1_s1_burst_adapter_source0_endofpacket),        //                .endofpacket
		.cp_channel              (seg1_s1_burst_adapter_source0_channel),            //                .channel
		.rf_sink_ready           (seg1_s1_agent_rsp_fifo_out_ready),                 //         rf_sink.ready
		.rf_sink_valid           (seg1_s1_agent_rsp_fifo_out_valid),                 //                .valid
		.rf_sink_startofpacket   (seg1_s1_agent_rsp_fifo_out_startofpacket),         //                .startofpacket
		.rf_sink_endofpacket     (seg1_s1_agent_rsp_fifo_out_endofpacket),           //                .endofpacket
		.rf_sink_data            (seg1_s1_agent_rsp_fifo_out_data),                  //                .data
		.rf_source_ready         (seg1_s1_agent_rf_source_ready),                    //       rf_source.ready
		.rf_source_valid         (seg1_s1_agent_rf_source_valid),                    //                .valid
		.rf_source_startofpacket (seg1_s1_agent_rf_source_startofpacket),            //                .startofpacket
		.rf_source_endofpacket   (seg1_s1_agent_rf_source_endofpacket),              //                .endofpacket
		.rf_source_data          (seg1_s1_agent_rf_source_data),                     //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_009_out_0_ready),                // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_009_out_0_valid),                //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_009_out_0_data),                 //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_009_out_0_error),                //                .error
		.rdata_fifo_src_ready    (seg1_s1_agent_rdata_fifo_src_ready),               //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (seg1_s1_agent_rdata_fifo_src_valid),               //                .valid
		.rdata_fifo_src_data     (seg1_s1_agent_rdata_fifo_src_data),                //                .data
		.m0_response             (2'b00),                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (130),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) seg1_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                    //       clk.clk
		.reset             (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (seg1_s1_agent_rf_source_data),                     //        in.data
		.in_valid          (seg1_s1_agent_rf_source_valid),                    //          .valid
		.in_ready          (seg1_s1_agent_rf_source_ready),                    //          .ready
		.in_startofpacket  (seg1_s1_agent_rf_source_startofpacket),            //          .startofpacket
		.in_endofpacket    (seg1_s1_agent_rf_source_endofpacket),              //          .endofpacket
		.out_data          (seg1_s1_agent_rsp_fifo_out_data),                  //       out.data
		.out_valid         (seg1_s1_agent_rsp_fifo_out_valid),                 //          .valid
		.out_ready         (seg1_s1_agent_rsp_fifo_out_ready),                 //          .ready
		.out_startofpacket (seg1_s1_agent_rsp_fifo_out_startofpacket),         //          .startofpacket
		.out_endofpacket   (seg1_s1_agent_rsp_fifo_out_endofpacket),           //          .endofpacket
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) seg1_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                    //       clk.clk
		.reset             (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (seg1_s1_agent_rdata_fifo_src_data),                //        in.data
		.in_valid          (seg1_s1_agent_rdata_fifo_src_valid),               //          .valid
		.in_ready          (seg1_s1_agent_rdata_fifo_src_ready),               //          .ready
		.out_data          (seg1_s1_agent_rdata_fifo_out_data),                //       out.data
		.out_valid         (seg1_s1_agent_rdata_fifo_out_valid),               //          .valid
		.out_ready         (seg1_s1_agent_rdata_fifo_out_ready),               //          .ready
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_startofpacket  (1'b0),                                             // (terminated)
		.in_endofpacket    (1'b0),                                             // (terminated)
		.out_startofpacket (),                                                 // (terminated)
		.out_endofpacket   (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (128),
		.PKT_ORI_BURST_SIZE_L      (126),
		.PKT_RESPONSE_STATUS_H     (125),
		.PKT_RESPONSE_STATUS_L     (124),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_TRANS_LOCK            (70),
		.PKT_BEGIN_BURST           (95),
		.PKT_PROTECTION_H          (119),
		.PKT_PROTECTION_L          (117),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_POSTED          (67),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (100),
		.PKT_SRC_ID_L              (97),
		.PKT_DEST_ID_H             (104),
		.PKT_DEST_ID_L             (101),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (129),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) keys_s1_agent (
		.clk                     (clk_0_clk_clk),                                    //             clk.clk
		.reset                   (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (keys_s1_agent_m0_address),                         //              m0.address
		.m0_burstcount           (keys_s1_agent_m0_burstcount),                      //                .burstcount
		.m0_byteenable           (keys_s1_agent_m0_byteenable),                      //                .byteenable
		.m0_debugaccess          (keys_s1_agent_m0_debugaccess),                     //                .debugaccess
		.m0_lock                 (keys_s1_agent_m0_lock),                            //                .lock
		.m0_readdata             (keys_s1_agent_m0_readdata),                        //                .readdata
		.m0_readdatavalid        (keys_s1_agent_m0_readdatavalid),                   //                .readdatavalid
		.m0_read                 (keys_s1_agent_m0_read),                            //                .read
		.m0_waitrequest          (keys_s1_agent_m0_waitrequest),                     //                .waitrequest
		.m0_writedata            (keys_s1_agent_m0_writedata),                       //                .writedata
		.m0_write                (keys_s1_agent_m0_write),                           //                .write
		.rp_endofpacket          (keys_s1_agent_rp_endofpacket),                     //              rp.endofpacket
		.rp_ready                (keys_s1_agent_rp_ready),                           //                .ready
		.rp_valid                (keys_s1_agent_rp_valid),                           //                .valid
		.rp_data                 (keys_s1_agent_rp_data),                            //                .data
		.rp_startofpacket        (keys_s1_agent_rp_startofpacket),                   //                .startofpacket
		.cp_ready                (keys_s1_burst_adapter_source0_ready),              //              cp.ready
		.cp_valid                (keys_s1_burst_adapter_source0_valid),              //                .valid
		.cp_data                 (keys_s1_burst_adapter_source0_data),               //                .data
		.cp_startofpacket        (keys_s1_burst_adapter_source0_startofpacket),      //                .startofpacket
		.cp_endofpacket          (keys_s1_burst_adapter_source0_endofpacket),        //                .endofpacket
		.cp_channel              (keys_s1_burst_adapter_source0_channel),            //                .channel
		.rf_sink_ready           (keys_s1_agent_rsp_fifo_out_ready),                 //         rf_sink.ready
		.rf_sink_valid           (keys_s1_agent_rsp_fifo_out_valid),                 //                .valid
		.rf_sink_startofpacket   (keys_s1_agent_rsp_fifo_out_startofpacket),         //                .startofpacket
		.rf_sink_endofpacket     (keys_s1_agent_rsp_fifo_out_endofpacket),           //                .endofpacket
		.rf_sink_data            (keys_s1_agent_rsp_fifo_out_data),                  //                .data
		.rf_source_ready         (keys_s1_agent_rf_source_ready),                    //       rf_source.ready
		.rf_source_valid         (keys_s1_agent_rf_source_valid),                    //                .valid
		.rf_source_startofpacket (keys_s1_agent_rf_source_startofpacket),            //                .startofpacket
		.rf_source_endofpacket   (keys_s1_agent_rf_source_endofpacket),              //                .endofpacket
		.rf_source_data          (keys_s1_agent_rf_source_data),                     //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_010_out_0_ready),                // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_010_out_0_valid),                //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_010_out_0_data),                 //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_010_out_0_error),                //                .error
		.rdata_fifo_src_ready    (keys_s1_agent_rdata_fifo_src_ready),               //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (keys_s1_agent_rdata_fifo_src_valid),               //                .valid
		.rdata_fifo_src_data     (keys_s1_agent_rdata_fifo_src_data),                //                .data
		.m0_response             (2'b00),                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (130),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) keys_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                    //       clk.clk
		.reset             (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (keys_s1_agent_rf_source_data),                     //        in.data
		.in_valid          (keys_s1_agent_rf_source_valid),                    //          .valid
		.in_ready          (keys_s1_agent_rf_source_ready),                    //          .ready
		.in_startofpacket  (keys_s1_agent_rf_source_startofpacket),            //          .startofpacket
		.in_endofpacket    (keys_s1_agent_rf_source_endofpacket),              //          .endofpacket
		.out_data          (keys_s1_agent_rsp_fifo_out_data),                  //       out.data
		.out_valid         (keys_s1_agent_rsp_fifo_out_valid),                 //          .valid
		.out_ready         (keys_s1_agent_rsp_fifo_out_ready),                 //          .ready
		.out_startofpacket (keys_s1_agent_rsp_fifo_out_startofpacket),         //          .startofpacket
		.out_endofpacket   (keys_s1_agent_rsp_fifo_out_endofpacket),           //          .endofpacket
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) keys_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                    //       clk.clk
		.reset             (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (keys_s1_agent_rdata_fifo_src_data),                //        in.data
		.in_valid          (keys_s1_agent_rdata_fifo_src_valid),               //          .valid
		.in_ready          (keys_s1_agent_rdata_fifo_src_ready),               //          .ready
		.out_data          (keys_s1_agent_rdata_fifo_out_data),                //       out.data
		.out_valid         (keys_s1_agent_rdata_fifo_out_valid),               //          .valid
		.out_ready         (keys_s1_agent_rdata_fifo_out_ready),               //          .ready
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_startofpacket  (1'b0),                                             // (terminated)
		.in_endofpacket    (1'b0),                                             // (terminated)
		.out_startofpacket (),                                                 // (terminated)
		.out_endofpacket   (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (128),
		.PKT_ORI_BURST_SIZE_L      (126),
		.PKT_RESPONSE_STATUS_H     (125),
		.PKT_RESPONSE_STATUS_L     (124),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_TRANS_LOCK            (70),
		.PKT_BEGIN_BURST           (95),
		.PKT_PROTECTION_H          (119),
		.PKT_PROTECTION_L          (117),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_POSTED          (67),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (100),
		.PKT_SRC_ID_L              (97),
		.PKT_DEST_ID_H             (104),
		.PKT_DEST_ID_L             (101),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (129),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) leds_s1_agent (
		.clk                     (clk_0_clk_clk),                                    //             clk.clk
		.reset                   (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (leds_s1_agent_m0_address),                         //              m0.address
		.m0_burstcount           (leds_s1_agent_m0_burstcount),                      //                .burstcount
		.m0_byteenable           (leds_s1_agent_m0_byteenable),                      //                .byteenable
		.m0_debugaccess          (leds_s1_agent_m0_debugaccess),                     //                .debugaccess
		.m0_lock                 (leds_s1_agent_m0_lock),                            //                .lock
		.m0_readdata             (leds_s1_agent_m0_readdata),                        //                .readdata
		.m0_readdatavalid        (leds_s1_agent_m0_readdatavalid),                   //                .readdatavalid
		.m0_read                 (leds_s1_agent_m0_read),                            //                .read
		.m0_waitrequest          (leds_s1_agent_m0_waitrequest),                     //                .waitrequest
		.m0_writedata            (leds_s1_agent_m0_writedata),                       //                .writedata
		.m0_write                (leds_s1_agent_m0_write),                           //                .write
		.rp_endofpacket          (leds_s1_agent_rp_endofpacket),                     //              rp.endofpacket
		.rp_ready                (leds_s1_agent_rp_ready),                           //                .ready
		.rp_valid                (leds_s1_agent_rp_valid),                           //                .valid
		.rp_data                 (leds_s1_agent_rp_data),                            //                .data
		.rp_startofpacket        (leds_s1_agent_rp_startofpacket),                   //                .startofpacket
		.cp_ready                (leds_s1_burst_adapter_source0_ready),              //              cp.ready
		.cp_valid                (leds_s1_burst_adapter_source0_valid),              //                .valid
		.cp_data                 (leds_s1_burst_adapter_source0_data),               //                .data
		.cp_startofpacket        (leds_s1_burst_adapter_source0_startofpacket),      //                .startofpacket
		.cp_endofpacket          (leds_s1_burst_adapter_source0_endofpacket),        //                .endofpacket
		.cp_channel              (leds_s1_burst_adapter_source0_channel),            //                .channel
		.rf_sink_ready           (leds_s1_agent_rsp_fifo_out_ready),                 //         rf_sink.ready
		.rf_sink_valid           (leds_s1_agent_rsp_fifo_out_valid),                 //                .valid
		.rf_sink_startofpacket   (leds_s1_agent_rsp_fifo_out_startofpacket),         //                .startofpacket
		.rf_sink_endofpacket     (leds_s1_agent_rsp_fifo_out_endofpacket),           //                .endofpacket
		.rf_sink_data            (leds_s1_agent_rsp_fifo_out_data),                  //                .data
		.rf_source_ready         (leds_s1_agent_rf_source_ready),                    //       rf_source.ready
		.rf_source_valid         (leds_s1_agent_rf_source_valid),                    //                .valid
		.rf_source_startofpacket (leds_s1_agent_rf_source_startofpacket),            //                .startofpacket
		.rf_source_endofpacket   (leds_s1_agent_rf_source_endofpacket),              //                .endofpacket
		.rf_source_data          (leds_s1_agent_rf_source_data),                     //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_011_out_0_ready),                // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_011_out_0_valid),                //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_011_out_0_data),                 //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_011_out_0_error),                //                .error
		.rdata_fifo_src_ready    (leds_s1_agent_rdata_fifo_src_ready),               //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (leds_s1_agent_rdata_fifo_src_valid),               //                .valid
		.rdata_fifo_src_data     (leds_s1_agent_rdata_fifo_src_data),                //                .data
		.m0_response             (2'b00),                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (130),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) leds_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                    //       clk.clk
		.reset             (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (leds_s1_agent_rf_source_data),                     //        in.data
		.in_valid          (leds_s1_agent_rf_source_valid),                    //          .valid
		.in_ready          (leds_s1_agent_rf_source_ready),                    //          .ready
		.in_startofpacket  (leds_s1_agent_rf_source_startofpacket),            //          .startofpacket
		.in_endofpacket    (leds_s1_agent_rf_source_endofpacket),              //          .endofpacket
		.out_data          (leds_s1_agent_rsp_fifo_out_data),                  //       out.data
		.out_valid         (leds_s1_agent_rsp_fifo_out_valid),                 //          .valid
		.out_ready         (leds_s1_agent_rsp_fifo_out_ready),                 //          .ready
		.out_startofpacket (leds_s1_agent_rsp_fifo_out_startofpacket),         //          .startofpacket
		.out_endofpacket   (leds_s1_agent_rsp_fifo_out_endofpacket),           //          .endofpacket
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) leds_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                    //       clk.clk
		.reset             (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (leds_s1_agent_rdata_fifo_src_data),                //        in.data
		.in_valid          (leds_s1_agent_rdata_fifo_src_valid),               //          .valid
		.in_ready          (leds_s1_agent_rdata_fifo_src_ready),               //          .ready
		.out_data          (leds_s1_agent_rdata_fifo_out_data),                //       out.data
		.out_valid         (leds_s1_agent_rdata_fifo_out_valid),               //          .valid
		.out_ready         (leds_s1_agent_rdata_fifo_out_ready),               //          .ready
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_startofpacket  (1'b0),                                             // (terminated)
		.in_endofpacket    (1'b0),                                             // (terminated)
		.out_startofpacket (),                                                 // (terminated)
		.out_endofpacket   (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	NUEVO_DESIGN_mm_interconnect_0_router router (
		.sink_ready         (nios2_qsys_0_data_master_agent_cp_ready),          //      sink.ready
		.sink_valid         (nios2_qsys_0_data_master_agent_cp_valid),          //          .valid
		.sink_data          (nios2_qsys_0_data_master_agent_cp_data),           //          .data
		.sink_startofpacket (nios2_qsys_0_data_master_agent_cp_startofpacket),  //          .startofpacket
		.sink_endofpacket   (nios2_qsys_0_data_master_agent_cp_endofpacket),    //          .endofpacket
		.clk                (clk_0_clk_clk),                                    //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                                 //       src.ready
		.src_valid          (router_src_valid),                                 //          .valid
		.src_data           (router_src_data),                                  //          .data
		.src_channel        (router_src_channel),                               //          .channel
		.src_startofpacket  (router_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                            //          .endofpacket
	);

	NUEVO_DESIGN_mm_interconnect_0_router_001 router_001 (
		.sink_ready         (hps_0_h2f_lw_axi_master_agent_write_cp_ready),                        //      sink.ready
		.sink_valid         (hps_0_h2f_lw_axi_master_agent_write_cp_valid),                        //          .valid
		.sink_data          (hps_0_h2f_lw_axi_master_agent_write_cp_data),                         //          .data
		.sink_startofpacket (hps_0_h2f_lw_axi_master_agent_write_cp_startofpacket),                //          .startofpacket
		.sink_endofpacket   (hps_0_h2f_lw_axi_master_agent_write_cp_endofpacket),                  //          .endofpacket
		.clk                (clk_0_clk_clk),                                                       //       clk.clk
		.reset              (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                                                //       src.ready
		.src_valid          (router_001_src_valid),                                                //          .valid
		.src_data           (router_001_src_data),                                                 //          .data
		.src_channel        (router_001_src_channel),                                              //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                                        //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                           //          .endofpacket
	);

	NUEVO_DESIGN_mm_interconnect_0_router_001 router_002 (
		.sink_ready         (hps_0_h2f_lw_axi_master_agent_read_cp_ready),                         //      sink.ready
		.sink_valid         (hps_0_h2f_lw_axi_master_agent_read_cp_valid),                         //          .valid
		.sink_data          (hps_0_h2f_lw_axi_master_agent_read_cp_data),                          //          .data
		.sink_startofpacket (hps_0_h2f_lw_axi_master_agent_read_cp_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (hps_0_h2f_lw_axi_master_agent_read_cp_endofpacket),                   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                       //       clk.clk
		.reset              (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                                                //       src.ready
		.src_valid          (router_002_src_valid),                                                //          .valid
		.src_data           (router_002_src_data),                                                 //          .data
		.src_channel        (router_002_src_channel),                                              //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                                        //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                                           //          .endofpacket
	);

	NUEVO_DESIGN_mm_interconnect_0_router_003 router_003 (
		.sink_ready         (hps_0_h2f_axi_master_agent_write_cp_ready),                           //      sink.ready
		.sink_valid         (hps_0_h2f_axi_master_agent_write_cp_valid),                           //          .valid
		.sink_data          (hps_0_h2f_axi_master_agent_write_cp_data),                            //          .data
		.sink_startofpacket (hps_0_h2f_axi_master_agent_write_cp_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (hps_0_h2f_axi_master_agent_write_cp_endofpacket),                     //          .endofpacket
		.clk                (clk_0_clk_clk),                                                       //       clk.clk
		.reset              (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_003_src_ready),                                                //       src.ready
		.src_valid          (router_003_src_valid),                                                //          .valid
		.src_data           (router_003_src_data),                                                 //          .data
		.src_channel        (router_003_src_channel),                                              //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                                        //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                                           //          .endofpacket
	);

	NUEVO_DESIGN_mm_interconnect_0_router_003 router_004 (
		.sink_ready         (hps_0_h2f_axi_master_agent_read_cp_ready),                            //      sink.ready
		.sink_valid         (hps_0_h2f_axi_master_agent_read_cp_valid),                            //          .valid
		.sink_data          (hps_0_h2f_axi_master_agent_read_cp_data),                             //          .data
		.sink_startofpacket (hps_0_h2f_axi_master_agent_read_cp_startofpacket),                    //          .startofpacket
		.sink_endofpacket   (hps_0_h2f_axi_master_agent_read_cp_endofpacket),                      //          .endofpacket
		.clk                (clk_0_clk_clk),                                                       //       clk.clk
		.reset              (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_004_src_ready),                                                //       src.ready
		.src_valid          (router_004_src_valid),                                                //          .valid
		.src_data           (router_004_src_data),                                                 //          .data
		.src_channel        (router_004_src_channel),                                              //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                                        //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                                           //          .endofpacket
	);

	NUEVO_DESIGN_mm_interconnect_0_router_005 router_005 (
		.sink_ready         (ram_s1_agent_rp_ready),                            //      sink.ready
		.sink_valid         (ram_s1_agent_rp_valid),                            //          .valid
		.sink_data          (ram_s1_agent_rp_data),                             //          .data
		.sink_startofpacket (ram_s1_agent_rp_startofpacket),                    //          .startofpacket
		.sink_endofpacket   (ram_s1_agent_rp_endofpacket),                      //          .endofpacket
		.clk                (clk_0_clk_clk),                                    //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_005_src_ready),                             //       src.ready
		.src_valid          (router_005_src_valid),                             //          .valid
		.src_data           (router_005_src_data),                              //          .data
		.src_channel        (router_005_src_channel),                           //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                        //          .endofpacket
	);

	NUEVO_DESIGN_mm_interconnect_0_router_005 router_006 (
		.sink_ready         (timer_s1_agent_rp_ready),                          //      sink.ready
		.sink_valid         (timer_s1_agent_rp_valid),                          //          .valid
		.sink_data          (timer_s1_agent_rp_data),                           //          .data
		.sink_startofpacket (timer_s1_agent_rp_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (timer_s1_agent_rp_endofpacket),                    //          .endofpacket
		.clk                (clk_0_clk_clk),                                    //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_006_src_ready),                             //       src.ready
		.src_valid          (router_006_src_valid),                             //          .valid
		.src_data           (router_006_src_data),                              //          .data
		.src_channel        (router_006_src_channel),                           //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                        //          .endofpacket
	);

	NUEVO_DESIGN_mm_interconnect_0_router_007 router_007 (
		.sink_ready         (sdram_s1_agent_rp_ready),                          //      sink.ready
		.sink_valid         (sdram_s1_agent_rp_valid),                          //          .valid
		.sink_data          (sdram_s1_agent_rp_data),                           //          .data
		.sink_startofpacket (sdram_s1_agent_rp_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (sdram_s1_agent_rp_endofpacket),                    //          .endofpacket
		.clk                (clk_0_clk_clk),                                    //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_007_src_ready),                             //       src.ready
		.src_valid          (router_007_src_valid),                             //          .valid
		.src_data           (router_007_src_data),                              //          .data
		.src_channel        (router_007_src_channel),                           //          .channel
		.src_startofpacket  (router_007_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                        //          .endofpacket
	);

	NUEVO_DESIGN_mm_interconnect_0_router_008 router_008 (
		.sink_ready         (sw_s1_agent_rp_ready),                             //      sink.ready
		.sink_valid         (sw_s1_agent_rp_valid),                             //          .valid
		.sink_data          (sw_s1_agent_rp_data),                              //          .data
		.sink_startofpacket (sw_s1_agent_rp_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (sw_s1_agent_rp_endofpacket),                       //          .endofpacket
		.clk                (clk_0_clk_clk),                                    //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_008_src_ready),                             //       src.ready
		.src_valid          (router_008_src_valid),                             //          .valid
		.src_data           (router_008_src_data),                              //          .data
		.src_channel        (router_008_src_channel),                           //          .channel
		.src_startofpacket  (router_008_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                        //          .endofpacket
	);

	NUEVO_DESIGN_mm_interconnect_0_router_008 router_009 (
		.sink_ready         (seg6_s1_agent_rp_ready),                           //      sink.ready
		.sink_valid         (seg6_s1_agent_rp_valid),                           //          .valid
		.sink_data          (seg6_s1_agent_rp_data),                            //          .data
		.sink_startofpacket (seg6_s1_agent_rp_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (seg6_s1_agent_rp_endofpacket),                     //          .endofpacket
		.clk                (clk_0_clk_clk),                                    //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_009_src_ready),                             //       src.ready
		.src_valid          (router_009_src_valid),                             //          .valid
		.src_data           (router_009_src_data),                              //          .data
		.src_channel        (router_009_src_channel),                           //          .channel
		.src_startofpacket  (router_009_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)                        //          .endofpacket
	);

	NUEVO_DESIGN_mm_interconnect_0_router_008 router_010 (
		.sink_ready         (seg5_s1_agent_rp_ready),                           //      sink.ready
		.sink_valid         (seg5_s1_agent_rp_valid),                           //          .valid
		.sink_data          (seg5_s1_agent_rp_data),                            //          .data
		.sink_startofpacket (seg5_s1_agent_rp_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (seg5_s1_agent_rp_endofpacket),                     //          .endofpacket
		.clk                (clk_0_clk_clk),                                    //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_010_src_ready),                             //       src.ready
		.src_valid          (router_010_src_valid),                             //          .valid
		.src_data           (router_010_src_data),                              //          .data
		.src_channel        (router_010_src_channel),                           //          .channel
		.src_startofpacket  (router_010_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)                        //          .endofpacket
	);

	NUEVO_DESIGN_mm_interconnect_0_router_008 router_011 (
		.sink_ready         (seg4_s1_agent_rp_ready),                           //      sink.ready
		.sink_valid         (seg4_s1_agent_rp_valid),                           //          .valid
		.sink_data          (seg4_s1_agent_rp_data),                            //          .data
		.sink_startofpacket (seg4_s1_agent_rp_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (seg4_s1_agent_rp_endofpacket),                     //          .endofpacket
		.clk                (clk_0_clk_clk),                                    //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_011_src_ready),                             //       src.ready
		.src_valid          (router_011_src_valid),                             //          .valid
		.src_data           (router_011_src_data),                              //          .data
		.src_channel        (router_011_src_channel),                           //          .channel
		.src_startofpacket  (router_011_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_011_src_endofpacket)                        //          .endofpacket
	);

	NUEVO_DESIGN_mm_interconnect_0_router_008 router_012 (
		.sink_ready         (seg3_s1_agent_rp_ready),                           //      sink.ready
		.sink_valid         (seg3_s1_agent_rp_valid),                           //          .valid
		.sink_data          (seg3_s1_agent_rp_data),                            //          .data
		.sink_startofpacket (seg3_s1_agent_rp_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (seg3_s1_agent_rp_endofpacket),                     //          .endofpacket
		.clk                (clk_0_clk_clk),                                    //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_012_src_ready),                             //       src.ready
		.src_valid          (router_012_src_valid),                             //          .valid
		.src_data           (router_012_src_data),                              //          .data
		.src_channel        (router_012_src_channel),                           //          .channel
		.src_startofpacket  (router_012_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_012_src_endofpacket)                        //          .endofpacket
	);

	NUEVO_DESIGN_mm_interconnect_0_router_008 router_013 (
		.sink_ready         (seg2_s1_agent_rp_ready),                           //      sink.ready
		.sink_valid         (seg2_s1_agent_rp_valid),                           //          .valid
		.sink_data          (seg2_s1_agent_rp_data),                            //          .data
		.sink_startofpacket (seg2_s1_agent_rp_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (seg2_s1_agent_rp_endofpacket),                     //          .endofpacket
		.clk                (clk_0_clk_clk),                                    //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_013_src_ready),                             //       src.ready
		.src_valid          (router_013_src_valid),                             //          .valid
		.src_data           (router_013_src_data),                              //          .data
		.src_channel        (router_013_src_channel),                           //          .channel
		.src_startofpacket  (router_013_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_013_src_endofpacket)                        //          .endofpacket
	);

	NUEVO_DESIGN_mm_interconnect_0_router_008 router_014 (
		.sink_ready         (seg1_s1_agent_rp_ready),                           //      sink.ready
		.sink_valid         (seg1_s1_agent_rp_valid),                           //          .valid
		.sink_data          (seg1_s1_agent_rp_data),                            //          .data
		.sink_startofpacket (seg1_s1_agent_rp_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (seg1_s1_agent_rp_endofpacket),                     //          .endofpacket
		.clk                (clk_0_clk_clk),                                    //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_014_src_ready),                             //       src.ready
		.src_valid          (router_014_src_valid),                             //          .valid
		.src_data           (router_014_src_data),                              //          .data
		.src_channel        (router_014_src_channel),                           //          .channel
		.src_startofpacket  (router_014_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_014_src_endofpacket)                        //          .endofpacket
	);

	NUEVO_DESIGN_mm_interconnect_0_router_008 router_015 (
		.sink_ready         (keys_s1_agent_rp_ready),                           //      sink.ready
		.sink_valid         (keys_s1_agent_rp_valid),                           //          .valid
		.sink_data          (keys_s1_agent_rp_data),                            //          .data
		.sink_startofpacket (keys_s1_agent_rp_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (keys_s1_agent_rp_endofpacket),                     //          .endofpacket
		.clk                (clk_0_clk_clk),                                    //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_015_src_ready),                             //       src.ready
		.src_valid          (router_015_src_valid),                             //          .valid
		.src_data           (router_015_src_data),                              //          .data
		.src_channel        (router_015_src_channel),                           //          .channel
		.src_startofpacket  (router_015_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_015_src_endofpacket)                        //          .endofpacket
	);

	NUEVO_DESIGN_mm_interconnect_0_router_008 router_016 (
		.sink_ready         (leds_s1_agent_rp_ready),                           //      sink.ready
		.sink_valid         (leds_s1_agent_rp_valid),                           //          .valid
		.sink_data          (leds_s1_agent_rp_data),                            //          .data
		.sink_startofpacket (leds_s1_agent_rp_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (leds_s1_agent_rp_endofpacket),                     //          .endofpacket
		.clk                (clk_0_clk_clk),                                    //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_016_src_ready),                             //       src.ready
		.src_valid          (router_016_src_valid),                             //          .valid
		.src_data           (router_016_src_data),                              //          .data
		.src_channel        (router_016_src_channel),                           //          .channel
		.src_startofpacket  (router_016_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_016_src_endofpacket)                        //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (104),
		.PKT_DEST_ID_L             (101),
		.PKT_SRC_ID_H              (100),
		.PKT_SRC_ID_L              (97),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (67),
		.PKT_TRANS_WRITE           (68),
		.MAX_OUTSTANDING_RESPONSES (3),
		.PIPELINED                 (0),
		.ST_DATA_W                 (129),
		.ST_CHANNEL_W              (12),
		.VALID_WIDTH               (12),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) hps_0_h2f_lw_axi_master_wr_limiter (
		.clk                    (clk_0_clk_clk),                                                       //       clk.clk
		.reset                  (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_001_src_ready),                                                //  cmd_sink.ready
		.cmd_sink_valid         (router_001_src_valid),                                                //          .valid
		.cmd_sink_data          (router_001_src_data),                                                 //          .data
		.cmd_sink_channel       (router_001_src_channel),                                              //          .channel
		.cmd_sink_startofpacket (router_001_src_startofpacket),                                        //          .startofpacket
		.cmd_sink_endofpacket   (router_001_src_endofpacket),                                          //          .endofpacket
		.cmd_src_ready          (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_ready),                    //   cmd_src.ready
		.cmd_src_data           (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_data),                     //          .data
		.cmd_src_channel        (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_channel),                  //          .channel
		.cmd_src_startofpacket  (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_startofpacket),            //          .startofpacket
		.cmd_src_endofpacket    (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_endofpacket),              //          .endofpacket
		.rsp_sink_ready         (rsp_mux_001_src_ready),                                               //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_001_src_valid),                                               //          .valid
		.rsp_sink_channel       (rsp_mux_001_src_channel),                                             //          .channel
		.rsp_sink_data          (rsp_mux_001_src_data),                                                //          .data
		.rsp_sink_startofpacket (rsp_mux_001_src_startofpacket),                                       //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_001_src_endofpacket),                                         //          .endofpacket
		.rsp_src_ready          (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_ready),                    //   rsp_src.ready
		.rsp_src_valid          (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_valid),                    //          .valid
		.rsp_src_data           (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_data),                     //          .data
		.rsp_src_channel        (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_channel),                  //          .channel
		.rsp_src_startofpacket  (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_startofpacket),            //          .startofpacket
		.rsp_src_endofpacket    (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_endofpacket),              //          .endofpacket
		.cmd_src_valid          (hps_0_h2f_lw_axi_master_wr_limiter_cmd_valid_data)                    // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (104),
		.PKT_DEST_ID_L             (101),
		.PKT_SRC_ID_H              (100),
		.PKT_SRC_ID_L              (97),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (67),
		.PKT_TRANS_WRITE           (68),
		.MAX_OUTSTANDING_RESPONSES (3),
		.PIPELINED                 (0),
		.ST_DATA_W                 (129),
		.ST_CHANNEL_W              (12),
		.VALID_WIDTH               (12),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) hps_0_h2f_lw_axi_master_rd_limiter (
		.clk                    (clk_0_clk_clk),                                                       //       clk.clk
		.reset                  (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_002_src_ready),                                                //  cmd_sink.ready
		.cmd_sink_valid         (router_002_src_valid),                                                //          .valid
		.cmd_sink_data          (router_002_src_data),                                                 //          .data
		.cmd_sink_channel       (router_002_src_channel),                                              //          .channel
		.cmd_sink_startofpacket (router_002_src_startofpacket),                                        //          .startofpacket
		.cmd_sink_endofpacket   (router_002_src_endofpacket),                                          //          .endofpacket
		.cmd_src_ready          (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_ready),                    //   cmd_src.ready
		.cmd_src_data           (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_data),                     //          .data
		.cmd_src_channel        (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_channel),                  //          .channel
		.cmd_src_startofpacket  (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_startofpacket),            //          .startofpacket
		.cmd_src_endofpacket    (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_endofpacket),              //          .endofpacket
		.rsp_sink_ready         (rsp_mux_002_src_ready),                                               //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_002_src_valid),                                               //          .valid
		.rsp_sink_channel       (rsp_mux_002_src_channel),                                             //          .channel
		.rsp_sink_data          (rsp_mux_002_src_data),                                                //          .data
		.rsp_sink_startofpacket (rsp_mux_002_src_startofpacket),                                       //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_002_src_endofpacket),                                         //          .endofpacket
		.rsp_src_ready          (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_ready),                    //   rsp_src.ready
		.rsp_src_valid          (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_valid),                    //          .valid
		.rsp_src_data           (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_data),                     //          .data
		.rsp_src_channel        (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_channel),                  //          .channel
		.rsp_src_startofpacket  (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_startofpacket),            //          .startofpacket
		.rsp_src_endofpacket    (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_endofpacket),              //          .endofpacket
		.cmd_src_valid          (hps_0_h2f_lw_axi_master_rd_limiter_cmd_valid_data)                    // cmd_valid.data
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (47),
		.PKT_ADDR_L                (18),
		.PKT_BEGIN_BURST           (77),
		.PKT_BYTE_CNT_H            (61),
		.PKT_BYTE_CNT_L            (54),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_BURST_SIZE_H          (72),
		.PKT_BURST_SIZE_L          (70),
		.PKT_BURST_TYPE_H          (74),
		.PKT_BURST_TYPE_L          (73),
		.PKT_BURSTWRAP_H           (69),
		.PKT_BURSTWRAP_L           (62),
		.PKT_TRANS_COMPRESSED_READ (48),
		.PKT_TRANS_WRITE           (50),
		.PKT_TRANS_READ            (51),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (111),
		.ST_CHANNEL_W              (12),
		.OUT_BYTE_CNT_H            (55),
		.OUT_BURSTWRAP_H           (69),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) sdram_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                    //       cr0.clk
		.reset                 (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_002_src_valid),                            //     sink0.valid
		.sink0_data            (cmd_mux_002_src_data),                             //          .data
		.sink0_channel         (cmd_mux_002_src_channel),                          //          .channel
		.sink0_startofpacket   (cmd_mux_002_src_startofpacket),                    //          .startofpacket
		.sink0_endofpacket     (cmd_mux_002_src_endofpacket),                      //          .endofpacket
		.sink0_ready           (cmd_mux_002_src_ready),                            //          .ready
		.source0_valid         (sdram_s1_burst_adapter_source0_valid),             //   source0.valid
		.source0_data          (sdram_s1_burst_adapter_source0_data),              //          .data
		.source0_channel       (sdram_s1_burst_adapter_source0_channel),           //          .channel
		.source0_startofpacket (sdram_s1_burst_adapter_source0_startofpacket),     //          .startofpacket
		.source0_endofpacket   (sdram_s1_burst_adapter_source0_endofpacket),       //          .endofpacket
		.source0_ready         (sdram_s1_burst_adapter_source0_ready)              //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (95),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_BURST_TYPE_H          (92),
		.PKT_BURST_TYPE_L          (91),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (129),
		.ST_CHANNEL_W              (12),
		.OUT_BYTE_CNT_H            (74),
		.OUT_BURSTWRAP_H           (87),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) sw_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                    //       cr0.clk
		.reset                 (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_003_src_valid),                            //     sink0.valid
		.sink0_data            (cmd_mux_003_src_data),                             //          .data
		.sink0_channel         (cmd_mux_003_src_channel),                          //          .channel
		.sink0_startofpacket   (cmd_mux_003_src_startofpacket),                    //          .startofpacket
		.sink0_endofpacket     (cmd_mux_003_src_endofpacket),                      //          .endofpacket
		.sink0_ready           (cmd_mux_003_src_ready),                            //          .ready
		.source0_valid         (sw_s1_burst_adapter_source0_valid),                //   source0.valid
		.source0_data          (sw_s1_burst_adapter_source0_data),                 //          .data
		.source0_channel       (sw_s1_burst_adapter_source0_channel),              //          .channel
		.source0_startofpacket (sw_s1_burst_adapter_source0_startofpacket),        //          .startofpacket
		.source0_endofpacket   (sw_s1_burst_adapter_source0_endofpacket),          //          .endofpacket
		.source0_ready         (sw_s1_burst_adapter_source0_ready)                 //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (95),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_BURST_TYPE_H          (92),
		.PKT_BURST_TYPE_L          (91),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (129),
		.ST_CHANNEL_W              (12),
		.OUT_BYTE_CNT_H            (74),
		.OUT_BURSTWRAP_H           (87),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) seg6_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                    //       cr0.clk
		.reset                 (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_004_src_valid),                            //     sink0.valid
		.sink0_data            (cmd_mux_004_src_data),                             //          .data
		.sink0_channel         (cmd_mux_004_src_channel),                          //          .channel
		.sink0_startofpacket   (cmd_mux_004_src_startofpacket),                    //          .startofpacket
		.sink0_endofpacket     (cmd_mux_004_src_endofpacket),                      //          .endofpacket
		.sink0_ready           (cmd_mux_004_src_ready),                            //          .ready
		.source0_valid         (seg6_s1_burst_adapter_source0_valid),              //   source0.valid
		.source0_data          (seg6_s1_burst_adapter_source0_data),               //          .data
		.source0_channel       (seg6_s1_burst_adapter_source0_channel),            //          .channel
		.source0_startofpacket (seg6_s1_burst_adapter_source0_startofpacket),      //          .startofpacket
		.source0_endofpacket   (seg6_s1_burst_adapter_source0_endofpacket),        //          .endofpacket
		.source0_ready         (seg6_s1_burst_adapter_source0_ready)               //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (95),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_BURST_TYPE_H          (92),
		.PKT_BURST_TYPE_L          (91),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (129),
		.ST_CHANNEL_W              (12),
		.OUT_BYTE_CNT_H            (74),
		.OUT_BURSTWRAP_H           (87),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) seg5_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                    //       cr0.clk
		.reset                 (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_005_src_valid),                            //     sink0.valid
		.sink0_data            (cmd_mux_005_src_data),                             //          .data
		.sink0_channel         (cmd_mux_005_src_channel),                          //          .channel
		.sink0_startofpacket   (cmd_mux_005_src_startofpacket),                    //          .startofpacket
		.sink0_endofpacket     (cmd_mux_005_src_endofpacket),                      //          .endofpacket
		.sink0_ready           (cmd_mux_005_src_ready),                            //          .ready
		.source0_valid         (seg5_s1_burst_adapter_source0_valid),              //   source0.valid
		.source0_data          (seg5_s1_burst_adapter_source0_data),               //          .data
		.source0_channel       (seg5_s1_burst_adapter_source0_channel),            //          .channel
		.source0_startofpacket (seg5_s1_burst_adapter_source0_startofpacket),      //          .startofpacket
		.source0_endofpacket   (seg5_s1_burst_adapter_source0_endofpacket),        //          .endofpacket
		.source0_ready         (seg5_s1_burst_adapter_source0_ready)               //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (95),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_BURST_TYPE_H          (92),
		.PKT_BURST_TYPE_L          (91),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (129),
		.ST_CHANNEL_W              (12),
		.OUT_BYTE_CNT_H            (74),
		.OUT_BURSTWRAP_H           (87),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) seg4_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                    //       cr0.clk
		.reset                 (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_006_src_valid),                            //     sink0.valid
		.sink0_data            (cmd_mux_006_src_data),                             //          .data
		.sink0_channel         (cmd_mux_006_src_channel),                          //          .channel
		.sink0_startofpacket   (cmd_mux_006_src_startofpacket),                    //          .startofpacket
		.sink0_endofpacket     (cmd_mux_006_src_endofpacket),                      //          .endofpacket
		.sink0_ready           (cmd_mux_006_src_ready),                            //          .ready
		.source0_valid         (seg4_s1_burst_adapter_source0_valid),              //   source0.valid
		.source0_data          (seg4_s1_burst_adapter_source0_data),               //          .data
		.source0_channel       (seg4_s1_burst_adapter_source0_channel),            //          .channel
		.source0_startofpacket (seg4_s1_burst_adapter_source0_startofpacket),      //          .startofpacket
		.source0_endofpacket   (seg4_s1_burst_adapter_source0_endofpacket),        //          .endofpacket
		.source0_ready         (seg4_s1_burst_adapter_source0_ready)               //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (95),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_BURST_TYPE_H          (92),
		.PKT_BURST_TYPE_L          (91),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (129),
		.ST_CHANNEL_W              (12),
		.OUT_BYTE_CNT_H            (74),
		.OUT_BURSTWRAP_H           (87),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) seg3_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                    //       cr0.clk
		.reset                 (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_007_src_valid),                            //     sink0.valid
		.sink0_data            (cmd_mux_007_src_data),                             //          .data
		.sink0_channel         (cmd_mux_007_src_channel),                          //          .channel
		.sink0_startofpacket   (cmd_mux_007_src_startofpacket),                    //          .startofpacket
		.sink0_endofpacket     (cmd_mux_007_src_endofpacket),                      //          .endofpacket
		.sink0_ready           (cmd_mux_007_src_ready),                            //          .ready
		.source0_valid         (seg3_s1_burst_adapter_source0_valid),              //   source0.valid
		.source0_data          (seg3_s1_burst_adapter_source0_data),               //          .data
		.source0_channel       (seg3_s1_burst_adapter_source0_channel),            //          .channel
		.source0_startofpacket (seg3_s1_burst_adapter_source0_startofpacket),      //          .startofpacket
		.source0_endofpacket   (seg3_s1_burst_adapter_source0_endofpacket),        //          .endofpacket
		.source0_ready         (seg3_s1_burst_adapter_source0_ready)               //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (95),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_BURST_TYPE_H          (92),
		.PKT_BURST_TYPE_L          (91),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (129),
		.ST_CHANNEL_W              (12),
		.OUT_BYTE_CNT_H            (74),
		.OUT_BURSTWRAP_H           (87),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) seg2_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                    //       cr0.clk
		.reset                 (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_008_src_valid),                            //     sink0.valid
		.sink0_data            (cmd_mux_008_src_data),                             //          .data
		.sink0_channel         (cmd_mux_008_src_channel),                          //          .channel
		.sink0_startofpacket   (cmd_mux_008_src_startofpacket),                    //          .startofpacket
		.sink0_endofpacket     (cmd_mux_008_src_endofpacket),                      //          .endofpacket
		.sink0_ready           (cmd_mux_008_src_ready),                            //          .ready
		.source0_valid         (seg2_s1_burst_adapter_source0_valid),              //   source0.valid
		.source0_data          (seg2_s1_burst_adapter_source0_data),               //          .data
		.source0_channel       (seg2_s1_burst_adapter_source0_channel),            //          .channel
		.source0_startofpacket (seg2_s1_burst_adapter_source0_startofpacket),      //          .startofpacket
		.source0_endofpacket   (seg2_s1_burst_adapter_source0_endofpacket),        //          .endofpacket
		.source0_ready         (seg2_s1_burst_adapter_source0_ready)               //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (95),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_BURST_TYPE_H          (92),
		.PKT_BURST_TYPE_L          (91),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (129),
		.ST_CHANNEL_W              (12),
		.OUT_BYTE_CNT_H            (74),
		.OUT_BURSTWRAP_H           (87),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) seg1_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                    //       cr0.clk
		.reset                 (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_009_src_valid),                            //     sink0.valid
		.sink0_data            (cmd_mux_009_src_data),                             //          .data
		.sink0_channel         (cmd_mux_009_src_channel),                          //          .channel
		.sink0_startofpacket   (cmd_mux_009_src_startofpacket),                    //          .startofpacket
		.sink0_endofpacket     (cmd_mux_009_src_endofpacket),                      //          .endofpacket
		.sink0_ready           (cmd_mux_009_src_ready),                            //          .ready
		.source0_valid         (seg1_s1_burst_adapter_source0_valid),              //   source0.valid
		.source0_data          (seg1_s1_burst_adapter_source0_data),               //          .data
		.source0_channel       (seg1_s1_burst_adapter_source0_channel),            //          .channel
		.source0_startofpacket (seg1_s1_burst_adapter_source0_startofpacket),      //          .startofpacket
		.source0_endofpacket   (seg1_s1_burst_adapter_source0_endofpacket),        //          .endofpacket
		.source0_ready         (seg1_s1_burst_adapter_source0_ready)               //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (95),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_BURST_TYPE_H          (92),
		.PKT_BURST_TYPE_L          (91),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (129),
		.ST_CHANNEL_W              (12),
		.OUT_BYTE_CNT_H            (74),
		.OUT_BURSTWRAP_H           (87),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) keys_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                    //       cr0.clk
		.reset                 (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_010_src_valid),                            //     sink0.valid
		.sink0_data            (cmd_mux_010_src_data),                             //          .data
		.sink0_channel         (cmd_mux_010_src_channel),                          //          .channel
		.sink0_startofpacket   (cmd_mux_010_src_startofpacket),                    //          .startofpacket
		.sink0_endofpacket     (cmd_mux_010_src_endofpacket),                      //          .endofpacket
		.sink0_ready           (cmd_mux_010_src_ready),                            //          .ready
		.source0_valid         (keys_s1_burst_adapter_source0_valid),              //   source0.valid
		.source0_data          (keys_s1_burst_adapter_source0_data),               //          .data
		.source0_channel       (keys_s1_burst_adapter_source0_channel),            //          .channel
		.source0_startofpacket (keys_s1_burst_adapter_source0_startofpacket),      //          .startofpacket
		.source0_endofpacket   (keys_s1_burst_adapter_source0_endofpacket),        //          .endofpacket
		.source0_ready         (keys_s1_burst_adapter_source0_ready)               //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (95),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_BURST_TYPE_H          (92),
		.PKT_BURST_TYPE_L          (91),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (129),
		.ST_CHANNEL_W              (12),
		.OUT_BYTE_CNT_H            (74),
		.OUT_BURSTWRAP_H           (87),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) leds_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                    //       cr0.clk
		.reset                 (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_011_src_valid),                            //     sink0.valid
		.sink0_data            (cmd_mux_011_src_data),                             //          .data
		.sink0_channel         (cmd_mux_011_src_channel),                          //          .channel
		.sink0_startofpacket   (cmd_mux_011_src_startofpacket),                    //          .startofpacket
		.sink0_endofpacket     (cmd_mux_011_src_endofpacket),                      //          .endofpacket
		.sink0_ready           (cmd_mux_011_src_ready),                            //          .ready
		.source0_valid         (leds_s1_burst_adapter_source0_valid),              //   source0.valid
		.source0_data          (leds_s1_burst_adapter_source0_data),               //          .data
		.source0_channel       (leds_s1_burst_adapter_source0_channel),            //          .channel
		.source0_startofpacket (leds_s1_burst_adapter_source0_startofpacket),      //          .startofpacket
		.source0_endofpacket   (leds_s1_burst_adapter_source0_endofpacket),        //          .endofpacket
		.source0_ready         (leds_s1_burst_adapter_source0_ready)               //          .ready
	);

	NUEVO_DESIGN_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                 (clk_0_clk_clk),                                    //       clk.clk
		.reset               (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready          (router_src_ready),                                 //      sink.ready
		.sink_channel        (router_src_channel),                               //          .channel
		.sink_data           (router_src_data),                                  //          .data
		.sink_startofpacket  (router_src_startofpacket),                         //          .startofpacket
		.sink_endofpacket    (router_src_endofpacket),                           //          .endofpacket
		.sink_valid          (router_src_valid),                                 //          .valid
		.src0_ready          (cmd_demux_src0_ready),                             //      src0.ready
		.src0_valid          (cmd_demux_src0_valid),                             //          .valid
		.src0_data           (cmd_demux_src0_data),                              //          .data
		.src0_channel        (cmd_demux_src0_channel),                           //          .channel
		.src0_startofpacket  (cmd_demux_src0_startofpacket),                     //          .startofpacket
		.src0_endofpacket    (cmd_demux_src0_endofpacket),                       //          .endofpacket
		.src1_ready          (cmd_demux_src1_ready),                             //      src1.ready
		.src1_valid          (cmd_demux_src1_valid),                             //          .valid
		.src1_data           (cmd_demux_src1_data),                              //          .data
		.src1_channel        (cmd_demux_src1_channel),                           //          .channel
		.src1_startofpacket  (cmd_demux_src1_startofpacket),                     //          .startofpacket
		.src1_endofpacket    (cmd_demux_src1_endofpacket),                       //          .endofpacket
		.src2_ready          (cmd_demux_src2_ready),                             //      src2.ready
		.src2_valid          (cmd_demux_src2_valid),                             //          .valid
		.src2_data           (cmd_demux_src2_data),                              //          .data
		.src2_channel        (cmd_demux_src2_channel),                           //          .channel
		.src2_startofpacket  (cmd_demux_src2_startofpacket),                     //          .startofpacket
		.src2_endofpacket    (cmd_demux_src2_endofpacket),                       //          .endofpacket
		.src3_ready          (cmd_demux_src3_ready),                             //      src3.ready
		.src3_valid          (cmd_demux_src3_valid),                             //          .valid
		.src3_data           (cmd_demux_src3_data),                              //          .data
		.src3_channel        (cmd_demux_src3_channel),                           //          .channel
		.src3_startofpacket  (cmd_demux_src3_startofpacket),                     //          .startofpacket
		.src3_endofpacket    (cmd_demux_src3_endofpacket),                       //          .endofpacket
		.src4_ready          (cmd_demux_src4_ready),                             //      src4.ready
		.src4_valid          (cmd_demux_src4_valid),                             //          .valid
		.src4_data           (cmd_demux_src4_data),                              //          .data
		.src4_channel        (cmd_demux_src4_channel),                           //          .channel
		.src4_startofpacket  (cmd_demux_src4_startofpacket),                     //          .startofpacket
		.src4_endofpacket    (cmd_demux_src4_endofpacket),                       //          .endofpacket
		.src5_ready          (cmd_demux_src5_ready),                             //      src5.ready
		.src5_valid          (cmd_demux_src5_valid),                             //          .valid
		.src5_data           (cmd_demux_src5_data),                              //          .data
		.src5_channel        (cmd_demux_src5_channel),                           //          .channel
		.src5_startofpacket  (cmd_demux_src5_startofpacket),                     //          .startofpacket
		.src5_endofpacket    (cmd_demux_src5_endofpacket),                       //          .endofpacket
		.src6_ready          (cmd_demux_src6_ready),                             //      src6.ready
		.src6_valid          (cmd_demux_src6_valid),                             //          .valid
		.src6_data           (cmd_demux_src6_data),                              //          .data
		.src6_channel        (cmd_demux_src6_channel),                           //          .channel
		.src6_startofpacket  (cmd_demux_src6_startofpacket),                     //          .startofpacket
		.src6_endofpacket    (cmd_demux_src6_endofpacket),                       //          .endofpacket
		.src7_ready          (cmd_demux_src7_ready),                             //      src7.ready
		.src7_valid          (cmd_demux_src7_valid),                             //          .valid
		.src7_data           (cmd_demux_src7_data),                              //          .data
		.src7_channel        (cmd_demux_src7_channel),                           //          .channel
		.src7_startofpacket  (cmd_demux_src7_startofpacket),                     //          .startofpacket
		.src7_endofpacket    (cmd_demux_src7_endofpacket),                       //          .endofpacket
		.src8_ready          (cmd_demux_src8_ready),                             //      src8.ready
		.src8_valid          (cmd_demux_src8_valid),                             //          .valid
		.src8_data           (cmd_demux_src8_data),                              //          .data
		.src8_channel        (cmd_demux_src8_channel),                           //          .channel
		.src8_startofpacket  (cmd_demux_src8_startofpacket),                     //          .startofpacket
		.src8_endofpacket    (cmd_demux_src8_endofpacket),                       //          .endofpacket
		.src9_ready          (cmd_demux_src9_ready),                             //      src9.ready
		.src9_valid          (cmd_demux_src9_valid),                             //          .valid
		.src9_data           (cmd_demux_src9_data),                              //          .data
		.src9_channel        (cmd_demux_src9_channel),                           //          .channel
		.src9_startofpacket  (cmd_demux_src9_startofpacket),                     //          .startofpacket
		.src9_endofpacket    (cmd_demux_src9_endofpacket),                       //          .endofpacket
		.src10_ready         (cmd_demux_src10_ready),                            //     src10.ready
		.src10_valid         (cmd_demux_src10_valid),                            //          .valid
		.src10_data          (cmd_demux_src10_data),                             //          .data
		.src10_channel       (cmd_demux_src10_channel),                          //          .channel
		.src10_startofpacket (cmd_demux_src10_startofpacket),                    //          .startofpacket
		.src10_endofpacket   (cmd_demux_src10_endofpacket),                      //          .endofpacket
		.src11_ready         (cmd_demux_src11_ready),                            //     src11.ready
		.src11_valid         (cmd_demux_src11_valid),                            //          .valid
		.src11_data          (cmd_demux_src11_data),                             //          .data
		.src11_channel       (cmd_demux_src11_channel),                          //          .channel
		.src11_startofpacket (cmd_demux_src11_startofpacket),                    //          .startofpacket
		.src11_endofpacket   (cmd_demux_src11_endofpacket)                       //          .endofpacket
	);

	NUEVO_DESIGN_mm_interconnect_0_cmd_demux_001 cmd_demux_001 (
		.clk                (clk_0_clk_clk),                                                       //        clk.clk
		.reset              (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready         (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_ready),                    //       sink.ready
		.sink_channel       (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_channel),                  //           .channel
		.sink_data          (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_data),                     //           .data
		.sink_startofpacket (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_startofpacket),            //           .startofpacket
		.sink_endofpacket   (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_endofpacket),              //           .endofpacket
		.sink_valid         (hps_0_h2f_lw_axi_master_wr_limiter_cmd_valid_data),                   // sink_valid.data
		.src0_ready         (cmd_demux_001_src0_ready),                                            //       src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                                            //           .valid
		.src0_data          (cmd_demux_001_src0_data),                                             //           .data
		.src0_channel       (cmd_demux_001_src0_channel),                                          //           .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                                    //           .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket),                                      //           .endofpacket
		.src1_ready         (cmd_demux_001_src1_ready),                                            //       src1.ready
		.src1_valid         (cmd_demux_001_src1_valid),                                            //           .valid
		.src1_data          (cmd_demux_001_src1_data),                                             //           .data
		.src1_channel       (cmd_demux_001_src1_channel),                                          //           .channel
		.src1_startofpacket (cmd_demux_001_src1_startofpacket),                                    //           .startofpacket
		.src1_endofpacket   (cmd_demux_001_src1_endofpacket),                                      //           .endofpacket
		.src2_ready         (cmd_demux_001_src2_ready),                                            //       src2.ready
		.src2_valid         (cmd_demux_001_src2_valid),                                            //           .valid
		.src2_data          (cmd_demux_001_src2_data),                                             //           .data
		.src2_channel       (cmd_demux_001_src2_channel),                                          //           .channel
		.src2_startofpacket (cmd_demux_001_src2_startofpacket),                                    //           .startofpacket
		.src2_endofpacket   (cmd_demux_001_src2_endofpacket),                                      //           .endofpacket
		.src3_ready         (cmd_demux_001_src3_ready),                                            //       src3.ready
		.src3_valid         (cmd_demux_001_src3_valid),                                            //           .valid
		.src3_data          (cmd_demux_001_src3_data),                                             //           .data
		.src3_channel       (cmd_demux_001_src3_channel),                                          //           .channel
		.src3_startofpacket (cmd_demux_001_src3_startofpacket),                                    //           .startofpacket
		.src3_endofpacket   (cmd_demux_001_src3_endofpacket),                                      //           .endofpacket
		.src4_ready         (cmd_demux_001_src4_ready),                                            //       src4.ready
		.src4_valid         (cmd_demux_001_src4_valid),                                            //           .valid
		.src4_data          (cmd_demux_001_src4_data),                                             //           .data
		.src4_channel       (cmd_demux_001_src4_channel),                                          //           .channel
		.src4_startofpacket (cmd_demux_001_src4_startofpacket),                                    //           .startofpacket
		.src4_endofpacket   (cmd_demux_001_src4_endofpacket),                                      //           .endofpacket
		.src5_ready         (cmd_demux_001_src5_ready),                                            //       src5.ready
		.src5_valid         (cmd_demux_001_src5_valid),                                            //           .valid
		.src5_data          (cmd_demux_001_src5_data),                                             //           .data
		.src5_channel       (cmd_demux_001_src5_channel),                                          //           .channel
		.src5_startofpacket (cmd_demux_001_src5_startofpacket),                                    //           .startofpacket
		.src5_endofpacket   (cmd_demux_001_src5_endofpacket),                                      //           .endofpacket
		.src6_ready         (cmd_demux_001_src6_ready),                                            //       src6.ready
		.src6_valid         (cmd_demux_001_src6_valid),                                            //           .valid
		.src6_data          (cmd_demux_001_src6_data),                                             //           .data
		.src6_channel       (cmd_demux_001_src6_channel),                                          //           .channel
		.src6_startofpacket (cmd_demux_001_src6_startofpacket),                                    //           .startofpacket
		.src6_endofpacket   (cmd_demux_001_src6_endofpacket),                                      //           .endofpacket
		.src7_ready         (cmd_demux_001_src7_ready),                                            //       src7.ready
		.src7_valid         (cmd_demux_001_src7_valid),                                            //           .valid
		.src7_data          (cmd_demux_001_src7_data),                                             //           .data
		.src7_channel       (cmd_demux_001_src7_channel),                                          //           .channel
		.src7_startofpacket (cmd_demux_001_src7_startofpacket),                                    //           .startofpacket
		.src7_endofpacket   (cmd_demux_001_src7_endofpacket),                                      //           .endofpacket
		.src8_ready         (cmd_demux_001_src8_ready),                                            //       src8.ready
		.src8_valid         (cmd_demux_001_src8_valid),                                            //           .valid
		.src8_data          (cmd_demux_001_src8_data),                                             //           .data
		.src8_channel       (cmd_demux_001_src8_channel),                                          //           .channel
		.src8_startofpacket (cmd_demux_001_src8_startofpacket),                                    //           .startofpacket
		.src8_endofpacket   (cmd_demux_001_src8_endofpacket)                                       //           .endofpacket
	);

	NUEVO_DESIGN_mm_interconnect_0_cmd_demux_001 cmd_demux_002 (
		.clk                (clk_0_clk_clk),                                                       //        clk.clk
		.reset              (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready         (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_ready),                    //       sink.ready
		.sink_channel       (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_channel),                  //           .channel
		.sink_data          (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_data),                     //           .data
		.sink_startofpacket (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_startofpacket),            //           .startofpacket
		.sink_endofpacket   (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_endofpacket),              //           .endofpacket
		.sink_valid         (hps_0_h2f_lw_axi_master_rd_limiter_cmd_valid_data),                   // sink_valid.data
		.src0_ready         (cmd_demux_002_src0_ready),                                            //       src0.ready
		.src0_valid         (cmd_demux_002_src0_valid),                                            //           .valid
		.src0_data          (cmd_demux_002_src0_data),                                             //           .data
		.src0_channel       (cmd_demux_002_src0_channel),                                          //           .channel
		.src0_startofpacket (cmd_demux_002_src0_startofpacket),                                    //           .startofpacket
		.src0_endofpacket   (cmd_demux_002_src0_endofpacket),                                      //           .endofpacket
		.src1_ready         (cmd_demux_002_src1_ready),                                            //       src1.ready
		.src1_valid         (cmd_demux_002_src1_valid),                                            //           .valid
		.src1_data          (cmd_demux_002_src1_data),                                             //           .data
		.src1_channel       (cmd_demux_002_src1_channel),                                          //           .channel
		.src1_startofpacket (cmd_demux_002_src1_startofpacket),                                    //           .startofpacket
		.src1_endofpacket   (cmd_demux_002_src1_endofpacket),                                      //           .endofpacket
		.src2_ready         (cmd_demux_002_src2_ready),                                            //       src2.ready
		.src2_valid         (cmd_demux_002_src2_valid),                                            //           .valid
		.src2_data          (cmd_demux_002_src2_data),                                             //           .data
		.src2_channel       (cmd_demux_002_src2_channel),                                          //           .channel
		.src2_startofpacket (cmd_demux_002_src2_startofpacket),                                    //           .startofpacket
		.src2_endofpacket   (cmd_demux_002_src2_endofpacket),                                      //           .endofpacket
		.src3_ready         (cmd_demux_002_src3_ready),                                            //       src3.ready
		.src3_valid         (cmd_demux_002_src3_valid),                                            //           .valid
		.src3_data          (cmd_demux_002_src3_data),                                             //           .data
		.src3_channel       (cmd_demux_002_src3_channel),                                          //           .channel
		.src3_startofpacket (cmd_demux_002_src3_startofpacket),                                    //           .startofpacket
		.src3_endofpacket   (cmd_demux_002_src3_endofpacket),                                      //           .endofpacket
		.src4_ready         (cmd_demux_002_src4_ready),                                            //       src4.ready
		.src4_valid         (cmd_demux_002_src4_valid),                                            //           .valid
		.src4_data          (cmd_demux_002_src4_data),                                             //           .data
		.src4_channel       (cmd_demux_002_src4_channel),                                          //           .channel
		.src4_startofpacket (cmd_demux_002_src4_startofpacket),                                    //           .startofpacket
		.src4_endofpacket   (cmd_demux_002_src4_endofpacket),                                      //           .endofpacket
		.src5_ready         (cmd_demux_002_src5_ready),                                            //       src5.ready
		.src5_valid         (cmd_demux_002_src5_valid),                                            //           .valid
		.src5_data          (cmd_demux_002_src5_data),                                             //           .data
		.src5_channel       (cmd_demux_002_src5_channel),                                          //           .channel
		.src5_startofpacket (cmd_demux_002_src5_startofpacket),                                    //           .startofpacket
		.src5_endofpacket   (cmd_demux_002_src5_endofpacket),                                      //           .endofpacket
		.src6_ready         (cmd_demux_002_src6_ready),                                            //       src6.ready
		.src6_valid         (cmd_demux_002_src6_valid),                                            //           .valid
		.src6_data          (cmd_demux_002_src6_data),                                             //           .data
		.src6_channel       (cmd_demux_002_src6_channel),                                          //           .channel
		.src6_startofpacket (cmd_demux_002_src6_startofpacket),                                    //           .startofpacket
		.src6_endofpacket   (cmd_demux_002_src6_endofpacket),                                      //           .endofpacket
		.src7_ready         (cmd_demux_002_src7_ready),                                            //       src7.ready
		.src7_valid         (cmd_demux_002_src7_valid),                                            //           .valid
		.src7_data          (cmd_demux_002_src7_data),                                             //           .data
		.src7_channel       (cmd_demux_002_src7_channel),                                          //           .channel
		.src7_startofpacket (cmd_demux_002_src7_startofpacket),                                    //           .startofpacket
		.src7_endofpacket   (cmd_demux_002_src7_endofpacket),                                      //           .endofpacket
		.src8_ready         (cmd_demux_002_src8_ready),                                            //       src8.ready
		.src8_valid         (cmd_demux_002_src8_valid),                                            //           .valid
		.src8_data          (cmd_demux_002_src8_data),                                             //           .data
		.src8_channel       (cmd_demux_002_src8_channel),                                          //           .channel
		.src8_startofpacket (cmd_demux_002_src8_startofpacket),                                    //           .startofpacket
		.src8_endofpacket   (cmd_demux_002_src8_endofpacket)                                       //           .endofpacket
	);

	NUEVO_DESIGN_mm_interconnect_0_cmd_demux_003 cmd_demux_003 (
		.clk                (clk_0_clk_clk),                                                       //       clk.clk
		.reset              (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                                                //      sink.ready
		.sink_channel       (router_003_src_channel),                                              //          .channel
		.sink_data          (router_003_src_data),                                                 //          .data
		.sink_startofpacket (router_003_src_startofpacket),                                        //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                                          //          .endofpacket
		.sink_valid         (router_003_src_valid),                                                //          .valid
		.src0_ready         (cmd_demux_003_src0_ready),                                            //      src0.ready
		.src0_valid         (cmd_demux_003_src0_valid),                                            //          .valid
		.src0_data          (cmd_demux_003_src0_data),                                             //          .data
		.src0_channel       (cmd_demux_003_src0_channel),                                          //          .channel
		.src0_startofpacket (cmd_demux_003_src0_startofpacket),                                    //          .startofpacket
		.src0_endofpacket   (cmd_demux_003_src0_endofpacket)                                       //          .endofpacket
	);

	NUEVO_DESIGN_mm_interconnect_0_cmd_demux_003 cmd_demux_004 (
		.clk                (clk_0_clk_clk),                                                       //       clk.clk
		.reset              (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                                                //      sink.ready
		.sink_channel       (router_004_src_channel),                                              //          .channel
		.sink_data          (router_004_src_data),                                                 //          .data
		.sink_startofpacket (router_004_src_startofpacket),                                        //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                                          //          .endofpacket
		.sink_valid         (router_004_src_valid),                                                //          .valid
		.src0_ready         (cmd_demux_004_src0_ready),                                            //      src0.ready
		.src0_valid         (cmd_demux_004_src0_valid),                                            //          .valid
		.src0_data          (cmd_demux_004_src0_data),                                             //          .data
		.src0_channel       (cmd_demux_004_src0_channel),                                          //          .channel
		.src0_startofpacket (cmd_demux_004_src0_startofpacket),                                    //          .startofpacket
		.src0_endofpacket   (cmd_demux_004_src0_endofpacket)                                       //          .endofpacket
	);

	NUEVO_DESIGN_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (clk_0_clk_clk),                                    //       clk.clk
		.reset               (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                //       src.ready
		.src_valid           (cmd_mux_src_valid),                                //          .valid
		.src_data            (cmd_mux_src_data),                                 //          .data
		.src_channel         (cmd_mux_src_channel),                              //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                        //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                          //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                             //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                             //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                           //          .channel
		.sink0_data          (cmd_demux_src0_data),                              //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket)                        //          .endofpacket
	);

	NUEVO_DESIGN_mm_interconnect_0_cmd_mux cmd_mux_001 (
		.clk                 (clk_0_clk_clk),                                    //       clk.clk
		.reset               (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                            //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                            //          .valid
		.src_data            (cmd_mux_001_src_data),                             //          .data
		.src_channel         (cmd_mux_001_src_channel),                          //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                             //     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                             //          .valid
		.sink0_channel       (cmd_demux_src1_channel),                           //          .channel
		.sink0_data          (cmd_demux_src1_data),                              //          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket)                        //          .endofpacket
	);

	NUEVO_DESIGN_mm_interconnect_0_cmd_mux_002 cmd_mux_002 (
		.clk                 (clk_0_clk_clk),                                                            //       clk.clk
		.reset               (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),                         // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                                                    //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                                                    //          .valid
		.src_data            (cmd_mux_002_src_data),                                                     //          .data
		.src_channel         (cmd_mux_002_src_channel),                                                  //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                                            //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                                              //          .endofpacket
		.sink0_ready         (nios2_qsys_0_data_master_to_sdram_s1_cmd_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (nios2_qsys_0_data_master_to_sdram_s1_cmd_width_adapter_src_valid),         //          .valid
		.sink0_channel       (nios2_qsys_0_data_master_to_sdram_s1_cmd_width_adapter_src_channel),       //          .channel
		.sink0_data          (nios2_qsys_0_data_master_to_sdram_s1_cmd_width_adapter_src_data),          //          .data
		.sink0_startofpacket (nios2_qsys_0_data_master_to_sdram_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (nios2_qsys_0_data_master_to_sdram_s1_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink1_ready         (hps_0_h2f_axi_master_wr_to_sdram_s1_cmd_width_adapter_src_ready),          //     sink1.ready
		.sink1_valid         (hps_0_h2f_axi_master_wr_to_sdram_s1_cmd_width_adapter_src_valid),          //          .valid
		.sink1_channel       (hps_0_h2f_axi_master_wr_to_sdram_s1_cmd_width_adapter_src_channel),        //          .channel
		.sink1_data          (hps_0_h2f_axi_master_wr_to_sdram_s1_cmd_width_adapter_src_data),           //          .data
		.sink1_startofpacket (hps_0_h2f_axi_master_wr_to_sdram_s1_cmd_width_adapter_src_startofpacket),  //          .startofpacket
		.sink1_endofpacket   (hps_0_h2f_axi_master_wr_to_sdram_s1_cmd_width_adapter_src_endofpacket),    //          .endofpacket
		.sink2_ready         (hps_0_h2f_axi_master_rd_to_sdram_s1_cmd_width_adapter_src_ready),          //     sink2.ready
		.sink2_valid         (hps_0_h2f_axi_master_rd_to_sdram_s1_cmd_width_adapter_src_valid),          //          .valid
		.sink2_channel       (hps_0_h2f_axi_master_rd_to_sdram_s1_cmd_width_adapter_src_channel),        //          .channel
		.sink2_data          (hps_0_h2f_axi_master_rd_to_sdram_s1_cmd_width_adapter_src_data),           //          .data
		.sink2_startofpacket (hps_0_h2f_axi_master_rd_to_sdram_s1_cmd_width_adapter_src_startofpacket),  //          .startofpacket
		.sink2_endofpacket   (hps_0_h2f_axi_master_rd_to_sdram_s1_cmd_width_adapter_src_endofpacket)     //          .endofpacket
	);

	NUEVO_DESIGN_mm_interconnect_0_cmd_mux_003 cmd_mux_003 (
		.clk                 (clk_0_clk_clk),                                    //       clk.clk
		.reset               (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                            //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                            //          .valid
		.src_data            (cmd_mux_003_src_data),                             //          .data
		.src_channel         (cmd_mux_003_src_channel),                          //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (cmd_demux_src3_ready),                             //     sink0.ready
		.sink0_valid         (cmd_demux_src3_valid),                             //          .valid
		.sink0_channel       (cmd_demux_src3_channel),                           //          .channel
		.sink0_data          (cmd_demux_src3_data),                              //          .data
		.sink0_startofpacket (cmd_demux_src3_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src3_endofpacket),                       //          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                         //     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                         //          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),                       //          .channel
		.sink1_data          (cmd_demux_001_src0_data),                          //          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),                 //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket),                   //          .endofpacket
		.sink2_ready         (cmd_demux_002_src0_ready),                         //     sink2.ready
		.sink2_valid         (cmd_demux_002_src0_valid),                         //          .valid
		.sink2_channel       (cmd_demux_002_src0_channel),                       //          .channel
		.sink2_data          (cmd_demux_002_src0_data),                          //          .data
		.sink2_startofpacket (cmd_demux_002_src0_startofpacket),                 //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src0_endofpacket)                    //          .endofpacket
	);

	NUEVO_DESIGN_mm_interconnect_0_cmd_mux_003 cmd_mux_004 (
		.clk                 (clk_0_clk_clk),                                    //       clk.clk
		.reset               (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                            //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                            //          .valid
		.src_data            (cmd_mux_004_src_data),                             //          .data
		.src_channel         (cmd_mux_004_src_channel),                          //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (cmd_demux_src4_ready),                             //     sink0.ready
		.sink0_valid         (cmd_demux_src4_valid),                             //          .valid
		.sink0_channel       (cmd_demux_src4_channel),                           //          .channel
		.sink0_data          (cmd_demux_src4_data),                              //          .data
		.sink0_startofpacket (cmd_demux_src4_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src4_endofpacket),                       //          .endofpacket
		.sink1_ready         (cmd_demux_001_src1_ready),                         //     sink1.ready
		.sink1_valid         (cmd_demux_001_src1_valid),                         //          .valid
		.sink1_channel       (cmd_demux_001_src1_channel),                       //          .channel
		.sink1_data          (cmd_demux_001_src1_data),                          //          .data
		.sink1_startofpacket (cmd_demux_001_src1_startofpacket),                 //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src1_endofpacket),                   //          .endofpacket
		.sink2_ready         (cmd_demux_002_src1_ready),                         //     sink2.ready
		.sink2_valid         (cmd_demux_002_src1_valid),                         //          .valid
		.sink2_channel       (cmd_demux_002_src1_channel),                       //          .channel
		.sink2_data          (cmd_demux_002_src1_data),                          //          .data
		.sink2_startofpacket (cmd_demux_002_src1_startofpacket),                 //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src1_endofpacket)                    //          .endofpacket
	);

	NUEVO_DESIGN_mm_interconnect_0_cmd_mux_003 cmd_mux_005 (
		.clk                 (clk_0_clk_clk),                                    //       clk.clk
		.reset               (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                            //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                            //          .valid
		.src_data            (cmd_mux_005_src_data),                             //          .data
		.src_channel         (cmd_mux_005_src_channel),                          //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (cmd_demux_src5_ready),                             //     sink0.ready
		.sink0_valid         (cmd_demux_src5_valid),                             //          .valid
		.sink0_channel       (cmd_demux_src5_channel),                           //          .channel
		.sink0_data          (cmd_demux_src5_data),                              //          .data
		.sink0_startofpacket (cmd_demux_src5_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src5_endofpacket),                       //          .endofpacket
		.sink1_ready         (cmd_demux_001_src2_ready),                         //     sink1.ready
		.sink1_valid         (cmd_demux_001_src2_valid),                         //          .valid
		.sink1_channel       (cmd_demux_001_src2_channel),                       //          .channel
		.sink1_data          (cmd_demux_001_src2_data),                          //          .data
		.sink1_startofpacket (cmd_demux_001_src2_startofpacket),                 //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src2_endofpacket),                   //          .endofpacket
		.sink2_ready         (cmd_demux_002_src2_ready),                         //     sink2.ready
		.sink2_valid         (cmd_demux_002_src2_valid),                         //          .valid
		.sink2_channel       (cmd_demux_002_src2_channel),                       //          .channel
		.sink2_data          (cmd_demux_002_src2_data),                          //          .data
		.sink2_startofpacket (cmd_demux_002_src2_startofpacket),                 //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src2_endofpacket)                    //          .endofpacket
	);

	NUEVO_DESIGN_mm_interconnect_0_cmd_mux_003 cmd_mux_006 (
		.clk                 (clk_0_clk_clk),                                    //       clk.clk
		.reset               (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                            //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                            //          .valid
		.src_data            (cmd_mux_006_src_data),                             //          .data
		.src_channel         (cmd_mux_006_src_channel),                          //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (cmd_demux_src6_ready),                             //     sink0.ready
		.sink0_valid         (cmd_demux_src6_valid),                             //          .valid
		.sink0_channel       (cmd_demux_src6_channel),                           //          .channel
		.sink0_data          (cmd_demux_src6_data),                              //          .data
		.sink0_startofpacket (cmd_demux_src6_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src6_endofpacket),                       //          .endofpacket
		.sink1_ready         (cmd_demux_001_src3_ready),                         //     sink1.ready
		.sink1_valid         (cmd_demux_001_src3_valid),                         //          .valid
		.sink1_channel       (cmd_demux_001_src3_channel),                       //          .channel
		.sink1_data          (cmd_demux_001_src3_data),                          //          .data
		.sink1_startofpacket (cmd_demux_001_src3_startofpacket),                 //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src3_endofpacket),                   //          .endofpacket
		.sink2_ready         (cmd_demux_002_src3_ready),                         //     sink2.ready
		.sink2_valid         (cmd_demux_002_src3_valid),                         //          .valid
		.sink2_channel       (cmd_demux_002_src3_channel),                       //          .channel
		.sink2_data          (cmd_demux_002_src3_data),                          //          .data
		.sink2_startofpacket (cmd_demux_002_src3_startofpacket),                 //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src3_endofpacket)                    //          .endofpacket
	);

	NUEVO_DESIGN_mm_interconnect_0_cmd_mux_003 cmd_mux_007 (
		.clk                 (clk_0_clk_clk),                                    //       clk.clk
		.reset               (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                            //       src.ready
		.src_valid           (cmd_mux_007_src_valid),                            //          .valid
		.src_data            (cmd_mux_007_src_data),                             //          .data
		.src_channel         (cmd_mux_007_src_channel),                          //          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (cmd_demux_src7_ready),                             //     sink0.ready
		.sink0_valid         (cmd_demux_src7_valid),                             //          .valid
		.sink0_channel       (cmd_demux_src7_channel),                           //          .channel
		.sink0_data          (cmd_demux_src7_data),                              //          .data
		.sink0_startofpacket (cmd_demux_src7_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src7_endofpacket),                       //          .endofpacket
		.sink1_ready         (cmd_demux_001_src4_ready),                         //     sink1.ready
		.sink1_valid         (cmd_demux_001_src4_valid),                         //          .valid
		.sink1_channel       (cmd_demux_001_src4_channel),                       //          .channel
		.sink1_data          (cmd_demux_001_src4_data),                          //          .data
		.sink1_startofpacket (cmd_demux_001_src4_startofpacket),                 //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src4_endofpacket),                   //          .endofpacket
		.sink2_ready         (cmd_demux_002_src4_ready),                         //     sink2.ready
		.sink2_valid         (cmd_demux_002_src4_valid),                         //          .valid
		.sink2_channel       (cmd_demux_002_src4_channel),                       //          .channel
		.sink2_data          (cmd_demux_002_src4_data),                          //          .data
		.sink2_startofpacket (cmd_demux_002_src4_startofpacket),                 //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src4_endofpacket)                    //          .endofpacket
	);

	NUEVO_DESIGN_mm_interconnect_0_cmd_mux_003 cmd_mux_008 (
		.clk                 (clk_0_clk_clk),                                    //       clk.clk
		.reset               (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_008_src_ready),                            //       src.ready
		.src_valid           (cmd_mux_008_src_valid),                            //          .valid
		.src_data            (cmd_mux_008_src_data),                             //          .data
		.src_channel         (cmd_mux_008_src_channel),                          //          .channel
		.src_startofpacket   (cmd_mux_008_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (cmd_mux_008_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (cmd_demux_src8_ready),                             //     sink0.ready
		.sink0_valid         (cmd_demux_src8_valid),                             //          .valid
		.sink0_channel       (cmd_demux_src8_channel),                           //          .channel
		.sink0_data          (cmd_demux_src8_data),                              //          .data
		.sink0_startofpacket (cmd_demux_src8_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src8_endofpacket),                       //          .endofpacket
		.sink1_ready         (cmd_demux_001_src5_ready),                         //     sink1.ready
		.sink1_valid         (cmd_demux_001_src5_valid),                         //          .valid
		.sink1_channel       (cmd_demux_001_src5_channel),                       //          .channel
		.sink1_data          (cmd_demux_001_src5_data),                          //          .data
		.sink1_startofpacket (cmd_demux_001_src5_startofpacket),                 //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src5_endofpacket),                   //          .endofpacket
		.sink2_ready         (cmd_demux_002_src5_ready),                         //     sink2.ready
		.sink2_valid         (cmd_demux_002_src5_valid),                         //          .valid
		.sink2_channel       (cmd_demux_002_src5_channel),                       //          .channel
		.sink2_data          (cmd_demux_002_src5_data),                          //          .data
		.sink2_startofpacket (cmd_demux_002_src5_startofpacket),                 //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src5_endofpacket)                    //          .endofpacket
	);

	NUEVO_DESIGN_mm_interconnect_0_cmd_mux_003 cmd_mux_009 (
		.clk                 (clk_0_clk_clk),                                    //       clk.clk
		.reset               (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_009_src_ready),                            //       src.ready
		.src_valid           (cmd_mux_009_src_valid),                            //          .valid
		.src_data            (cmd_mux_009_src_data),                             //          .data
		.src_channel         (cmd_mux_009_src_channel),                          //          .channel
		.src_startofpacket   (cmd_mux_009_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (cmd_mux_009_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (cmd_demux_src9_ready),                             //     sink0.ready
		.sink0_valid         (cmd_demux_src9_valid),                             //          .valid
		.sink0_channel       (cmd_demux_src9_channel),                           //          .channel
		.sink0_data          (cmd_demux_src9_data),                              //          .data
		.sink0_startofpacket (cmd_demux_src9_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src9_endofpacket),                       //          .endofpacket
		.sink1_ready         (cmd_demux_001_src6_ready),                         //     sink1.ready
		.sink1_valid         (cmd_demux_001_src6_valid),                         //          .valid
		.sink1_channel       (cmd_demux_001_src6_channel),                       //          .channel
		.sink1_data          (cmd_demux_001_src6_data),                          //          .data
		.sink1_startofpacket (cmd_demux_001_src6_startofpacket),                 //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src6_endofpacket),                   //          .endofpacket
		.sink2_ready         (cmd_demux_002_src6_ready),                         //     sink2.ready
		.sink2_valid         (cmd_demux_002_src6_valid),                         //          .valid
		.sink2_channel       (cmd_demux_002_src6_channel),                       //          .channel
		.sink2_data          (cmd_demux_002_src6_data),                          //          .data
		.sink2_startofpacket (cmd_demux_002_src6_startofpacket),                 //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src6_endofpacket)                    //          .endofpacket
	);

	NUEVO_DESIGN_mm_interconnect_0_cmd_mux_003 cmd_mux_010 (
		.clk                 (clk_0_clk_clk),                                    //       clk.clk
		.reset               (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_010_src_ready),                            //       src.ready
		.src_valid           (cmd_mux_010_src_valid),                            //          .valid
		.src_data            (cmd_mux_010_src_data),                             //          .data
		.src_channel         (cmd_mux_010_src_channel),                          //          .channel
		.src_startofpacket   (cmd_mux_010_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (cmd_mux_010_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (cmd_demux_src10_ready),                            //     sink0.ready
		.sink0_valid         (cmd_demux_src10_valid),                            //          .valid
		.sink0_channel       (cmd_demux_src10_channel),                          //          .channel
		.sink0_data          (cmd_demux_src10_data),                             //          .data
		.sink0_startofpacket (cmd_demux_src10_startofpacket),                    //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src10_endofpacket),                      //          .endofpacket
		.sink1_ready         (cmd_demux_001_src7_ready),                         //     sink1.ready
		.sink1_valid         (cmd_demux_001_src7_valid),                         //          .valid
		.sink1_channel       (cmd_demux_001_src7_channel),                       //          .channel
		.sink1_data          (cmd_demux_001_src7_data),                          //          .data
		.sink1_startofpacket (cmd_demux_001_src7_startofpacket),                 //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src7_endofpacket),                   //          .endofpacket
		.sink2_ready         (cmd_demux_002_src7_ready),                         //     sink2.ready
		.sink2_valid         (cmd_demux_002_src7_valid),                         //          .valid
		.sink2_channel       (cmd_demux_002_src7_channel),                       //          .channel
		.sink2_data          (cmd_demux_002_src7_data),                          //          .data
		.sink2_startofpacket (cmd_demux_002_src7_startofpacket),                 //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src7_endofpacket)                    //          .endofpacket
	);

	NUEVO_DESIGN_mm_interconnect_0_cmd_mux_003 cmd_mux_011 (
		.clk                 (clk_0_clk_clk),                                    //       clk.clk
		.reset               (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_011_src_ready),                            //       src.ready
		.src_valid           (cmd_mux_011_src_valid),                            //          .valid
		.src_data            (cmd_mux_011_src_data),                             //          .data
		.src_channel         (cmd_mux_011_src_channel),                          //          .channel
		.src_startofpacket   (cmd_mux_011_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (cmd_mux_011_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (cmd_demux_src11_ready),                            //     sink0.ready
		.sink0_valid         (cmd_demux_src11_valid),                            //          .valid
		.sink0_channel       (cmd_demux_src11_channel),                          //          .channel
		.sink0_data          (cmd_demux_src11_data),                             //          .data
		.sink0_startofpacket (cmd_demux_src11_startofpacket),                    //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src11_endofpacket),                      //          .endofpacket
		.sink1_ready         (cmd_demux_001_src8_ready),                         //     sink1.ready
		.sink1_valid         (cmd_demux_001_src8_valid),                         //          .valid
		.sink1_channel       (cmd_demux_001_src8_channel),                       //          .channel
		.sink1_data          (cmd_demux_001_src8_data),                          //          .data
		.sink1_startofpacket (cmd_demux_001_src8_startofpacket),                 //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src8_endofpacket),                   //          .endofpacket
		.sink2_ready         (cmd_demux_002_src8_ready),                         //     sink2.ready
		.sink2_valid         (cmd_demux_002_src8_valid),                         //          .valid
		.sink2_channel       (cmd_demux_002_src8_channel),                       //          .channel
		.sink2_data          (cmd_demux_002_src8_data),                          //          .data
		.sink2_startofpacket (cmd_demux_002_src8_startofpacket),                 //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src8_endofpacket)                    //          .endofpacket
	);

	NUEVO_DESIGN_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (clk_0_clk_clk),                                    //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                             //      sink.ready
		.sink_channel       (router_005_src_channel),                           //          .channel
		.sink_data          (router_005_src_data),                              //          .data
		.sink_startofpacket (router_005_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_005_src_valid),                             //          .valid
		.src0_ready         (rsp_demux_src0_ready),                             //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                             //          .valid
		.src0_data          (rsp_demux_src0_data),                              //          .data
		.src0_channel       (rsp_demux_src0_channel),                           //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                     //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                        //          .endofpacket
	);

	NUEVO_DESIGN_mm_interconnect_0_rsp_demux rsp_demux_001 (
		.clk                (clk_0_clk_clk),                                    //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                             //      sink.ready
		.sink_channel       (router_006_src_channel),                           //          .channel
		.sink_data          (router_006_src_data),                              //          .data
		.sink_startofpacket (router_006_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_006_src_valid),                             //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                         //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                         //          .valid
		.src0_data          (rsp_demux_001_src0_data),                          //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                       //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)                    //          .endofpacket
	);

	NUEVO_DESIGN_mm_interconnect_0_rsp_demux_002 rsp_demux_002 (
		.clk                (clk_0_clk_clk),                                    //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_007_src_ready),                             //      sink.ready
		.sink_channel       (router_007_src_channel),                           //          .channel
		.sink_data          (router_007_src_data),                              //          .data
		.sink_startofpacket (router_007_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_007_src_valid),                             //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                         //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                         //          .valid
		.src0_data          (rsp_demux_002_src0_data),                          //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                       //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket),                   //          .endofpacket
		.src1_ready         (rsp_demux_002_src1_ready),                         //      src1.ready
		.src1_valid         (rsp_demux_002_src1_valid),                         //          .valid
		.src1_data          (rsp_demux_002_src1_data),                          //          .data
		.src1_channel       (rsp_demux_002_src1_channel),                       //          .channel
		.src1_startofpacket (rsp_demux_002_src1_startofpacket),                 //          .startofpacket
		.src1_endofpacket   (rsp_demux_002_src1_endofpacket),                   //          .endofpacket
		.src2_ready         (rsp_demux_002_src2_ready),                         //      src2.ready
		.src2_valid         (rsp_demux_002_src2_valid),                         //          .valid
		.src2_data          (rsp_demux_002_src2_data),                          //          .data
		.src2_channel       (rsp_demux_002_src2_channel),                       //          .channel
		.src2_startofpacket (rsp_demux_002_src2_startofpacket),                 //          .startofpacket
		.src2_endofpacket   (rsp_demux_002_src2_endofpacket)                    //          .endofpacket
	);

	NUEVO_DESIGN_mm_interconnect_0_rsp_demux_003 rsp_demux_003 (
		.clk                (clk_0_clk_clk),                                    //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_008_src_ready),                             //      sink.ready
		.sink_channel       (router_008_src_channel),                           //          .channel
		.sink_data          (router_008_src_data),                              //          .data
		.sink_startofpacket (router_008_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_008_src_valid),                             //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                         //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                         //          .valid
		.src0_data          (rsp_demux_003_src0_data),                          //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                       //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket),                   //          .endofpacket
		.src1_ready         (rsp_demux_003_src1_ready),                         //      src1.ready
		.src1_valid         (rsp_demux_003_src1_valid),                         //          .valid
		.src1_data          (rsp_demux_003_src1_data),                          //          .data
		.src1_channel       (rsp_demux_003_src1_channel),                       //          .channel
		.src1_startofpacket (rsp_demux_003_src1_startofpacket),                 //          .startofpacket
		.src1_endofpacket   (rsp_demux_003_src1_endofpacket),                   //          .endofpacket
		.src2_ready         (rsp_demux_003_src2_ready),                         //      src2.ready
		.src2_valid         (rsp_demux_003_src2_valid),                         //          .valid
		.src2_data          (rsp_demux_003_src2_data),                          //          .data
		.src2_channel       (rsp_demux_003_src2_channel),                       //          .channel
		.src2_startofpacket (rsp_demux_003_src2_startofpacket),                 //          .startofpacket
		.src2_endofpacket   (rsp_demux_003_src2_endofpacket)                    //          .endofpacket
	);

	NUEVO_DESIGN_mm_interconnect_0_rsp_demux_003 rsp_demux_004 (
		.clk                (clk_0_clk_clk),                                    //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_009_src_ready),                             //      sink.ready
		.sink_channel       (router_009_src_channel),                           //          .channel
		.sink_data          (router_009_src_data),                              //          .data
		.sink_startofpacket (router_009_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_009_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_009_src_valid),                             //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                         //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                         //          .valid
		.src0_data          (rsp_demux_004_src0_data),                          //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                       //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket),                   //          .endofpacket
		.src1_ready         (rsp_demux_004_src1_ready),                         //      src1.ready
		.src1_valid         (rsp_demux_004_src1_valid),                         //          .valid
		.src1_data          (rsp_demux_004_src1_data),                          //          .data
		.src1_channel       (rsp_demux_004_src1_channel),                       //          .channel
		.src1_startofpacket (rsp_demux_004_src1_startofpacket),                 //          .startofpacket
		.src1_endofpacket   (rsp_demux_004_src1_endofpacket),                   //          .endofpacket
		.src2_ready         (rsp_demux_004_src2_ready),                         //      src2.ready
		.src2_valid         (rsp_demux_004_src2_valid),                         //          .valid
		.src2_data          (rsp_demux_004_src2_data),                          //          .data
		.src2_channel       (rsp_demux_004_src2_channel),                       //          .channel
		.src2_startofpacket (rsp_demux_004_src2_startofpacket),                 //          .startofpacket
		.src2_endofpacket   (rsp_demux_004_src2_endofpacket)                    //          .endofpacket
	);

	NUEVO_DESIGN_mm_interconnect_0_rsp_demux_003 rsp_demux_005 (
		.clk                (clk_0_clk_clk),                                    //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_010_src_ready),                             //      sink.ready
		.sink_channel       (router_010_src_channel),                           //          .channel
		.sink_data          (router_010_src_data),                              //          .data
		.sink_startofpacket (router_010_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_010_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_010_src_valid),                             //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                         //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                         //          .valid
		.src0_data          (rsp_demux_005_src0_data),                          //          .data
		.src0_channel       (rsp_demux_005_src0_channel),                       //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket),                   //          .endofpacket
		.src1_ready         (rsp_demux_005_src1_ready),                         //      src1.ready
		.src1_valid         (rsp_demux_005_src1_valid),                         //          .valid
		.src1_data          (rsp_demux_005_src1_data),                          //          .data
		.src1_channel       (rsp_demux_005_src1_channel),                       //          .channel
		.src1_startofpacket (rsp_demux_005_src1_startofpacket),                 //          .startofpacket
		.src1_endofpacket   (rsp_demux_005_src1_endofpacket),                   //          .endofpacket
		.src2_ready         (rsp_demux_005_src2_ready),                         //      src2.ready
		.src2_valid         (rsp_demux_005_src2_valid),                         //          .valid
		.src2_data          (rsp_demux_005_src2_data),                          //          .data
		.src2_channel       (rsp_demux_005_src2_channel),                       //          .channel
		.src2_startofpacket (rsp_demux_005_src2_startofpacket),                 //          .startofpacket
		.src2_endofpacket   (rsp_demux_005_src2_endofpacket)                    //          .endofpacket
	);

	NUEVO_DESIGN_mm_interconnect_0_rsp_demux_003 rsp_demux_006 (
		.clk                (clk_0_clk_clk),                                    //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_011_src_ready),                             //      sink.ready
		.sink_channel       (router_011_src_channel),                           //          .channel
		.sink_data          (router_011_src_data),                              //          .data
		.sink_startofpacket (router_011_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_011_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_011_src_valid),                             //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                         //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                         //          .valid
		.src0_data          (rsp_demux_006_src0_data),                          //          .data
		.src0_channel       (rsp_demux_006_src0_channel),                       //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket),                   //          .endofpacket
		.src1_ready         (rsp_demux_006_src1_ready),                         //      src1.ready
		.src1_valid         (rsp_demux_006_src1_valid),                         //          .valid
		.src1_data          (rsp_demux_006_src1_data),                          //          .data
		.src1_channel       (rsp_demux_006_src1_channel),                       //          .channel
		.src1_startofpacket (rsp_demux_006_src1_startofpacket),                 //          .startofpacket
		.src1_endofpacket   (rsp_demux_006_src1_endofpacket),                   //          .endofpacket
		.src2_ready         (rsp_demux_006_src2_ready),                         //      src2.ready
		.src2_valid         (rsp_demux_006_src2_valid),                         //          .valid
		.src2_data          (rsp_demux_006_src2_data),                          //          .data
		.src2_channel       (rsp_demux_006_src2_channel),                       //          .channel
		.src2_startofpacket (rsp_demux_006_src2_startofpacket),                 //          .startofpacket
		.src2_endofpacket   (rsp_demux_006_src2_endofpacket)                    //          .endofpacket
	);

	NUEVO_DESIGN_mm_interconnect_0_rsp_demux_003 rsp_demux_007 (
		.clk                (clk_0_clk_clk),                                    //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_012_src_ready),                             //      sink.ready
		.sink_channel       (router_012_src_channel),                           //          .channel
		.sink_data          (router_012_src_data),                              //          .data
		.sink_startofpacket (router_012_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_012_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_012_src_valid),                             //          .valid
		.src0_ready         (rsp_demux_007_src0_ready),                         //      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),                         //          .valid
		.src0_data          (rsp_demux_007_src0_data),                          //          .data
		.src0_channel       (rsp_demux_007_src0_channel),                       //          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket),                   //          .endofpacket
		.src1_ready         (rsp_demux_007_src1_ready),                         //      src1.ready
		.src1_valid         (rsp_demux_007_src1_valid),                         //          .valid
		.src1_data          (rsp_demux_007_src1_data),                          //          .data
		.src1_channel       (rsp_demux_007_src1_channel),                       //          .channel
		.src1_startofpacket (rsp_demux_007_src1_startofpacket),                 //          .startofpacket
		.src1_endofpacket   (rsp_demux_007_src1_endofpacket),                   //          .endofpacket
		.src2_ready         (rsp_demux_007_src2_ready),                         //      src2.ready
		.src2_valid         (rsp_demux_007_src2_valid),                         //          .valid
		.src2_data          (rsp_demux_007_src2_data),                          //          .data
		.src2_channel       (rsp_demux_007_src2_channel),                       //          .channel
		.src2_startofpacket (rsp_demux_007_src2_startofpacket),                 //          .startofpacket
		.src2_endofpacket   (rsp_demux_007_src2_endofpacket)                    //          .endofpacket
	);

	NUEVO_DESIGN_mm_interconnect_0_rsp_demux_003 rsp_demux_008 (
		.clk                (clk_0_clk_clk),                                    //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_013_src_ready),                             //      sink.ready
		.sink_channel       (router_013_src_channel),                           //          .channel
		.sink_data          (router_013_src_data),                              //          .data
		.sink_startofpacket (router_013_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_013_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_013_src_valid),                             //          .valid
		.src0_ready         (rsp_demux_008_src0_ready),                         //      src0.ready
		.src0_valid         (rsp_demux_008_src0_valid),                         //          .valid
		.src0_data          (rsp_demux_008_src0_data),                          //          .data
		.src0_channel       (rsp_demux_008_src0_channel),                       //          .channel
		.src0_startofpacket (rsp_demux_008_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_008_src0_endofpacket),                   //          .endofpacket
		.src1_ready         (rsp_demux_008_src1_ready),                         //      src1.ready
		.src1_valid         (rsp_demux_008_src1_valid),                         //          .valid
		.src1_data          (rsp_demux_008_src1_data),                          //          .data
		.src1_channel       (rsp_demux_008_src1_channel),                       //          .channel
		.src1_startofpacket (rsp_demux_008_src1_startofpacket),                 //          .startofpacket
		.src1_endofpacket   (rsp_demux_008_src1_endofpacket),                   //          .endofpacket
		.src2_ready         (rsp_demux_008_src2_ready),                         //      src2.ready
		.src2_valid         (rsp_demux_008_src2_valid),                         //          .valid
		.src2_data          (rsp_demux_008_src2_data),                          //          .data
		.src2_channel       (rsp_demux_008_src2_channel),                       //          .channel
		.src2_startofpacket (rsp_demux_008_src2_startofpacket),                 //          .startofpacket
		.src2_endofpacket   (rsp_demux_008_src2_endofpacket)                    //          .endofpacket
	);

	NUEVO_DESIGN_mm_interconnect_0_rsp_demux_003 rsp_demux_009 (
		.clk                (clk_0_clk_clk),                                    //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_014_src_ready),                             //      sink.ready
		.sink_channel       (router_014_src_channel),                           //          .channel
		.sink_data          (router_014_src_data),                              //          .data
		.sink_startofpacket (router_014_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_014_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_014_src_valid),                             //          .valid
		.src0_ready         (rsp_demux_009_src0_ready),                         //      src0.ready
		.src0_valid         (rsp_demux_009_src0_valid),                         //          .valid
		.src0_data          (rsp_demux_009_src0_data),                          //          .data
		.src0_channel       (rsp_demux_009_src0_channel),                       //          .channel
		.src0_startofpacket (rsp_demux_009_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_009_src0_endofpacket),                   //          .endofpacket
		.src1_ready         (rsp_demux_009_src1_ready),                         //      src1.ready
		.src1_valid         (rsp_demux_009_src1_valid),                         //          .valid
		.src1_data          (rsp_demux_009_src1_data),                          //          .data
		.src1_channel       (rsp_demux_009_src1_channel),                       //          .channel
		.src1_startofpacket (rsp_demux_009_src1_startofpacket),                 //          .startofpacket
		.src1_endofpacket   (rsp_demux_009_src1_endofpacket),                   //          .endofpacket
		.src2_ready         (rsp_demux_009_src2_ready),                         //      src2.ready
		.src2_valid         (rsp_demux_009_src2_valid),                         //          .valid
		.src2_data          (rsp_demux_009_src2_data),                          //          .data
		.src2_channel       (rsp_demux_009_src2_channel),                       //          .channel
		.src2_startofpacket (rsp_demux_009_src2_startofpacket),                 //          .startofpacket
		.src2_endofpacket   (rsp_demux_009_src2_endofpacket)                    //          .endofpacket
	);

	NUEVO_DESIGN_mm_interconnect_0_rsp_demux_003 rsp_demux_010 (
		.clk                (clk_0_clk_clk),                                    //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_015_src_ready),                             //      sink.ready
		.sink_channel       (router_015_src_channel),                           //          .channel
		.sink_data          (router_015_src_data),                              //          .data
		.sink_startofpacket (router_015_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_015_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_015_src_valid),                             //          .valid
		.src0_ready         (rsp_demux_010_src0_ready),                         //      src0.ready
		.src0_valid         (rsp_demux_010_src0_valid),                         //          .valid
		.src0_data          (rsp_demux_010_src0_data),                          //          .data
		.src0_channel       (rsp_demux_010_src0_channel),                       //          .channel
		.src0_startofpacket (rsp_demux_010_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_010_src0_endofpacket),                   //          .endofpacket
		.src1_ready         (rsp_demux_010_src1_ready),                         //      src1.ready
		.src1_valid         (rsp_demux_010_src1_valid),                         //          .valid
		.src1_data          (rsp_demux_010_src1_data),                          //          .data
		.src1_channel       (rsp_demux_010_src1_channel),                       //          .channel
		.src1_startofpacket (rsp_demux_010_src1_startofpacket),                 //          .startofpacket
		.src1_endofpacket   (rsp_demux_010_src1_endofpacket),                   //          .endofpacket
		.src2_ready         (rsp_demux_010_src2_ready),                         //      src2.ready
		.src2_valid         (rsp_demux_010_src2_valid),                         //          .valid
		.src2_data          (rsp_demux_010_src2_data),                          //          .data
		.src2_channel       (rsp_demux_010_src2_channel),                       //          .channel
		.src2_startofpacket (rsp_demux_010_src2_startofpacket),                 //          .startofpacket
		.src2_endofpacket   (rsp_demux_010_src2_endofpacket)                    //          .endofpacket
	);

	NUEVO_DESIGN_mm_interconnect_0_rsp_demux_003 rsp_demux_011 (
		.clk                (clk_0_clk_clk),                                    //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_016_src_ready),                             //      sink.ready
		.sink_channel       (router_016_src_channel),                           //          .channel
		.sink_data          (router_016_src_data),                              //          .data
		.sink_startofpacket (router_016_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_016_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_016_src_valid),                             //          .valid
		.src0_ready         (rsp_demux_011_src0_ready),                         //      src0.ready
		.src0_valid         (rsp_demux_011_src0_valid),                         //          .valid
		.src0_data          (rsp_demux_011_src0_data),                          //          .data
		.src0_channel       (rsp_demux_011_src0_channel),                       //          .channel
		.src0_startofpacket (rsp_demux_011_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_011_src0_endofpacket),                   //          .endofpacket
		.src1_ready         (rsp_demux_011_src1_ready),                         //      src1.ready
		.src1_valid         (rsp_demux_011_src1_valid),                         //          .valid
		.src1_data          (rsp_demux_011_src1_data),                          //          .data
		.src1_channel       (rsp_demux_011_src1_channel),                       //          .channel
		.src1_startofpacket (rsp_demux_011_src1_startofpacket),                 //          .startofpacket
		.src1_endofpacket   (rsp_demux_011_src1_endofpacket),                   //          .endofpacket
		.src2_ready         (rsp_demux_011_src2_ready),                         //      src2.ready
		.src2_valid         (rsp_demux_011_src2_valid),                         //          .valid
		.src2_data          (rsp_demux_011_src2_data),                          //          .data
		.src2_channel       (rsp_demux_011_src2_channel),                       //          .channel
		.src2_startofpacket (rsp_demux_011_src2_startofpacket),                 //          .startofpacket
		.src2_endofpacket   (rsp_demux_011_src2_endofpacket)                    //          .endofpacket
	);

	NUEVO_DESIGN_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                  (clk_0_clk_clk),                                                            //       clk.clk
		.reset                (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),                         // clk_reset.reset
		.src_ready            (rsp_mux_src_ready),                                                        //       src.ready
		.src_valid            (rsp_mux_src_valid),                                                        //          .valid
		.src_data             (rsp_mux_src_data),                                                         //          .data
		.src_channel          (rsp_mux_src_channel),                                                      //          .channel
		.src_startofpacket    (rsp_mux_src_startofpacket),                                                //          .startofpacket
		.src_endofpacket      (rsp_mux_src_endofpacket),                                                  //          .endofpacket
		.sink0_ready          (rsp_demux_src0_ready),                                                     //     sink0.ready
		.sink0_valid          (rsp_demux_src0_valid),                                                     //          .valid
		.sink0_channel        (rsp_demux_src0_channel),                                                   //          .channel
		.sink0_data           (rsp_demux_src0_data),                                                      //          .data
		.sink0_startofpacket  (rsp_demux_src0_startofpacket),                                             //          .startofpacket
		.sink0_endofpacket    (rsp_demux_src0_endofpacket),                                               //          .endofpacket
		.sink1_ready          (rsp_demux_001_src0_ready),                                                 //     sink1.ready
		.sink1_valid          (rsp_demux_001_src0_valid),                                                 //          .valid
		.sink1_channel        (rsp_demux_001_src0_channel),                                               //          .channel
		.sink1_data           (rsp_demux_001_src0_data),                                                  //          .data
		.sink1_startofpacket  (rsp_demux_001_src0_startofpacket),                                         //          .startofpacket
		.sink1_endofpacket    (rsp_demux_001_src0_endofpacket),                                           //          .endofpacket
		.sink2_ready          (sdram_s1_to_nios2_qsys_0_data_master_rsp_width_adapter_src_ready),         //     sink2.ready
		.sink2_valid          (sdram_s1_to_nios2_qsys_0_data_master_rsp_width_adapter_src_valid),         //          .valid
		.sink2_channel        (sdram_s1_to_nios2_qsys_0_data_master_rsp_width_adapter_src_channel),       //          .channel
		.sink2_data           (sdram_s1_to_nios2_qsys_0_data_master_rsp_width_adapter_src_data),          //          .data
		.sink2_startofpacket  (sdram_s1_to_nios2_qsys_0_data_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink2_endofpacket    (sdram_s1_to_nios2_qsys_0_data_master_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink3_ready          (rsp_demux_003_src0_ready),                                                 //     sink3.ready
		.sink3_valid          (rsp_demux_003_src0_valid),                                                 //          .valid
		.sink3_channel        (rsp_demux_003_src0_channel),                                               //          .channel
		.sink3_data           (rsp_demux_003_src0_data),                                                  //          .data
		.sink3_startofpacket  (rsp_demux_003_src0_startofpacket),                                         //          .startofpacket
		.sink3_endofpacket    (rsp_demux_003_src0_endofpacket),                                           //          .endofpacket
		.sink4_ready          (rsp_demux_004_src0_ready),                                                 //     sink4.ready
		.sink4_valid          (rsp_demux_004_src0_valid),                                                 //          .valid
		.sink4_channel        (rsp_demux_004_src0_channel),                                               //          .channel
		.sink4_data           (rsp_demux_004_src0_data),                                                  //          .data
		.sink4_startofpacket  (rsp_demux_004_src0_startofpacket),                                         //          .startofpacket
		.sink4_endofpacket    (rsp_demux_004_src0_endofpacket),                                           //          .endofpacket
		.sink5_ready          (rsp_demux_005_src0_ready),                                                 //     sink5.ready
		.sink5_valid          (rsp_demux_005_src0_valid),                                                 //          .valid
		.sink5_channel        (rsp_demux_005_src0_channel),                                               //          .channel
		.sink5_data           (rsp_demux_005_src0_data),                                                  //          .data
		.sink5_startofpacket  (rsp_demux_005_src0_startofpacket),                                         //          .startofpacket
		.sink5_endofpacket    (rsp_demux_005_src0_endofpacket),                                           //          .endofpacket
		.sink6_ready          (rsp_demux_006_src0_ready),                                                 //     sink6.ready
		.sink6_valid          (rsp_demux_006_src0_valid),                                                 //          .valid
		.sink6_channel        (rsp_demux_006_src0_channel),                                               //          .channel
		.sink6_data           (rsp_demux_006_src0_data),                                                  //          .data
		.sink6_startofpacket  (rsp_demux_006_src0_startofpacket),                                         //          .startofpacket
		.sink6_endofpacket    (rsp_demux_006_src0_endofpacket),                                           //          .endofpacket
		.sink7_ready          (rsp_demux_007_src0_ready),                                                 //     sink7.ready
		.sink7_valid          (rsp_demux_007_src0_valid),                                                 //          .valid
		.sink7_channel        (rsp_demux_007_src0_channel),                                               //          .channel
		.sink7_data           (rsp_demux_007_src0_data),                                                  //          .data
		.sink7_startofpacket  (rsp_demux_007_src0_startofpacket),                                         //          .startofpacket
		.sink7_endofpacket    (rsp_demux_007_src0_endofpacket),                                           //          .endofpacket
		.sink8_ready          (rsp_demux_008_src0_ready),                                                 //     sink8.ready
		.sink8_valid          (rsp_demux_008_src0_valid),                                                 //          .valid
		.sink8_channel        (rsp_demux_008_src0_channel),                                               //          .channel
		.sink8_data           (rsp_demux_008_src0_data),                                                  //          .data
		.sink8_startofpacket  (rsp_demux_008_src0_startofpacket),                                         //          .startofpacket
		.sink8_endofpacket    (rsp_demux_008_src0_endofpacket),                                           //          .endofpacket
		.sink9_ready          (rsp_demux_009_src0_ready),                                                 //     sink9.ready
		.sink9_valid          (rsp_demux_009_src0_valid),                                                 //          .valid
		.sink9_channel        (rsp_demux_009_src0_channel),                                               //          .channel
		.sink9_data           (rsp_demux_009_src0_data),                                                  //          .data
		.sink9_startofpacket  (rsp_demux_009_src0_startofpacket),                                         //          .startofpacket
		.sink9_endofpacket    (rsp_demux_009_src0_endofpacket),                                           //          .endofpacket
		.sink10_ready         (rsp_demux_010_src0_ready),                                                 //    sink10.ready
		.sink10_valid         (rsp_demux_010_src0_valid),                                                 //          .valid
		.sink10_channel       (rsp_demux_010_src0_channel),                                               //          .channel
		.sink10_data          (rsp_demux_010_src0_data),                                                  //          .data
		.sink10_startofpacket (rsp_demux_010_src0_startofpacket),                                         //          .startofpacket
		.sink10_endofpacket   (rsp_demux_010_src0_endofpacket),                                           //          .endofpacket
		.sink11_ready         (rsp_demux_011_src0_ready),                                                 //    sink11.ready
		.sink11_valid         (rsp_demux_011_src0_valid),                                                 //          .valid
		.sink11_channel       (rsp_demux_011_src0_channel),                                               //          .channel
		.sink11_data          (rsp_demux_011_src0_data),                                                  //          .data
		.sink11_startofpacket (rsp_demux_011_src0_startofpacket),                                         //          .startofpacket
		.sink11_endofpacket   (rsp_demux_011_src0_endofpacket)                                            //          .endofpacket
	);

	NUEVO_DESIGN_mm_interconnect_0_rsp_mux_001 rsp_mux_001 (
		.clk                 (clk_0_clk_clk),                                                       //       clk.clk
		.reset               (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                                               //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                                               //          .valid
		.src_data            (rsp_mux_001_src_data),                                                //          .data
		.src_channel         (rsp_mux_001_src_channel),                                             //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                                       //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                                         //          .endofpacket
		.sink0_ready         (rsp_demux_003_src1_ready),                                            //     sink0.ready
		.sink0_valid         (rsp_demux_003_src1_valid),                                            //          .valid
		.sink0_channel       (rsp_demux_003_src1_channel),                                          //          .channel
		.sink0_data          (rsp_demux_003_src1_data),                                             //          .data
		.sink0_startofpacket (rsp_demux_003_src1_startofpacket),                                    //          .startofpacket
		.sink0_endofpacket   (rsp_demux_003_src1_endofpacket),                                      //          .endofpacket
		.sink1_ready         (rsp_demux_004_src1_ready),                                            //     sink1.ready
		.sink1_valid         (rsp_demux_004_src1_valid),                                            //          .valid
		.sink1_channel       (rsp_demux_004_src1_channel),                                          //          .channel
		.sink1_data          (rsp_demux_004_src1_data),                                             //          .data
		.sink1_startofpacket (rsp_demux_004_src1_startofpacket),                                    //          .startofpacket
		.sink1_endofpacket   (rsp_demux_004_src1_endofpacket),                                      //          .endofpacket
		.sink2_ready         (rsp_demux_005_src1_ready),                                            //     sink2.ready
		.sink2_valid         (rsp_demux_005_src1_valid),                                            //          .valid
		.sink2_channel       (rsp_demux_005_src1_channel),                                          //          .channel
		.sink2_data          (rsp_demux_005_src1_data),                                             //          .data
		.sink2_startofpacket (rsp_demux_005_src1_startofpacket),                                    //          .startofpacket
		.sink2_endofpacket   (rsp_demux_005_src1_endofpacket),                                      //          .endofpacket
		.sink3_ready         (rsp_demux_006_src1_ready),                                            //     sink3.ready
		.sink3_valid         (rsp_demux_006_src1_valid),                                            //          .valid
		.sink3_channel       (rsp_demux_006_src1_channel),                                          //          .channel
		.sink3_data          (rsp_demux_006_src1_data),                                             //          .data
		.sink3_startofpacket (rsp_demux_006_src1_startofpacket),                                    //          .startofpacket
		.sink3_endofpacket   (rsp_demux_006_src1_endofpacket),                                      //          .endofpacket
		.sink4_ready         (rsp_demux_007_src1_ready),                                            //     sink4.ready
		.sink4_valid         (rsp_demux_007_src1_valid),                                            //          .valid
		.sink4_channel       (rsp_demux_007_src1_channel),                                          //          .channel
		.sink4_data          (rsp_demux_007_src1_data),                                             //          .data
		.sink4_startofpacket (rsp_demux_007_src1_startofpacket),                                    //          .startofpacket
		.sink4_endofpacket   (rsp_demux_007_src1_endofpacket),                                      //          .endofpacket
		.sink5_ready         (rsp_demux_008_src1_ready),                                            //     sink5.ready
		.sink5_valid         (rsp_demux_008_src1_valid),                                            //          .valid
		.sink5_channel       (rsp_demux_008_src1_channel),                                          //          .channel
		.sink5_data          (rsp_demux_008_src1_data),                                             //          .data
		.sink5_startofpacket (rsp_demux_008_src1_startofpacket),                                    //          .startofpacket
		.sink5_endofpacket   (rsp_demux_008_src1_endofpacket),                                      //          .endofpacket
		.sink6_ready         (rsp_demux_009_src1_ready),                                            //     sink6.ready
		.sink6_valid         (rsp_demux_009_src1_valid),                                            //          .valid
		.sink6_channel       (rsp_demux_009_src1_channel),                                          //          .channel
		.sink6_data          (rsp_demux_009_src1_data),                                             //          .data
		.sink6_startofpacket (rsp_demux_009_src1_startofpacket),                                    //          .startofpacket
		.sink6_endofpacket   (rsp_demux_009_src1_endofpacket),                                      //          .endofpacket
		.sink7_ready         (rsp_demux_010_src1_ready),                                            //     sink7.ready
		.sink7_valid         (rsp_demux_010_src1_valid),                                            //          .valid
		.sink7_channel       (rsp_demux_010_src1_channel),                                          //          .channel
		.sink7_data          (rsp_demux_010_src1_data),                                             //          .data
		.sink7_startofpacket (rsp_demux_010_src1_startofpacket),                                    //          .startofpacket
		.sink7_endofpacket   (rsp_demux_010_src1_endofpacket),                                      //          .endofpacket
		.sink8_ready         (rsp_demux_011_src1_ready),                                            //     sink8.ready
		.sink8_valid         (rsp_demux_011_src1_valid),                                            //          .valid
		.sink8_channel       (rsp_demux_011_src1_channel),                                          //          .channel
		.sink8_data          (rsp_demux_011_src1_data),                                             //          .data
		.sink8_startofpacket (rsp_demux_011_src1_startofpacket),                                    //          .startofpacket
		.sink8_endofpacket   (rsp_demux_011_src1_endofpacket)                                       //          .endofpacket
	);

	NUEVO_DESIGN_mm_interconnect_0_rsp_mux_001 rsp_mux_002 (
		.clk                 (clk_0_clk_clk),                                                       //       clk.clk
		.reset               (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_002_src_ready),                                               //       src.ready
		.src_valid           (rsp_mux_002_src_valid),                                               //          .valid
		.src_data            (rsp_mux_002_src_data),                                                //          .data
		.src_channel         (rsp_mux_002_src_channel),                                             //          .channel
		.src_startofpacket   (rsp_mux_002_src_startofpacket),                                       //          .startofpacket
		.src_endofpacket     (rsp_mux_002_src_endofpacket),                                         //          .endofpacket
		.sink0_ready         (rsp_demux_003_src2_ready),                                            //     sink0.ready
		.sink0_valid         (rsp_demux_003_src2_valid),                                            //          .valid
		.sink0_channel       (rsp_demux_003_src2_channel),                                          //          .channel
		.sink0_data          (rsp_demux_003_src2_data),                                             //          .data
		.sink0_startofpacket (rsp_demux_003_src2_startofpacket),                                    //          .startofpacket
		.sink0_endofpacket   (rsp_demux_003_src2_endofpacket),                                      //          .endofpacket
		.sink1_ready         (rsp_demux_004_src2_ready),                                            //     sink1.ready
		.sink1_valid         (rsp_demux_004_src2_valid),                                            //          .valid
		.sink1_channel       (rsp_demux_004_src2_channel),                                          //          .channel
		.sink1_data          (rsp_demux_004_src2_data),                                             //          .data
		.sink1_startofpacket (rsp_demux_004_src2_startofpacket),                                    //          .startofpacket
		.sink1_endofpacket   (rsp_demux_004_src2_endofpacket),                                      //          .endofpacket
		.sink2_ready         (rsp_demux_005_src2_ready),                                            //     sink2.ready
		.sink2_valid         (rsp_demux_005_src2_valid),                                            //          .valid
		.sink2_channel       (rsp_demux_005_src2_channel),                                          //          .channel
		.sink2_data          (rsp_demux_005_src2_data),                                             //          .data
		.sink2_startofpacket (rsp_demux_005_src2_startofpacket),                                    //          .startofpacket
		.sink2_endofpacket   (rsp_demux_005_src2_endofpacket),                                      //          .endofpacket
		.sink3_ready         (rsp_demux_006_src2_ready),                                            //     sink3.ready
		.sink3_valid         (rsp_demux_006_src2_valid),                                            //          .valid
		.sink3_channel       (rsp_demux_006_src2_channel),                                          //          .channel
		.sink3_data          (rsp_demux_006_src2_data),                                             //          .data
		.sink3_startofpacket (rsp_demux_006_src2_startofpacket),                                    //          .startofpacket
		.sink3_endofpacket   (rsp_demux_006_src2_endofpacket),                                      //          .endofpacket
		.sink4_ready         (rsp_demux_007_src2_ready),                                            //     sink4.ready
		.sink4_valid         (rsp_demux_007_src2_valid),                                            //          .valid
		.sink4_channel       (rsp_demux_007_src2_channel),                                          //          .channel
		.sink4_data          (rsp_demux_007_src2_data),                                             //          .data
		.sink4_startofpacket (rsp_demux_007_src2_startofpacket),                                    //          .startofpacket
		.sink4_endofpacket   (rsp_demux_007_src2_endofpacket),                                      //          .endofpacket
		.sink5_ready         (rsp_demux_008_src2_ready),                                            //     sink5.ready
		.sink5_valid         (rsp_demux_008_src2_valid),                                            //          .valid
		.sink5_channel       (rsp_demux_008_src2_channel),                                          //          .channel
		.sink5_data          (rsp_demux_008_src2_data),                                             //          .data
		.sink5_startofpacket (rsp_demux_008_src2_startofpacket),                                    //          .startofpacket
		.sink5_endofpacket   (rsp_demux_008_src2_endofpacket),                                      //          .endofpacket
		.sink6_ready         (rsp_demux_009_src2_ready),                                            //     sink6.ready
		.sink6_valid         (rsp_demux_009_src2_valid),                                            //          .valid
		.sink6_channel       (rsp_demux_009_src2_channel),                                          //          .channel
		.sink6_data          (rsp_demux_009_src2_data),                                             //          .data
		.sink6_startofpacket (rsp_demux_009_src2_startofpacket),                                    //          .startofpacket
		.sink6_endofpacket   (rsp_demux_009_src2_endofpacket),                                      //          .endofpacket
		.sink7_ready         (rsp_demux_010_src2_ready),                                            //     sink7.ready
		.sink7_valid         (rsp_demux_010_src2_valid),                                            //          .valid
		.sink7_channel       (rsp_demux_010_src2_channel),                                          //          .channel
		.sink7_data          (rsp_demux_010_src2_data),                                             //          .data
		.sink7_startofpacket (rsp_demux_010_src2_startofpacket),                                    //          .startofpacket
		.sink7_endofpacket   (rsp_demux_010_src2_endofpacket),                                      //          .endofpacket
		.sink8_ready         (rsp_demux_011_src2_ready),                                            //     sink8.ready
		.sink8_valid         (rsp_demux_011_src2_valid),                                            //          .valid
		.sink8_channel       (rsp_demux_011_src2_channel),                                          //          .channel
		.sink8_data          (rsp_demux_011_src2_data),                                             //          .data
		.sink8_startofpacket (rsp_demux_011_src2_startofpacket),                                    //          .startofpacket
		.sink8_endofpacket   (rsp_demux_011_src2_endofpacket)                                       //          .endofpacket
	);

	NUEVO_DESIGN_mm_interconnect_0_rsp_mux_003 rsp_mux_003 (
		.clk                 (clk_0_clk_clk),                                                           //       clk.clk
		.reset               (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.src_ready           (rsp_mux_003_src_ready),                                                   //       src.ready
		.src_valid           (rsp_mux_003_src_valid),                                                   //          .valid
		.src_data            (rsp_mux_003_src_data),                                                    //          .data
		.src_channel         (rsp_mux_003_src_channel),                                                 //          .channel
		.src_startofpacket   (rsp_mux_003_src_startofpacket),                                           //          .startofpacket
		.src_endofpacket     (rsp_mux_003_src_endofpacket),                                             //          .endofpacket
		.sink0_ready         (sdram_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (sdram_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_valid),         //          .valid
		.sink0_channel       (sdram_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_channel),       //          .channel
		.sink0_data          (sdram_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_data),          //          .data
		.sink0_startofpacket (sdram_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (sdram_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_endofpacket)    //          .endofpacket
	);

	NUEVO_DESIGN_mm_interconnect_0_rsp_mux_003 rsp_mux_004 (
		.clk                 (clk_0_clk_clk),                                                           //       clk.clk
		.reset               (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.src_ready           (rsp_mux_004_src_ready),                                                   //       src.ready
		.src_valid           (rsp_mux_004_src_valid),                                                   //          .valid
		.src_data            (rsp_mux_004_src_data),                                                    //          .data
		.src_channel         (rsp_mux_004_src_channel),                                                 //          .channel
		.src_startofpacket   (rsp_mux_004_src_startofpacket),                                           //          .startofpacket
		.src_endofpacket     (rsp_mux_004_src_endofpacket),                                             //          .endofpacket
		.sink0_ready         (sdram_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (sdram_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_valid),         //          .valid
		.sink0_channel       (sdram_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_channel),       //          .channel
		.sink0_data          (sdram_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_data),          //          .data
		.sink0_startofpacket (sdram_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (sdram_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_endofpacket)    //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (65),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (79),
		.IN_PKT_BYTE_CNT_L             (72),
		.IN_PKT_TRANS_COMPRESSED_READ  (66),
		.IN_PKT_TRANS_WRITE            (68),
		.IN_PKT_BURSTWRAP_H            (87),
		.IN_PKT_BURSTWRAP_L            (80),
		.IN_PKT_BURST_SIZE_H           (90),
		.IN_PKT_BURST_SIZE_L           (88),
		.IN_PKT_RESPONSE_STATUS_H      (125),
		.IN_PKT_RESPONSE_STATUS_L      (124),
		.IN_PKT_TRANS_EXCLUSIVE        (71),
		.IN_PKT_BURST_TYPE_H           (92),
		.IN_PKT_BURST_TYPE_L           (91),
		.IN_PKT_ORI_BURST_SIZE_L       (126),
		.IN_PKT_ORI_BURST_SIZE_H       (128),
		.IN_ST_DATA_W                  (129),
		.OUT_PKT_ADDR_H                (47),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (61),
		.OUT_PKT_BYTE_CNT_L            (54),
		.OUT_PKT_TRANS_COMPRESSED_READ (48),
		.OUT_PKT_BURST_SIZE_H          (72),
		.OUT_PKT_BURST_SIZE_L          (70),
		.OUT_PKT_RESPONSE_STATUS_H     (107),
		.OUT_PKT_RESPONSE_STATUS_L     (106),
		.OUT_PKT_TRANS_EXCLUSIVE       (53),
		.OUT_PKT_BURST_TYPE_H          (74),
		.OUT_PKT_BURST_TYPE_L          (73),
		.OUT_PKT_ORI_BURST_SIZE_L      (108),
		.OUT_PKT_ORI_BURST_SIZE_H      (110),
		.OUT_ST_DATA_W                 (111),
		.ST_CHANNEL_W                  (12),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) nios2_qsys_0_data_master_to_sdram_s1_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                            //       clk.clk
		.reset                (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),                         // clk_reset.reset
		.in_valid             (cmd_demux_src2_valid),                                                     //      sink.valid
		.in_channel           (cmd_demux_src2_channel),                                                   //          .channel
		.in_startofpacket     (cmd_demux_src2_startofpacket),                                             //          .startofpacket
		.in_endofpacket       (cmd_demux_src2_endofpacket),                                               //          .endofpacket
		.in_ready             (cmd_demux_src2_ready),                                                     //          .ready
		.in_data              (cmd_demux_src2_data),                                                      //          .data
		.out_endofpacket      (nios2_qsys_0_data_master_to_sdram_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (nios2_qsys_0_data_master_to_sdram_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (nios2_qsys_0_data_master_to_sdram_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (nios2_qsys_0_data_master_to_sdram_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (nios2_qsys_0_data_master_to_sdram_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (nios2_qsys_0_data_master_to_sdram_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                    // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (101),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (115),
		.IN_PKT_BYTE_CNT_L             (108),
		.IN_PKT_TRANS_COMPRESSED_READ  (102),
		.IN_PKT_TRANS_WRITE            (104),
		.IN_PKT_BURSTWRAP_H            (123),
		.IN_PKT_BURSTWRAP_L            (116),
		.IN_PKT_BURST_SIZE_H           (126),
		.IN_PKT_BURST_SIZE_L           (124),
		.IN_PKT_RESPONSE_STATUS_H      (161),
		.IN_PKT_RESPONSE_STATUS_L      (160),
		.IN_PKT_TRANS_EXCLUSIVE        (107),
		.IN_PKT_BURST_TYPE_H           (128),
		.IN_PKT_BURST_TYPE_L           (127),
		.IN_PKT_ORI_BURST_SIZE_L       (162),
		.IN_PKT_ORI_BURST_SIZE_H       (164),
		.IN_ST_DATA_W                  (165),
		.OUT_PKT_ADDR_H                (47),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (61),
		.OUT_PKT_BYTE_CNT_L            (54),
		.OUT_PKT_TRANS_COMPRESSED_READ (48),
		.OUT_PKT_BURST_SIZE_H          (72),
		.OUT_PKT_BURST_SIZE_L          (70),
		.OUT_PKT_RESPONSE_STATUS_H     (107),
		.OUT_PKT_RESPONSE_STATUS_L     (106),
		.OUT_PKT_TRANS_EXCLUSIVE       (53),
		.OUT_PKT_BURST_TYPE_H          (74),
		.OUT_PKT_BURST_TYPE_L          (73),
		.OUT_PKT_ORI_BURST_SIZE_L      (108),
		.OUT_PKT_ORI_BURST_SIZE_H      (110),
		.OUT_ST_DATA_W                 (111),
		.ST_CHANNEL_W                  (12),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) hps_0_h2f_axi_master_wr_to_sdram_s1_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                           //       clk.clk
		.reset                (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_valid             (cmd_demux_003_src0_valid),                                                //      sink.valid
		.in_channel           (cmd_demux_003_src0_channel),                                              //          .channel
		.in_startofpacket     (cmd_demux_003_src0_startofpacket),                                        //          .startofpacket
		.in_endofpacket       (cmd_demux_003_src0_endofpacket),                                          //          .endofpacket
		.in_ready             (cmd_demux_003_src0_ready),                                                //          .ready
		.in_data              (cmd_demux_003_src0_data),                                                 //          .data
		.out_endofpacket      (hps_0_h2f_axi_master_wr_to_sdram_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (hps_0_h2f_axi_master_wr_to_sdram_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (hps_0_h2f_axi_master_wr_to_sdram_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (hps_0_h2f_axi_master_wr_to_sdram_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (hps_0_h2f_axi_master_wr_to_sdram_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (hps_0_h2f_axi_master_wr_to_sdram_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                   // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (101),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (115),
		.IN_PKT_BYTE_CNT_L             (108),
		.IN_PKT_TRANS_COMPRESSED_READ  (102),
		.IN_PKT_TRANS_WRITE            (104),
		.IN_PKT_BURSTWRAP_H            (123),
		.IN_PKT_BURSTWRAP_L            (116),
		.IN_PKT_BURST_SIZE_H           (126),
		.IN_PKT_BURST_SIZE_L           (124),
		.IN_PKT_RESPONSE_STATUS_H      (161),
		.IN_PKT_RESPONSE_STATUS_L      (160),
		.IN_PKT_TRANS_EXCLUSIVE        (107),
		.IN_PKT_BURST_TYPE_H           (128),
		.IN_PKT_BURST_TYPE_L           (127),
		.IN_PKT_ORI_BURST_SIZE_L       (162),
		.IN_PKT_ORI_BURST_SIZE_H       (164),
		.IN_ST_DATA_W                  (165),
		.OUT_PKT_ADDR_H                (47),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (61),
		.OUT_PKT_BYTE_CNT_L            (54),
		.OUT_PKT_TRANS_COMPRESSED_READ (48),
		.OUT_PKT_BURST_SIZE_H          (72),
		.OUT_PKT_BURST_SIZE_L          (70),
		.OUT_PKT_RESPONSE_STATUS_H     (107),
		.OUT_PKT_RESPONSE_STATUS_L     (106),
		.OUT_PKT_TRANS_EXCLUSIVE       (53),
		.OUT_PKT_BURST_TYPE_H          (74),
		.OUT_PKT_BURST_TYPE_L          (73),
		.OUT_PKT_ORI_BURST_SIZE_L      (108),
		.OUT_PKT_ORI_BURST_SIZE_H      (110),
		.OUT_ST_DATA_W                 (111),
		.ST_CHANNEL_W                  (12),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) hps_0_h2f_axi_master_rd_to_sdram_s1_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                           //       clk.clk
		.reset                (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_valid             (cmd_demux_004_src0_valid),                                                //      sink.valid
		.in_channel           (cmd_demux_004_src0_channel),                                              //          .channel
		.in_startofpacket     (cmd_demux_004_src0_startofpacket),                                        //          .startofpacket
		.in_endofpacket       (cmd_demux_004_src0_endofpacket),                                          //          .endofpacket
		.in_ready             (cmd_demux_004_src0_ready),                                                //          .ready
		.in_data              (cmd_demux_004_src0_data),                                                 //          .data
		.out_endofpacket      (hps_0_h2f_axi_master_rd_to_sdram_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (hps_0_h2f_axi_master_rd_to_sdram_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (hps_0_h2f_axi_master_rd_to_sdram_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (hps_0_h2f_axi_master_rd_to_sdram_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (hps_0_h2f_axi_master_rd_to_sdram_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (hps_0_h2f_axi_master_rd_to_sdram_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                   // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (47),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (61),
		.IN_PKT_BYTE_CNT_L             (54),
		.IN_PKT_TRANS_COMPRESSED_READ  (48),
		.IN_PKT_TRANS_WRITE            (50),
		.IN_PKT_BURSTWRAP_H            (69),
		.IN_PKT_BURSTWRAP_L            (62),
		.IN_PKT_BURST_SIZE_H           (72),
		.IN_PKT_BURST_SIZE_L           (70),
		.IN_PKT_RESPONSE_STATUS_H      (107),
		.IN_PKT_RESPONSE_STATUS_L      (106),
		.IN_PKT_TRANS_EXCLUSIVE        (53),
		.IN_PKT_BURST_TYPE_H           (74),
		.IN_PKT_BURST_TYPE_L           (73),
		.IN_PKT_ORI_BURST_SIZE_L       (108),
		.IN_PKT_ORI_BURST_SIZE_H       (110),
		.IN_ST_DATA_W                  (111),
		.OUT_PKT_ADDR_H                (65),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (79),
		.OUT_PKT_BYTE_CNT_L            (72),
		.OUT_PKT_TRANS_COMPRESSED_READ (66),
		.OUT_PKT_BURST_SIZE_H          (90),
		.OUT_PKT_BURST_SIZE_L          (88),
		.OUT_PKT_RESPONSE_STATUS_H     (125),
		.OUT_PKT_RESPONSE_STATUS_L     (124),
		.OUT_PKT_TRANS_EXCLUSIVE       (71),
		.OUT_PKT_BURST_TYPE_H          (92),
		.OUT_PKT_BURST_TYPE_L          (91),
		.OUT_PKT_ORI_BURST_SIZE_L      (126),
		.OUT_PKT_ORI_BURST_SIZE_H      (128),
		.OUT_ST_DATA_W                 (129),
		.ST_CHANNEL_W                  (12),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) sdram_s1_to_nios2_qsys_0_data_master_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                            //       clk.clk
		.reset                (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),                         // clk_reset.reset
		.in_valid             (rsp_demux_002_src0_valid),                                                 //      sink.valid
		.in_channel           (rsp_demux_002_src0_channel),                                               //          .channel
		.in_startofpacket     (rsp_demux_002_src0_startofpacket),                                         //          .startofpacket
		.in_endofpacket       (rsp_demux_002_src0_endofpacket),                                           //          .endofpacket
		.in_ready             (rsp_demux_002_src0_ready),                                                 //          .ready
		.in_data              (rsp_demux_002_src0_data),                                                  //          .data
		.out_endofpacket      (sdram_s1_to_nios2_qsys_0_data_master_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sdram_s1_to_nios2_qsys_0_data_master_rsp_width_adapter_src_data),          //          .data
		.out_channel          (sdram_s1_to_nios2_qsys_0_data_master_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (sdram_s1_to_nios2_qsys_0_data_master_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (sdram_s1_to_nios2_qsys_0_data_master_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sdram_s1_to_nios2_qsys_0_data_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                    // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (47),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (61),
		.IN_PKT_BYTE_CNT_L             (54),
		.IN_PKT_TRANS_COMPRESSED_READ  (48),
		.IN_PKT_TRANS_WRITE            (50),
		.IN_PKT_BURSTWRAP_H            (69),
		.IN_PKT_BURSTWRAP_L            (62),
		.IN_PKT_BURST_SIZE_H           (72),
		.IN_PKT_BURST_SIZE_L           (70),
		.IN_PKT_RESPONSE_STATUS_H      (107),
		.IN_PKT_RESPONSE_STATUS_L      (106),
		.IN_PKT_TRANS_EXCLUSIVE        (53),
		.IN_PKT_BURST_TYPE_H           (74),
		.IN_PKT_BURST_TYPE_L           (73),
		.IN_PKT_ORI_BURST_SIZE_L       (108),
		.IN_PKT_ORI_BURST_SIZE_H       (110),
		.IN_ST_DATA_W                  (111),
		.OUT_PKT_ADDR_H                (101),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (115),
		.OUT_PKT_BYTE_CNT_L            (108),
		.OUT_PKT_TRANS_COMPRESSED_READ (102),
		.OUT_PKT_BURST_SIZE_H          (126),
		.OUT_PKT_BURST_SIZE_L          (124),
		.OUT_PKT_RESPONSE_STATUS_H     (161),
		.OUT_PKT_RESPONSE_STATUS_L     (160),
		.OUT_PKT_TRANS_EXCLUSIVE       (107),
		.OUT_PKT_BURST_TYPE_H          (128),
		.OUT_PKT_BURST_TYPE_L          (127),
		.OUT_PKT_ORI_BURST_SIZE_L      (162),
		.OUT_PKT_ORI_BURST_SIZE_H      (164),
		.OUT_ST_DATA_W                 (165),
		.ST_CHANNEL_W                  (12),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) sdram_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                           //       clk.clk
		.reset                (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),                        // clk_reset.reset
		.in_valid             (rsp_demux_002_src1_valid),                                                //      sink.valid
		.in_channel           (rsp_demux_002_src1_channel),                                              //          .channel
		.in_startofpacket     (rsp_demux_002_src1_startofpacket),                                        //          .startofpacket
		.in_endofpacket       (rsp_demux_002_src1_endofpacket),                                          //          .endofpacket
		.in_ready             (rsp_demux_002_src1_ready),                                                //          .ready
		.in_data              (rsp_demux_002_src1_data),                                                 //          .data
		.out_endofpacket      (sdram_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sdram_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_data),          //          .data
		.out_channel          (sdram_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (sdram_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (sdram_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sdram_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                   // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (47),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (61),
		.IN_PKT_BYTE_CNT_L             (54),
		.IN_PKT_TRANS_COMPRESSED_READ  (48),
		.IN_PKT_TRANS_WRITE            (50),
		.IN_PKT_BURSTWRAP_H            (69),
		.IN_PKT_BURSTWRAP_L            (62),
		.IN_PKT_BURST_SIZE_H           (72),
		.IN_PKT_BURST_SIZE_L           (70),
		.IN_PKT_RESPONSE_STATUS_H      (107),
		.IN_PKT_RESPONSE_STATUS_L      (106),
		.IN_PKT_TRANS_EXCLUSIVE        (53),
		.IN_PKT_BURST_TYPE_H           (74),
		.IN_PKT_BURST_TYPE_L           (73),
		.IN_PKT_ORI_BURST_SIZE_L       (108),
		.IN_PKT_ORI_BURST_SIZE_H       (110),
		.IN_ST_DATA_W                  (111),
		.OUT_PKT_ADDR_H                (101),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (115),
		.OUT_PKT_BYTE_CNT_L            (108),
		.OUT_PKT_TRANS_COMPRESSED_READ (102),
		.OUT_PKT_BURST_SIZE_H          (126),
		.OUT_PKT_BURST_SIZE_L          (124),
		.OUT_PKT_RESPONSE_STATUS_H     (161),
		.OUT_PKT_RESPONSE_STATUS_L     (160),
		.OUT_PKT_TRANS_EXCLUSIVE       (107),
		.OUT_PKT_BURST_TYPE_H          (128),
		.OUT_PKT_BURST_TYPE_L          (127),
		.OUT_PKT_ORI_BURST_SIZE_L      (162),
		.OUT_PKT_ORI_BURST_SIZE_H      (164),
		.OUT_ST_DATA_W                 (165),
		.ST_CHANNEL_W                  (12),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) sdram_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                           //       clk.clk
		.reset                (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),                        // clk_reset.reset
		.in_valid             (rsp_demux_002_src2_valid),                                                //      sink.valid
		.in_channel           (rsp_demux_002_src2_channel),                                              //          .channel
		.in_startofpacket     (rsp_demux_002_src2_startofpacket),                                        //          .startofpacket
		.in_endofpacket       (rsp_demux_002_src2_endofpacket),                                          //          .endofpacket
		.in_ready             (rsp_demux_002_src2_ready),                                                //          .ready
		.in_data              (rsp_demux_002_src2_data),                                                 //          .data
		.out_endofpacket      (sdram_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sdram_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_data),          //          .data
		.out_channel          (sdram_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (sdram_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (sdram_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sdram_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                   // (terminated)
	);

	NUEVO_DESIGN_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (clk_0_clk_clk),                                    // in_clk_0.clk
		.in_rst_0_reset (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (ram_s1_agent_rdata_fifo_out_data),                 //     in_0.data
		.in_0_valid     (ram_s1_agent_rdata_fifo_out_valid),                //         .valid
		.in_0_ready     (ram_s1_agent_rdata_fifo_out_ready),                //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                     //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                    //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                    //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                     //         .error
	);

	NUEVO_DESIGN_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (clk_0_clk_clk),                                    // in_clk_0.clk
		.in_rst_0_reset (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (timer_s1_agent_rdata_fifo_out_data),               //     in_0.data
		.in_0_valid     (timer_s1_agent_rdata_fifo_out_valid),              //         .valid
		.in_0_ready     (timer_s1_agent_rdata_fifo_out_ready),              //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),                 //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),                //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),                //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)                 //         .error
	);

	NUEVO_DESIGN_mm_interconnect_0_avalon_st_adapter_002 #(
		.inBitsPerSymbol (18),
		.inUsePackets    (0),
		.inDataWidth     (18),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (18),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (clk_0_clk_clk),                                    // in_clk_0.clk
		.in_rst_0_reset (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sdram_s1_agent_rdata_fifo_out_data),               //     in_0.data
		.in_0_valid     (sdram_s1_agent_rdata_fifo_out_valid),              //         .valid
		.in_0_ready     (sdram_s1_agent_rdata_fifo_out_ready),              //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),                 //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),                //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),                //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)                 //         .error
	);

	NUEVO_DESIGN_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (clk_0_clk_clk),                                    // in_clk_0.clk
		.in_rst_0_reset (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sw_s1_agent_rdata_fifo_out_data),                  //     in_0.data
		.in_0_valid     (sw_s1_agent_rdata_fifo_out_valid),                 //         .valid
		.in_0_ready     (sw_s1_agent_rdata_fifo_out_ready),                 //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),                 //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),                //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),                //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)                 //         .error
	);

	NUEVO_DESIGN_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (clk_0_clk_clk),                                    // in_clk_0.clk
		.in_rst_0_reset (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (seg6_s1_agent_rdata_fifo_out_data),                //     in_0.data
		.in_0_valid     (seg6_s1_agent_rdata_fifo_out_valid),               //         .valid
		.in_0_ready     (seg6_s1_agent_rdata_fifo_out_ready),               //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),                 //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),                //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),                //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)                 //         .error
	);

	NUEVO_DESIGN_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_005 (
		.in_clk_0_clk   (clk_0_clk_clk),                                    // in_clk_0.clk
		.in_rst_0_reset (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (seg5_s1_agent_rdata_fifo_out_data),                //     in_0.data
		.in_0_valid     (seg5_s1_agent_rdata_fifo_out_valid),               //         .valid
		.in_0_ready     (seg5_s1_agent_rdata_fifo_out_ready),               //         .ready
		.out_0_data     (avalon_st_adapter_005_out_0_data),                 //    out_0.data
		.out_0_valid    (avalon_st_adapter_005_out_0_valid),                //         .valid
		.out_0_ready    (avalon_st_adapter_005_out_0_ready),                //         .ready
		.out_0_error    (avalon_st_adapter_005_out_0_error)                 //         .error
	);

	NUEVO_DESIGN_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_006 (
		.in_clk_0_clk   (clk_0_clk_clk),                                    // in_clk_0.clk
		.in_rst_0_reset (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (seg4_s1_agent_rdata_fifo_out_data),                //     in_0.data
		.in_0_valid     (seg4_s1_agent_rdata_fifo_out_valid),               //         .valid
		.in_0_ready     (seg4_s1_agent_rdata_fifo_out_ready),               //         .ready
		.out_0_data     (avalon_st_adapter_006_out_0_data),                 //    out_0.data
		.out_0_valid    (avalon_st_adapter_006_out_0_valid),                //         .valid
		.out_0_ready    (avalon_st_adapter_006_out_0_ready),                //         .ready
		.out_0_error    (avalon_st_adapter_006_out_0_error)                 //         .error
	);

	NUEVO_DESIGN_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_007 (
		.in_clk_0_clk   (clk_0_clk_clk),                                    // in_clk_0.clk
		.in_rst_0_reset (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (seg3_s1_agent_rdata_fifo_out_data),                //     in_0.data
		.in_0_valid     (seg3_s1_agent_rdata_fifo_out_valid),               //         .valid
		.in_0_ready     (seg3_s1_agent_rdata_fifo_out_ready),               //         .ready
		.out_0_data     (avalon_st_adapter_007_out_0_data),                 //    out_0.data
		.out_0_valid    (avalon_st_adapter_007_out_0_valid),                //         .valid
		.out_0_ready    (avalon_st_adapter_007_out_0_ready),                //         .ready
		.out_0_error    (avalon_st_adapter_007_out_0_error)                 //         .error
	);

	NUEVO_DESIGN_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_008 (
		.in_clk_0_clk   (clk_0_clk_clk),                                    // in_clk_0.clk
		.in_rst_0_reset (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (seg2_s1_agent_rdata_fifo_out_data),                //     in_0.data
		.in_0_valid     (seg2_s1_agent_rdata_fifo_out_valid),               //         .valid
		.in_0_ready     (seg2_s1_agent_rdata_fifo_out_ready),               //         .ready
		.out_0_data     (avalon_st_adapter_008_out_0_data),                 //    out_0.data
		.out_0_valid    (avalon_st_adapter_008_out_0_valid),                //         .valid
		.out_0_ready    (avalon_st_adapter_008_out_0_ready),                //         .ready
		.out_0_error    (avalon_st_adapter_008_out_0_error)                 //         .error
	);

	NUEVO_DESIGN_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_009 (
		.in_clk_0_clk   (clk_0_clk_clk),                                    // in_clk_0.clk
		.in_rst_0_reset (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (seg1_s1_agent_rdata_fifo_out_data),                //     in_0.data
		.in_0_valid     (seg1_s1_agent_rdata_fifo_out_valid),               //         .valid
		.in_0_ready     (seg1_s1_agent_rdata_fifo_out_ready),               //         .ready
		.out_0_data     (avalon_st_adapter_009_out_0_data),                 //    out_0.data
		.out_0_valid    (avalon_st_adapter_009_out_0_valid),                //         .valid
		.out_0_ready    (avalon_st_adapter_009_out_0_ready),                //         .ready
		.out_0_error    (avalon_st_adapter_009_out_0_error)                 //         .error
	);

	NUEVO_DESIGN_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_010 (
		.in_clk_0_clk   (clk_0_clk_clk),                                    // in_clk_0.clk
		.in_rst_0_reset (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (keys_s1_agent_rdata_fifo_out_data),                //     in_0.data
		.in_0_valid     (keys_s1_agent_rdata_fifo_out_valid),               //         .valid
		.in_0_ready     (keys_s1_agent_rdata_fifo_out_ready),               //         .ready
		.out_0_data     (avalon_st_adapter_010_out_0_data),                 //    out_0.data
		.out_0_valid    (avalon_st_adapter_010_out_0_valid),                //         .valid
		.out_0_ready    (avalon_st_adapter_010_out_0_ready),                //         .ready
		.out_0_error    (avalon_st_adapter_010_out_0_error)                 //         .error
	);

	NUEVO_DESIGN_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_011 (
		.in_clk_0_clk   (clk_0_clk_clk),                                    // in_clk_0.clk
		.in_rst_0_reset (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (leds_s1_agent_rdata_fifo_out_data),                //     in_0.data
		.in_0_valid     (leds_s1_agent_rdata_fifo_out_valid),               //         .valid
		.in_0_ready     (leds_s1_agent_rdata_fifo_out_ready),               //         .ready
		.out_0_data     (avalon_st_adapter_011_out_0_data),                 //    out_0.data
		.out_0_valid    (avalon_st_adapter_011_out_0_valid),                //         .valid
		.out_0_ready    (avalon_st_adapter_011_out_0_ready),                //         .ready
		.out_0_error    (avalon_st_adapter_011_out_0_error)                 //         .error
	);

endmodule
