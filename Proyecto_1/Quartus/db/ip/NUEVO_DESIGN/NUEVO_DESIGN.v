// NUEVO_DESIGN.v

// Generated using ACDS version 18.1 625

`timescale 1 ps / 1 ps
module NUEVO_DESIGN (
		input  wire        clk_clk,            //        clk.clk
		input  wire [3:0]  keys_export,        //       keys.export
		output wire [9:0]  leds_export,        //       leds.export
		output wire [12:0] memory_mem_a,       //     memory.mem_a
		output wire [2:0]  memory_mem_ba,      //           .mem_ba
		output wire        memory_mem_ck,      //           .mem_ck
		output wire        memory_mem_ck_n,    //           .mem_ck_n
		output wire        memory_mem_cke,     //           .mem_cke
		output wire        memory_mem_cs_n,    //           .mem_cs_n
		output wire        memory_mem_ras_n,   //           .mem_ras_n
		output wire        memory_mem_cas_n,   //           .mem_cas_n
		output wire        memory_mem_we_n,    //           .mem_we_n
		output wire        memory_mem_reset_n, //           .mem_reset_n
		inout  wire [7:0]  memory_mem_dq,      //           .mem_dq
		inout  wire        memory_mem_dqs,     //           .mem_dqs
		inout  wire        memory_mem_dqs_n,   //           .mem_dqs_n
		output wire        memory_mem_odt,     //           .mem_odt
		output wire        memory_mem_dm,      //           .mem_dm
		input  wire        memory_oct_rzqin,   //           .oct_rzqin
		input  wire        reset_reset_n,      //      reset.reset_n
		output wire [12:0] sdram_wire_addr,    // sdram_wire.addr
		output wire [1:0]  sdram_wire_ba,      //           .ba
		output wire        sdram_wire_cas_n,   //           .cas_n
		output wire        sdram_wire_cke,     //           .cke
		output wire        sdram_wire_cs_n,    //           .cs_n
		inout  wire [15:0] sdram_wire_dq,      //           .dq
		output wire [1:0]  sdram_wire_dqm,     //           .dqm
		output wire        sdram_wire_ras_n,   //           .ras_n
		output wire        sdram_wire_we_n,    //           .we_n
		output wire [6:0]  seg1_export,        //       seg1.export
		output wire [6:0]  seg2_export,        //       seg2.export
		output wire [6:0]  seg3_export,        //       seg3.export
		output wire [6:0]  seg4_export,        //       seg4.export
		output wire [6:0]  seg5_export,        //       seg5.export
		output wire [6:0]  seg6_export,        //       seg6.export
		input  wire [9:0]  sw_export           //         sw.export
	);

	wire  [31:0] nios2_qsys_0_data_master_readdata;             // mm_interconnect_0:nios2_qsys_0_data_master_readdata -> nios2_qsys_0:d_readdata
	wire         nios2_qsys_0_data_master_waitrequest;          // mm_interconnect_0:nios2_qsys_0_data_master_waitrequest -> nios2_qsys_0:d_waitrequest
	wire  [26:0] nios2_qsys_0_data_master_address;              // nios2_qsys_0:d_address -> mm_interconnect_0:nios2_qsys_0_data_master_address
	wire   [3:0] nios2_qsys_0_data_master_byteenable;           // nios2_qsys_0:d_byteenable -> mm_interconnect_0:nios2_qsys_0_data_master_byteenable
	wire         nios2_qsys_0_data_master_read;                 // nios2_qsys_0:d_read -> mm_interconnect_0:nios2_qsys_0_data_master_read
	wire         nios2_qsys_0_data_master_write;                // nios2_qsys_0:d_write -> mm_interconnect_0:nios2_qsys_0_data_master_write
	wire  [31:0] nios2_qsys_0_data_master_writedata;            // nios2_qsys_0:d_writedata -> mm_interconnect_0:nios2_qsys_0_data_master_writedata
	wire   [1:0] hps_0_h2f_lw_axi_master_awburst;               // hps_0:h2f_lw_AWBURST -> mm_interconnect_0:hps_0_h2f_lw_axi_master_awburst
	wire   [3:0] hps_0_h2f_lw_axi_master_arlen;                 // hps_0:h2f_lw_ARLEN -> mm_interconnect_0:hps_0_h2f_lw_axi_master_arlen
	wire   [3:0] hps_0_h2f_lw_axi_master_wstrb;                 // hps_0:h2f_lw_WSTRB -> mm_interconnect_0:hps_0_h2f_lw_axi_master_wstrb
	wire         hps_0_h2f_lw_axi_master_wready;                // mm_interconnect_0:hps_0_h2f_lw_axi_master_wready -> hps_0:h2f_lw_WREADY
	wire  [11:0] hps_0_h2f_lw_axi_master_rid;                   // mm_interconnect_0:hps_0_h2f_lw_axi_master_rid -> hps_0:h2f_lw_RID
	wire         hps_0_h2f_lw_axi_master_rready;                // hps_0:h2f_lw_RREADY -> mm_interconnect_0:hps_0_h2f_lw_axi_master_rready
	wire   [3:0] hps_0_h2f_lw_axi_master_awlen;                 // hps_0:h2f_lw_AWLEN -> mm_interconnect_0:hps_0_h2f_lw_axi_master_awlen
	wire  [11:0] hps_0_h2f_lw_axi_master_wid;                   // hps_0:h2f_lw_WID -> mm_interconnect_0:hps_0_h2f_lw_axi_master_wid
	wire   [3:0] hps_0_h2f_lw_axi_master_arcache;               // hps_0:h2f_lw_ARCACHE -> mm_interconnect_0:hps_0_h2f_lw_axi_master_arcache
	wire         hps_0_h2f_lw_axi_master_wvalid;                // hps_0:h2f_lw_WVALID -> mm_interconnect_0:hps_0_h2f_lw_axi_master_wvalid
	wire  [20:0] hps_0_h2f_lw_axi_master_araddr;                // hps_0:h2f_lw_ARADDR -> mm_interconnect_0:hps_0_h2f_lw_axi_master_araddr
	wire   [2:0] hps_0_h2f_lw_axi_master_arprot;                // hps_0:h2f_lw_ARPROT -> mm_interconnect_0:hps_0_h2f_lw_axi_master_arprot
	wire   [2:0] hps_0_h2f_lw_axi_master_awprot;                // hps_0:h2f_lw_AWPROT -> mm_interconnect_0:hps_0_h2f_lw_axi_master_awprot
	wire  [31:0] hps_0_h2f_lw_axi_master_wdata;                 // hps_0:h2f_lw_WDATA -> mm_interconnect_0:hps_0_h2f_lw_axi_master_wdata
	wire         hps_0_h2f_lw_axi_master_arvalid;               // hps_0:h2f_lw_ARVALID -> mm_interconnect_0:hps_0_h2f_lw_axi_master_arvalid
	wire   [3:0] hps_0_h2f_lw_axi_master_awcache;               // hps_0:h2f_lw_AWCACHE -> mm_interconnect_0:hps_0_h2f_lw_axi_master_awcache
	wire  [11:0] hps_0_h2f_lw_axi_master_arid;                  // hps_0:h2f_lw_ARID -> mm_interconnect_0:hps_0_h2f_lw_axi_master_arid
	wire   [1:0] hps_0_h2f_lw_axi_master_arlock;                // hps_0:h2f_lw_ARLOCK -> mm_interconnect_0:hps_0_h2f_lw_axi_master_arlock
	wire   [1:0] hps_0_h2f_lw_axi_master_awlock;                // hps_0:h2f_lw_AWLOCK -> mm_interconnect_0:hps_0_h2f_lw_axi_master_awlock
	wire  [20:0] hps_0_h2f_lw_axi_master_awaddr;                // hps_0:h2f_lw_AWADDR -> mm_interconnect_0:hps_0_h2f_lw_axi_master_awaddr
	wire   [1:0] hps_0_h2f_lw_axi_master_bresp;                 // mm_interconnect_0:hps_0_h2f_lw_axi_master_bresp -> hps_0:h2f_lw_BRESP
	wire         hps_0_h2f_lw_axi_master_arready;               // mm_interconnect_0:hps_0_h2f_lw_axi_master_arready -> hps_0:h2f_lw_ARREADY
	wire  [31:0] hps_0_h2f_lw_axi_master_rdata;                 // mm_interconnect_0:hps_0_h2f_lw_axi_master_rdata -> hps_0:h2f_lw_RDATA
	wire         hps_0_h2f_lw_axi_master_awready;               // mm_interconnect_0:hps_0_h2f_lw_axi_master_awready -> hps_0:h2f_lw_AWREADY
	wire   [1:0] hps_0_h2f_lw_axi_master_arburst;               // hps_0:h2f_lw_ARBURST -> mm_interconnect_0:hps_0_h2f_lw_axi_master_arburst
	wire   [2:0] hps_0_h2f_lw_axi_master_arsize;                // hps_0:h2f_lw_ARSIZE -> mm_interconnect_0:hps_0_h2f_lw_axi_master_arsize
	wire         hps_0_h2f_lw_axi_master_bready;                // hps_0:h2f_lw_BREADY -> mm_interconnect_0:hps_0_h2f_lw_axi_master_bready
	wire         hps_0_h2f_lw_axi_master_rlast;                 // mm_interconnect_0:hps_0_h2f_lw_axi_master_rlast -> hps_0:h2f_lw_RLAST
	wire         hps_0_h2f_lw_axi_master_wlast;                 // hps_0:h2f_lw_WLAST -> mm_interconnect_0:hps_0_h2f_lw_axi_master_wlast
	wire   [1:0] hps_0_h2f_lw_axi_master_rresp;                 // mm_interconnect_0:hps_0_h2f_lw_axi_master_rresp -> hps_0:h2f_lw_RRESP
	wire  [11:0] hps_0_h2f_lw_axi_master_awid;                  // hps_0:h2f_lw_AWID -> mm_interconnect_0:hps_0_h2f_lw_axi_master_awid
	wire  [11:0] hps_0_h2f_lw_axi_master_bid;                   // mm_interconnect_0:hps_0_h2f_lw_axi_master_bid -> hps_0:h2f_lw_BID
	wire         hps_0_h2f_lw_axi_master_bvalid;                // mm_interconnect_0:hps_0_h2f_lw_axi_master_bvalid -> hps_0:h2f_lw_BVALID
	wire   [2:0] hps_0_h2f_lw_axi_master_awsize;                // hps_0:h2f_lw_AWSIZE -> mm_interconnect_0:hps_0_h2f_lw_axi_master_awsize
	wire         hps_0_h2f_lw_axi_master_awvalid;               // hps_0:h2f_lw_AWVALID -> mm_interconnect_0:hps_0_h2f_lw_axi_master_awvalid
	wire         hps_0_h2f_lw_axi_master_rvalid;                // mm_interconnect_0:hps_0_h2f_lw_axi_master_rvalid -> hps_0:h2f_lw_RVALID
	wire   [1:0] hps_0_h2f_axi_master_awburst;                  // hps_0:h2f_AWBURST -> mm_interconnect_0:hps_0_h2f_axi_master_awburst
	wire   [3:0] hps_0_h2f_axi_master_arlen;                    // hps_0:h2f_ARLEN -> mm_interconnect_0:hps_0_h2f_axi_master_arlen
	wire   [7:0] hps_0_h2f_axi_master_wstrb;                    // hps_0:h2f_WSTRB -> mm_interconnect_0:hps_0_h2f_axi_master_wstrb
	wire         hps_0_h2f_axi_master_wready;                   // mm_interconnect_0:hps_0_h2f_axi_master_wready -> hps_0:h2f_WREADY
	wire  [11:0] hps_0_h2f_axi_master_rid;                      // mm_interconnect_0:hps_0_h2f_axi_master_rid -> hps_0:h2f_RID
	wire         hps_0_h2f_axi_master_rready;                   // hps_0:h2f_RREADY -> mm_interconnect_0:hps_0_h2f_axi_master_rready
	wire   [3:0] hps_0_h2f_axi_master_awlen;                    // hps_0:h2f_AWLEN -> mm_interconnect_0:hps_0_h2f_axi_master_awlen
	wire  [11:0] hps_0_h2f_axi_master_wid;                      // hps_0:h2f_WID -> mm_interconnect_0:hps_0_h2f_axi_master_wid
	wire   [3:0] hps_0_h2f_axi_master_arcache;                  // hps_0:h2f_ARCACHE -> mm_interconnect_0:hps_0_h2f_axi_master_arcache
	wire         hps_0_h2f_axi_master_wvalid;                   // hps_0:h2f_WVALID -> mm_interconnect_0:hps_0_h2f_axi_master_wvalid
	wire  [29:0] hps_0_h2f_axi_master_araddr;                   // hps_0:h2f_ARADDR -> mm_interconnect_0:hps_0_h2f_axi_master_araddr
	wire   [2:0] hps_0_h2f_axi_master_arprot;                   // hps_0:h2f_ARPROT -> mm_interconnect_0:hps_0_h2f_axi_master_arprot
	wire   [2:0] hps_0_h2f_axi_master_awprot;                   // hps_0:h2f_AWPROT -> mm_interconnect_0:hps_0_h2f_axi_master_awprot
	wire  [63:0] hps_0_h2f_axi_master_wdata;                    // hps_0:h2f_WDATA -> mm_interconnect_0:hps_0_h2f_axi_master_wdata
	wire         hps_0_h2f_axi_master_arvalid;                  // hps_0:h2f_ARVALID -> mm_interconnect_0:hps_0_h2f_axi_master_arvalid
	wire   [3:0] hps_0_h2f_axi_master_awcache;                  // hps_0:h2f_AWCACHE -> mm_interconnect_0:hps_0_h2f_axi_master_awcache
	wire  [11:0] hps_0_h2f_axi_master_arid;                     // hps_0:h2f_ARID -> mm_interconnect_0:hps_0_h2f_axi_master_arid
	wire   [1:0] hps_0_h2f_axi_master_arlock;                   // hps_0:h2f_ARLOCK -> mm_interconnect_0:hps_0_h2f_axi_master_arlock
	wire   [1:0] hps_0_h2f_axi_master_awlock;                   // hps_0:h2f_AWLOCK -> mm_interconnect_0:hps_0_h2f_axi_master_awlock
	wire  [29:0] hps_0_h2f_axi_master_awaddr;                   // hps_0:h2f_AWADDR -> mm_interconnect_0:hps_0_h2f_axi_master_awaddr
	wire   [1:0] hps_0_h2f_axi_master_bresp;                    // mm_interconnect_0:hps_0_h2f_axi_master_bresp -> hps_0:h2f_BRESP
	wire         hps_0_h2f_axi_master_arready;                  // mm_interconnect_0:hps_0_h2f_axi_master_arready -> hps_0:h2f_ARREADY
	wire  [63:0] hps_0_h2f_axi_master_rdata;                    // mm_interconnect_0:hps_0_h2f_axi_master_rdata -> hps_0:h2f_RDATA
	wire         hps_0_h2f_axi_master_awready;                  // mm_interconnect_0:hps_0_h2f_axi_master_awready -> hps_0:h2f_AWREADY
	wire   [1:0] hps_0_h2f_axi_master_arburst;                  // hps_0:h2f_ARBURST -> mm_interconnect_0:hps_0_h2f_axi_master_arburst
	wire   [2:0] hps_0_h2f_axi_master_arsize;                   // hps_0:h2f_ARSIZE -> mm_interconnect_0:hps_0_h2f_axi_master_arsize
	wire         hps_0_h2f_axi_master_bready;                   // hps_0:h2f_BREADY -> mm_interconnect_0:hps_0_h2f_axi_master_bready
	wire         hps_0_h2f_axi_master_rlast;                    // mm_interconnect_0:hps_0_h2f_axi_master_rlast -> hps_0:h2f_RLAST
	wire         hps_0_h2f_axi_master_wlast;                    // hps_0:h2f_WLAST -> mm_interconnect_0:hps_0_h2f_axi_master_wlast
	wire   [1:0] hps_0_h2f_axi_master_rresp;                    // mm_interconnect_0:hps_0_h2f_axi_master_rresp -> hps_0:h2f_RRESP
	wire  [11:0] hps_0_h2f_axi_master_awid;                     // hps_0:h2f_AWID -> mm_interconnect_0:hps_0_h2f_axi_master_awid
	wire  [11:0] hps_0_h2f_axi_master_bid;                      // mm_interconnect_0:hps_0_h2f_axi_master_bid -> hps_0:h2f_BID
	wire         hps_0_h2f_axi_master_bvalid;                   // mm_interconnect_0:hps_0_h2f_axi_master_bvalid -> hps_0:h2f_BVALID
	wire   [2:0] hps_0_h2f_axi_master_awsize;                   // hps_0:h2f_AWSIZE -> mm_interconnect_0:hps_0_h2f_axi_master_awsize
	wire         hps_0_h2f_axi_master_awvalid;                  // hps_0:h2f_AWVALID -> mm_interconnect_0:hps_0_h2f_axi_master_awvalid
	wire         hps_0_h2f_axi_master_rvalid;                   // mm_interconnect_0:hps_0_h2f_axi_master_rvalid -> hps_0:h2f_RVALID
	wire         mm_interconnect_0_ram_s1_chipselect;           // mm_interconnect_0:RAM_s1_chipselect -> RAM:chipselect
	wire  [31:0] mm_interconnect_0_ram_s1_readdata;             // RAM:readdata -> mm_interconnect_0:RAM_s1_readdata
	wire  [15:0] mm_interconnect_0_ram_s1_address;              // mm_interconnect_0:RAM_s1_address -> RAM:address
	wire   [3:0] mm_interconnect_0_ram_s1_byteenable;           // mm_interconnect_0:RAM_s1_byteenable -> RAM:byteenable
	wire         mm_interconnect_0_ram_s1_write;                // mm_interconnect_0:RAM_s1_write -> RAM:write
	wire  [31:0] mm_interconnect_0_ram_s1_writedata;            // mm_interconnect_0:RAM_s1_writedata -> RAM:writedata
	wire         mm_interconnect_0_ram_s1_clken;                // mm_interconnect_0:RAM_s1_clken -> RAM:clken
	wire         mm_interconnect_0_timer_s1_chipselect;         // mm_interconnect_0:TIMER_s1_chipselect -> TIMER:chipselect
	wire  [15:0] mm_interconnect_0_timer_s1_readdata;           // TIMER:readdata -> mm_interconnect_0:TIMER_s1_readdata
	wire   [2:0] mm_interconnect_0_timer_s1_address;            // mm_interconnect_0:TIMER_s1_address -> TIMER:address
	wire         mm_interconnect_0_timer_s1_write;              // mm_interconnect_0:TIMER_s1_write -> TIMER:write_n
	wire  [15:0] mm_interconnect_0_timer_s1_writedata;          // mm_interconnect_0:TIMER_s1_writedata -> TIMER:writedata
	wire         mm_interconnect_0_sdram_s1_chipselect;         // mm_interconnect_0:SDRAM_s1_chipselect -> SDRAM:az_cs
	wire  [15:0] mm_interconnect_0_sdram_s1_readdata;           // SDRAM:za_data -> mm_interconnect_0:SDRAM_s1_readdata
	wire         mm_interconnect_0_sdram_s1_waitrequest;        // SDRAM:za_waitrequest -> mm_interconnect_0:SDRAM_s1_waitrequest
	wire  [24:0] mm_interconnect_0_sdram_s1_address;            // mm_interconnect_0:SDRAM_s1_address -> SDRAM:az_addr
	wire         mm_interconnect_0_sdram_s1_read;               // mm_interconnect_0:SDRAM_s1_read -> SDRAM:az_rd_n
	wire   [1:0] mm_interconnect_0_sdram_s1_byteenable;         // mm_interconnect_0:SDRAM_s1_byteenable -> SDRAM:az_be_n
	wire         mm_interconnect_0_sdram_s1_readdatavalid;      // SDRAM:za_valid -> mm_interconnect_0:SDRAM_s1_readdatavalid
	wire         mm_interconnect_0_sdram_s1_write;              // mm_interconnect_0:SDRAM_s1_write -> SDRAM:az_wr_n
	wire  [15:0] mm_interconnect_0_sdram_s1_writedata;          // mm_interconnect_0:SDRAM_s1_writedata -> SDRAM:az_data
	wire  [31:0] mm_interconnect_0_sw_s1_readdata;              // SW:readdata -> mm_interconnect_0:SW_s1_readdata
	wire   [1:0] mm_interconnect_0_sw_s1_address;               // mm_interconnect_0:SW_s1_address -> SW:address
	wire         mm_interconnect_0_seg6_s1_chipselect;          // mm_interconnect_0:SEG6_s1_chipselect -> SEG6:chipselect
	wire  [31:0] mm_interconnect_0_seg6_s1_readdata;            // SEG6:readdata -> mm_interconnect_0:SEG6_s1_readdata
	wire   [1:0] mm_interconnect_0_seg6_s1_address;             // mm_interconnect_0:SEG6_s1_address -> SEG6:address
	wire         mm_interconnect_0_seg6_s1_write;               // mm_interconnect_0:SEG6_s1_write -> SEG6:write_n
	wire  [31:0] mm_interconnect_0_seg6_s1_writedata;           // mm_interconnect_0:SEG6_s1_writedata -> SEG6:writedata
	wire         mm_interconnect_0_seg5_s1_chipselect;          // mm_interconnect_0:SEG5_s1_chipselect -> SEG5:chipselect
	wire  [31:0] mm_interconnect_0_seg5_s1_readdata;            // SEG5:readdata -> mm_interconnect_0:SEG5_s1_readdata
	wire   [1:0] mm_interconnect_0_seg5_s1_address;             // mm_interconnect_0:SEG5_s1_address -> SEG5:address
	wire         mm_interconnect_0_seg5_s1_write;               // mm_interconnect_0:SEG5_s1_write -> SEG5:write_n
	wire  [31:0] mm_interconnect_0_seg5_s1_writedata;           // mm_interconnect_0:SEG5_s1_writedata -> SEG5:writedata
	wire         mm_interconnect_0_seg4_s1_chipselect;          // mm_interconnect_0:SEG4_s1_chipselect -> SEG4:chipselect
	wire  [31:0] mm_interconnect_0_seg4_s1_readdata;            // SEG4:readdata -> mm_interconnect_0:SEG4_s1_readdata
	wire   [1:0] mm_interconnect_0_seg4_s1_address;             // mm_interconnect_0:SEG4_s1_address -> SEG4:address
	wire         mm_interconnect_0_seg4_s1_write;               // mm_interconnect_0:SEG4_s1_write -> SEG4:write_n
	wire  [31:0] mm_interconnect_0_seg4_s1_writedata;           // mm_interconnect_0:SEG4_s1_writedata -> SEG4:writedata
	wire         mm_interconnect_0_seg3_s1_chipselect;          // mm_interconnect_0:SEG3_s1_chipselect -> SEG3:chipselect
	wire  [31:0] mm_interconnect_0_seg3_s1_readdata;            // SEG3:readdata -> mm_interconnect_0:SEG3_s1_readdata
	wire   [1:0] mm_interconnect_0_seg3_s1_address;             // mm_interconnect_0:SEG3_s1_address -> SEG3:address
	wire         mm_interconnect_0_seg3_s1_write;               // mm_interconnect_0:SEG3_s1_write -> SEG3:write_n
	wire  [31:0] mm_interconnect_0_seg3_s1_writedata;           // mm_interconnect_0:SEG3_s1_writedata -> SEG3:writedata
	wire         mm_interconnect_0_seg2_s1_chipselect;          // mm_interconnect_0:SEG2_s1_chipselect -> SEG2:chipselect
	wire  [31:0] mm_interconnect_0_seg2_s1_readdata;            // SEG2:readdata -> mm_interconnect_0:SEG2_s1_readdata
	wire   [1:0] mm_interconnect_0_seg2_s1_address;             // mm_interconnect_0:SEG2_s1_address -> SEG2:address
	wire         mm_interconnect_0_seg2_s1_write;               // mm_interconnect_0:SEG2_s1_write -> SEG2:write_n
	wire  [31:0] mm_interconnect_0_seg2_s1_writedata;           // mm_interconnect_0:SEG2_s1_writedata -> SEG2:writedata
	wire         mm_interconnect_0_seg1_s1_chipselect;          // mm_interconnect_0:SEG1_s1_chipselect -> SEG1:chipselect
	wire  [31:0] mm_interconnect_0_seg1_s1_readdata;            // SEG1:readdata -> mm_interconnect_0:SEG1_s1_readdata
	wire   [1:0] mm_interconnect_0_seg1_s1_address;             // mm_interconnect_0:SEG1_s1_address -> SEG1:address
	wire         mm_interconnect_0_seg1_s1_write;               // mm_interconnect_0:SEG1_s1_write -> SEG1:write_n
	wire  [31:0] mm_interconnect_0_seg1_s1_writedata;           // mm_interconnect_0:SEG1_s1_writedata -> SEG1:writedata
	wire  [31:0] mm_interconnect_0_keys_s1_readdata;            // KEYS:readdata -> mm_interconnect_0:KEYS_s1_readdata
	wire   [1:0] mm_interconnect_0_keys_s1_address;             // mm_interconnect_0:KEYS_s1_address -> KEYS:address
	wire         mm_interconnect_0_leds_s1_chipselect;          // mm_interconnect_0:LEDS_s1_chipselect -> LEDS:chipselect
	wire  [31:0] mm_interconnect_0_leds_s1_readdata;            // LEDS:readdata -> mm_interconnect_0:LEDS_s1_readdata
	wire   [1:0] mm_interconnect_0_leds_s1_address;             // mm_interconnect_0:LEDS_s1_address -> LEDS:address
	wire         mm_interconnect_0_leds_s1_write;               // mm_interconnect_0:LEDS_s1_write -> LEDS:write_n
	wire  [31:0] mm_interconnect_0_leds_s1_writedata;           // mm_interconnect_0:LEDS_s1_writedata -> LEDS:writedata
	wire  [31:0] nios2_qsys_0_instruction_master_readdata;      // mm_interconnect_1:nios2_qsys_0_instruction_master_readdata -> nios2_qsys_0:i_readdata
	wire         nios2_qsys_0_instruction_master_waitrequest;   // mm_interconnect_1:nios2_qsys_0_instruction_master_waitrequest -> nios2_qsys_0:i_waitrequest
	wire  [26:0] nios2_qsys_0_instruction_master_address;       // nios2_qsys_0:i_address -> mm_interconnect_1:nios2_qsys_0_instruction_master_address
	wire         nios2_qsys_0_instruction_master_read;          // nios2_qsys_0:i_read -> mm_interconnect_1:nios2_qsys_0_instruction_master_read
	wire         nios2_qsys_0_instruction_master_readdatavalid; // mm_interconnect_1:nios2_qsys_0_instruction_master_readdatavalid -> nios2_qsys_0:i_readdatavalid
	wire         mm_interconnect_1_rom_s1_chipselect;           // mm_interconnect_1:ROM_s1_chipselect -> ROM:chipselect
	wire  [31:0] mm_interconnect_1_rom_s1_readdata;             // ROM:readdata -> mm_interconnect_1:ROM_s1_readdata
	wire         mm_interconnect_1_rom_s1_debugaccess;          // mm_interconnect_1:ROM_s1_debugaccess -> ROM:debugaccess
	wire  [15:0] mm_interconnect_1_rom_s1_address;              // mm_interconnect_1:ROM_s1_address -> ROM:address
	wire   [3:0] mm_interconnect_1_rom_s1_byteenable;           // mm_interconnect_1:ROM_s1_byteenable -> ROM:byteenable
	wire         mm_interconnect_1_rom_s1_write;                // mm_interconnect_1:ROM_s1_write -> ROM:write
	wire  [31:0] mm_interconnect_1_rom_s1_writedata;            // mm_interconnect_1:ROM_s1_writedata -> ROM:writedata
	wire         mm_interconnect_1_rom_s1_clken;                // mm_interconnect_1:ROM_s1_clken -> ROM:clken
	wire         irq_mapper_receiver0_irq;                      // TIMER:irq -> irq_mapper:receiver0_irq
	wire  [31:0] nios2_qsys_0_d_irq_irq;                        // irq_mapper:sender_irq -> nios2_qsys_0:d_irq
	wire         rst_controller_reset_out_reset;                // rst_controller:reset_out -> [KEYS:reset_n, LEDS:reset_n, RAM:reset, ROM:reset, SDRAM:reset_n, SEG1:reset_n, SEG2:reset_n, SEG3:reset_n, SEG4:reset_n, SEG5:reset_n, SEG6:reset_n, SW:reset_n, TIMER:reset_n, irq_mapper:reset, mm_interconnect_0:nios2_qsys_0_reset_n_reset_bridge_in_reset_reset, mm_interconnect_1:nios2_qsys_0_reset_n_reset_bridge_in_reset_reset, nios2_qsys_0:reset_n, rst_translator:in_reset]
	wire         rst_controller_reset_out_reset_req;            // rst_controller:reset_req -> [RAM:reset_req, ROM:reset_req, rst_translator:reset_req_in]
	wire         rst_controller_001_reset_out_reset;            // rst_controller_001:reset_out -> mm_interconnect_0:hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset
	wire         hps_0_h2f_reset_reset;                         // hps_0:h2f_rst_n -> rst_controller_001:reset_in0

	NUEVO_DESIGN_KEYS keys (
		.clk      (clk_clk),                            //                 clk.clk
		.reset_n  (~rst_controller_reset_out_reset),    //               reset.reset_n
		.address  (mm_interconnect_0_keys_s1_address),  //                  s1.address
		.readdata (mm_interconnect_0_keys_s1_readdata), //                    .readdata
		.in_port  (keys_export)                         // external_connection.export
	);

	NUEVO_DESIGN_LEDS leds (
		.clk        (clk_clk),                              //                 clk.clk
		.reset_n    (~rst_controller_reset_out_reset),      //               reset.reset_n
		.address    (mm_interconnect_0_leds_s1_address),    //                  s1.address
		.write_n    (~mm_interconnect_0_leds_s1_write),     //                    .write_n
		.writedata  (mm_interconnect_0_leds_s1_writedata),  //                    .writedata
		.chipselect (mm_interconnect_0_leds_s1_chipselect), //                    .chipselect
		.readdata   (mm_interconnect_0_leds_s1_readdata),   //                    .readdata
		.out_port   (leds_export)                           // external_connection.export
	);

	NUEVO_DESIGN_RAM ram (
		.clk        (clk_clk),                             //   clk1.clk
		.address    (mm_interconnect_0_ram_s1_address),    //     s1.address
		.clken      (mm_interconnect_0_ram_s1_clken),      //       .clken
		.chipselect (mm_interconnect_0_ram_s1_chipselect), //       .chipselect
		.write      (mm_interconnect_0_ram_s1_write),      //       .write
		.readdata   (mm_interconnect_0_ram_s1_readdata),   //       .readdata
		.writedata  (mm_interconnect_0_ram_s1_writedata),  //       .writedata
		.byteenable (mm_interconnect_0_ram_s1_byteenable), //       .byteenable
		.reset      (rst_controller_reset_out_reset),      // reset1.reset
		.reset_req  (rst_controller_reset_out_reset_req),  //       .reset_req
		.freeze     (1'b0)                                 // (terminated)
	);

	NUEVO_DESIGN_ROM rom (
		.clk         (clk_clk),                              //   clk1.clk
		.address     (mm_interconnect_1_rom_s1_address),     //     s1.address
		.debugaccess (mm_interconnect_1_rom_s1_debugaccess), //       .debugaccess
		.clken       (mm_interconnect_1_rom_s1_clken),       //       .clken
		.chipselect  (mm_interconnect_1_rom_s1_chipselect),  //       .chipselect
		.write       (mm_interconnect_1_rom_s1_write),       //       .write
		.readdata    (mm_interconnect_1_rom_s1_readdata),    //       .readdata
		.writedata   (mm_interconnect_1_rom_s1_writedata),   //       .writedata
		.byteenable  (mm_interconnect_1_rom_s1_byteenable),  //       .byteenable
		.reset       (rst_controller_reset_out_reset),       // reset1.reset
		.reset_req   (rst_controller_reset_out_reset_req),   //       .reset_req
		.freeze      (1'b0)                                  // (terminated)
	);

	NUEVO_DESIGN_SDRAM sdram (
		.clk            (clk_clk),                                  //   clk.clk
		.reset_n        (~rst_controller_reset_out_reset),          // reset.reset_n
		.az_addr        (mm_interconnect_0_sdram_s1_address),       //    s1.address
		.az_be_n        (~mm_interconnect_0_sdram_s1_byteenable),   //      .byteenable_n
		.az_cs          (mm_interconnect_0_sdram_s1_chipselect),    //      .chipselect
		.az_data        (mm_interconnect_0_sdram_s1_writedata),     //      .writedata
		.az_rd_n        (~mm_interconnect_0_sdram_s1_read),         //      .read_n
		.az_wr_n        (~mm_interconnect_0_sdram_s1_write),        //      .write_n
		.za_data        (mm_interconnect_0_sdram_s1_readdata),      //      .readdata
		.za_valid       (mm_interconnect_0_sdram_s1_readdatavalid), //      .readdatavalid
		.za_waitrequest (mm_interconnect_0_sdram_s1_waitrequest),   //      .waitrequest
		.zs_addr        (sdram_wire_addr),                          //  wire.export
		.zs_ba          (sdram_wire_ba),                            //      .export
		.zs_cas_n       (sdram_wire_cas_n),                         //      .export
		.zs_cke         (sdram_wire_cke),                           //      .export
		.zs_cs_n        (sdram_wire_cs_n),                          //      .export
		.zs_dq          (sdram_wire_dq),                            //      .export
		.zs_dqm         (sdram_wire_dqm),                           //      .export
		.zs_ras_n       (sdram_wire_ras_n),                         //      .export
		.zs_we_n        (sdram_wire_we_n)                           //      .export
	);

	NUEVO_DESIGN_SEG1 seg1 (
		.clk        (clk_clk),                              //                 clk.clk
		.reset_n    (~rst_controller_reset_out_reset),      //               reset.reset_n
		.address    (mm_interconnect_0_seg1_s1_address),    //                  s1.address
		.write_n    (~mm_interconnect_0_seg1_s1_write),     //                    .write_n
		.writedata  (mm_interconnect_0_seg1_s1_writedata),  //                    .writedata
		.chipselect (mm_interconnect_0_seg1_s1_chipselect), //                    .chipselect
		.readdata   (mm_interconnect_0_seg1_s1_readdata),   //                    .readdata
		.out_port   (seg1_export)                           // external_connection.export
	);

	NUEVO_DESIGN_SEG1 seg2 (
		.clk        (clk_clk),                              //                 clk.clk
		.reset_n    (~rst_controller_reset_out_reset),      //               reset.reset_n
		.address    (mm_interconnect_0_seg2_s1_address),    //                  s1.address
		.write_n    (~mm_interconnect_0_seg2_s1_write),     //                    .write_n
		.writedata  (mm_interconnect_0_seg2_s1_writedata),  //                    .writedata
		.chipselect (mm_interconnect_0_seg2_s1_chipselect), //                    .chipselect
		.readdata   (mm_interconnect_0_seg2_s1_readdata),   //                    .readdata
		.out_port   (seg2_export)                           // external_connection.export
	);

	NUEVO_DESIGN_SEG1 seg3 (
		.clk        (clk_clk),                              //                 clk.clk
		.reset_n    (~rst_controller_reset_out_reset),      //               reset.reset_n
		.address    (mm_interconnect_0_seg3_s1_address),    //                  s1.address
		.write_n    (~mm_interconnect_0_seg3_s1_write),     //                    .write_n
		.writedata  (mm_interconnect_0_seg3_s1_writedata),  //                    .writedata
		.chipselect (mm_interconnect_0_seg3_s1_chipselect), //                    .chipselect
		.readdata   (mm_interconnect_0_seg3_s1_readdata),   //                    .readdata
		.out_port   (seg3_export)                           // external_connection.export
	);

	NUEVO_DESIGN_SEG1 seg4 (
		.clk        (clk_clk),                              //                 clk.clk
		.reset_n    (~rst_controller_reset_out_reset),      //               reset.reset_n
		.address    (mm_interconnect_0_seg4_s1_address),    //                  s1.address
		.write_n    (~mm_interconnect_0_seg4_s1_write),     //                    .write_n
		.writedata  (mm_interconnect_0_seg4_s1_writedata),  //                    .writedata
		.chipselect (mm_interconnect_0_seg4_s1_chipselect), //                    .chipselect
		.readdata   (mm_interconnect_0_seg4_s1_readdata),   //                    .readdata
		.out_port   (seg4_export)                           // external_connection.export
	);

	NUEVO_DESIGN_SEG1 seg5 (
		.clk        (clk_clk),                              //                 clk.clk
		.reset_n    (~rst_controller_reset_out_reset),      //               reset.reset_n
		.address    (mm_interconnect_0_seg5_s1_address),    //                  s1.address
		.write_n    (~mm_interconnect_0_seg5_s1_write),     //                    .write_n
		.writedata  (mm_interconnect_0_seg5_s1_writedata),  //                    .writedata
		.chipselect (mm_interconnect_0_seg5_s1_chipselect), //                    .chipselect
		.readdata   (mm_interconnect_0_seg5_s1_readdata),   //                    .readdata
		.out_port   (seg5_export)                           // external_connection.export
	);

	NUEVO_DESIGN_SEG1 seg6 (
		.clk        (clk_clk),                              //                 clk.clk
		.reset_n    (~rst_controller_reset_out_reset),      //               reset.reset_n
		.address    (mm_interconnect_0_seg6_s1_address),    //                  s1.address
		.write_n    (~mm_interconnect_0_seg6_s1_write),     //                    .write_n
		.writedata  (mm_interconnect_0_seg6_s1_writedata),  //                    .writedata
		.chipselect (mm_interconnect_0_seg6_s1_chipselect), //                    .chipselect
		.readdata   (mm_interconnect_0_seg6_s1_readdata),   //                    .readdata
		.out_port   (seg6_export)                           // external_connection.export
	);

	NUEVO_DESIGN_SW sw (
		.clk      (clk_clk),                          //                 clk.clk
		.reset_n  (~rst_controller_reset_out_reset),  //               reset.reset_n
		.address  (mm_interconnect_0_sw_s1_address),  //                  s1.address
		.readdata (mm_interconnect_0_sw_s1_readdata), //                    .readdata
		.in_port  (sw_export)                         // external_connection.export
	);

	NUEVO_DESIGN_TIMER timer (
		.clk        (clk_clk),                               //   clk.clk
		.reset_n    (~rst_controller_reset_out_reset),       // reset.reset_n
		.address    (mm_interconnect_0_timer_s1_address),    //    s1.address
		.writedata  (mm_interconnect_0_timer_s1_writedata),  //      .writedata
		.readdata   (mm_interconnect_0_timer_s1_readdata),   //      .readdata
		.chipselect (mm_interconnect_0_timer_s1_chipselect), //      .chipselect
		.write_n    (~mm_interconnect_0_timer_s1_write),     //      .write_n
		.irq        (irq_mapper_receiver0_irq)               //   irq.irq
	);

	NUEVO_DESIGN_hps_0 #(
		.F2S_Width (0),
		.S2F_Width (2)
	) hps_0 (
		.mem_a          (memory_mem_a),                    //            memory.mem_a
		.mem_ba         (memory_mem_ba),                   //                  .mem_ba
		.mem_ck         (memory_mem_ck),                   //                  .mem_ck
		.mem_ck_n       (memory_mem_ck_n),                 //                  .mem_ck_n
		.mem_cke        (memory_mem_cke),                  //                  .mem_cke
		.mem_cs_n       (memory_mem_cs_n),                 //                  .mem_cs_n
		.mem_ras_n      (memory_mem_ras_n),                //                  .mem_ras_n
		.mem_cas_n      (memory_mem_cas_n),                //                  .mem_cas_n
		.mem_we_n       (memory_mem_we_n),                 //                  .mem_we_n
		.mem_reset_n    (memory_mem_reset_n),              //                  .mem_reset_n
		.mem_dq         (memory_mem_dq),                   //                  .mem_dq
		.mem_dqs        (memory_mem_dqs),                  //                  .mem_dqs
		.mem_dqs_n      (memory_mem_dqs_n),                //                  .mem_dqs_n
		.mem_odt        (memory_mem_odt),                  //                  .mem_odt
		.mem_dm         (memory_mem_dm),                   //                  .mem_dm
		.oct_rzqin      (memory_oct_rzqin),                //                  .oct_rzqin
		.h2f_rst_n      (hps_0_h2f_reset_reset),           //         h2f_reset.reset_n
		.h2f_axi_clk    (clk_clk),                         //     h2f_axi_clock.clk
		.h2f_AWID       (hps_0_h2f_axi_master_awid),       //    h2f_axi_master.awid
		.h2f_AWADDR     (hps_0_h2f_axi_master_awaddr),     //                  .awaddr
		.h2f_AWLEN      (hps_0_h2f_axi_master_awlen),      //                  .awlen
		.h2f_AWSIZE     (hps_0_h2f_axi_master_awsize),     //                  .awsize
		.h2f_AWBURST    (hps_0_h2f_axi_master_awburst),    //                  .awburst
		.h2f_AWLOCK     (hps_0_h2f_axi_master_awlock),     //                  .awlock
		.h2f_AWCACHE    (hps_0_h2f_axi_master_awcache),    //                  .awcache
		.h2f_AWPROT     (hps_0_h2f_axi_master_awprot),     //                  .awprot
		.h2f_AWVALID    (hps_0_h2f_axi_master_awvalid),    //                  .awvalid
		.h2f_AWREADY    (hps_0_h2f_axi_master_awready),    //                  .awready
		.h2f_WID        (hps_0_h2f_axi_master_wid),        //                  .wid
		.h2f_WDATA      (hps_0_h2f_axi_master_wdata),      //                  .wdata
		.h2f_WSTRB      (hps_0_h2f_axi_master_wstrb),      //                  .wstrb
		.h2f_WLAST      (hps_0_h2f_axi_master_wlast),      //                  .wlast
		.h2f_WVALID     (hps_0_h2f_axi_master_wvalid),     //                  .wvalid
		.h2f_WREADY     (hps_0_h2f_axi_master_wready),     //                  .wready
		.h2f_BID        (hps_0_h2f_axi_master_bid),        //                  .bid
		.h2f_BRESP      (hps_0_h2f_axi_master_bresp),      //                  .bresp
		.h2f_BVALID     (hps_0_h2f_axi_master_bvalid),     //                  .bvalid
		.h2f_BREADY     (hps_0_h2f_axi_master_bready),     //                  .bready
		.h2f_ARID       (hps_0_h2f_axi_master_arid),       //                  .arid
		.h2f_ARADDR     (hps_0_h2f_axi_master_araddr),     //                  .araddr
		.h2f_ARLEN      (hps_0_h2f_axi_master_arlen),      //                  .arlen
		.h2f_ARSIZE     (hps_0_h2f_axi_master_arsize),     //                  .arsize
		.h2f_ARBURST    (hps_0_h2f_axi_master_arburst),    //                  .arburst
		.h2f_ARLOCK     (hps_0_h2f_axi_master_arlock),     //                  .arlock
		.h2f_ARCACHE    (hps_0_h2f_axi_master_arcache),    //                  .arcache
		.h2f_ARPROT     (hps_0_h2f_axi_master_arprot),     //                  .arprot
		.h2f_ARVALID    (hps_0_h2f_axi_master_arvalid),    //                  .arvalid
		.h2f_ARREADY    (hps_0_h2f_axi_master_arready),    //                  .arready
		.h2f_RID        (hps_0_h2f_axi_master_rid),        //                  .rid
		.h2f_RDATA      (hps_0_h2f_axi_master_rdata),      //                  .rdata
		.h2f_RRESP      (hps_0_h2f_axi_master_rresp),      //                  .rresp
		.h2f_RLAST      (hps_0_h2f_axi_master_rlast),      //                  .rlast
		.h2f_RVALID     (hps_0_h2f_axi_master_rvalid),     //                  .rvalid
		.h2f_RREADY     (hps_0_h2f_axi_master_rready),     //                  .rready
		.h2f_lw_axi_clk (clk_clk),                         //  h2f_lw_axi_clock.clk
		.h2f_lw_AWID    (hps_0_h2f_lw_axi_master_awid),    // h2f_lw_axi_master.awid
		.h2f_lw_AWADDR  (hps_0_h2f_lw_axi_master_awaddr),  //                  .awaddr
		.h2f_lw_AWLEN   (hps_0_h2f_lw_axi_master_awlen),   //                  .awlen
		.h2f_lw_AWSIZE  (hps_0_h2f_lw_axi_master_awsize),  //                  .awsize
		.h2f_lw_AWBURST (hps_0_h2f_lw_axi_master_awburst), //                  .awburst
		.h2f_lw_AWLOCK  (hps_0_h2f_lw_axi_master_awlock),  //                  .awlock
		.h2f_lw_AWCACHE (hps_0_h2f_lw_axi_master_awcache), //                  .awcache
		.h2f_lw_AWPROT  (hps_0_h2f_lw_axi_master_awprot),  //                  .awprot
		.h2f_lw_AWVALID (hps_0_h2f_lw_axi_master_awvalid), //                  .awvalid
		.h2f_lw_AWREADY (hps_0_h2f_lw_axi_master_awready), //                  .awready
		.h2f_lw_WID     (hps_0_h2f_lw_axi_master_wid),     //                  .wid
		.h2f_lw_WDATA   (hps_0_h2f_lw_axi_master_wdata),   //                  .wdata
		.h2f_lw_WSTRB   (hps_0_h2f_lw_axi_master_wstrb),   //                  .wstrb
		.h2f_lw_WLAST   (hps_0_h2f_lw_axi_master_wlast),   //                  .wlast
		.h2f_lw_WVALID  (hps_0_h2f_lw_axi_master_wvalid),  //                  .wvalid
		.h2f_lw_WREADY  (hps_0_h2f_lw_axi_master_wready),  //                  .wready
		.h2f_lw_BID     (hps_0_h2f_lw_axi_master_bid),     //                  .bid
		.h2f_lw_BRESP   (hps_0_h2f_lw_axi_master_bresp),   //                  .bresp
		.h2f_lw_BVALID  (hps_0_h2f_lw_axi_master_bvalid),  //                  .bvalid
		.h2f_lw_BREADY  (hps_0_h2f_lw_axi_master_bready),  //                  .bready
		.h2f_lw_ARID    (hps_0_h2f_lw_axi_master_arid),    //                  .arid
		.h2f_lw_ARADDR  (hps_0_h2f_lw_axi_master_araddr),  //                  .araddr
		.h2f_lw_ARLEN   (hps_0_h2f_lw_axi_master_arlen),   //                  .arlen
		.h2f_lw_ARSIZE  (hps_0_h2f_lw_axi_master_arsize),  //                  .arsize
		.h2f_lw_ARBURST (hps_0_h2f_lw_axi_master_arburst), //                  .arburst
		.h2f_lw_ARLOCK  (hps_0_h2f_lw_axi_master_arlock),  //                  .arlock
		.h2f_lw_ARCACHE (hps_0_h2f_lw_axi_master_arcache), //                  .arcache
		.h2f_lw_ARPROT  (hps_0_h2f_lw_axi_master_arprot),  //                  .arprot
		.h2f_lw_ARVALID (hps_0_h2f_lw_axi_master_arvalid), //                  .arvalid
		.h2f_lw_ARREADY (hps_0_h2f_lw_axi_master_arready), //                  .arready
		.h2f_lw_RID     (hps_0_h2f_lw_axi_master_rid),     //                  .rid
		.h2f_lw_RDATA   (hps_0_h2f_lw_axi_master_rdata),   //                  .rdata
		.h2f_lw_RRESP   (hps_0_h2f_lw_axi_master_rresp),   //                  .rresp
		.h2f_lw_RLAST   (hps_0_h2f_lw_axi_master_rlast),   //                  .rlast
		.h2f_lw_RVALID  (hps_0_h2f_lw_axi_master_rvalid),  //                  .rvalid
		.h2f_lw_RREADY  (hps_0_h2f_lw_axi_master_rready)   //                  .rready
	);

	NUEVO_DESIGN_nios2_qsys_0 nios2_qsys_0 (
		.clk             (clk_clk),                                       //                       clk.clk
		.reset_n         (~rst_controller_reset_out_reset),               //                   reset_n.reset_n
		.d_address       (nios2_qsys_0_data_master_address),              //               data_master.address
		.d_byteenable    (nios2_qsys_0_data_master_byteenable),           //                          .byteenable
		.d_read          (nios2_qsys_0_data_master_read),                 //                          .read
		.d_readdata      (nios2_qsys_0_data_master_readdata),             //                          .readdata
		.d_waitrequest   (nios2_qsys_0_data_master_waitrequest),          //                          .waitrequest
		.d_write         (nios2_qsys_0_data_master_write),                //                          .write
		.d_writedata     (nios2_qsys_0_data_master_writedata),            //                          .writedata
		.i_address       (nios2_qsys_0_instruction_master_address),       //        instruction_master.address
		.i_read          (nios2_qsys_0_instruction_master_read),          //                          .read
		.i_readdata      (nios2_qsys_0_instruction_master_readdata),      //                          .readdata
		.i_waitrequest   (nios2_qsys_0_instruction_master_waitrequest),   //                          .waitrequest
		.i_readdatavalid (nios2_qsys_0_instruction_master_readdatavalid), //                          .readdatavalid
		.d_irq           (nios2_qsys_0_d_irq_irq),                        //                     d_irq.irq
		.no_ci_readra    ()                                               // custom_instruction_master.readra
	);

	NUEVO_DESIGN_mm_interconnect_0 mm_interconnect_0 (
		.hps_0_h2f_axi_master_awid                                           (hps_0_h2f_axi_master_awid),                //                                          hps_0_h2f_axi_master.awid
		.hps_0_h2f_axi_master_awaddr                                         (hps_0_h2f_axi_master_awaddr),              //                                                              .awaddr
		.hps_0_h2f_axi_master_awlen                                          (hps_0_h2f_axi_master_awlen),               //                                                              .awlen
		.hps_0_h2f_axi_master_awsize                                         (hps_0_h2f_axi_master_awsize),              //                                                              .awsize
		.hps_0_h2f_axi_master_awburst                                        (hps_0_h2f_axi_master_awburst),             //                                                              .awburst
		.hps_0_h2f_axi_master_awlock                                         (hps_0_h2f_axi_master_awlock),              //                                                              .awlock
		.hps_0_h2f_axi_master_awcache                                        (hps_0_h2f_axi_master_awcache),             //                                                              .awcache
		.hps_0_h2f_axi_master_awprot                                         (hps_0_h2f_axi_master_awprot),              //                                                              .awprot
		.hps_0_h2f_axi_master_awvalid                                        (hps_0_h2f_axi_master_awvalid),             //                                                              .awvalid
		.hps_0_h2f_axi_master_awready                                        (hps_0_h2f_axi_master_awready),             //                                                              .awready
		.hps_0_h2f_axi_master_wid                                            (hps_0_h2f_axi_master_wid),                 //                                                              .wid
		.hps_0_h2f_axi_master_wdata                                          (hps_0_h2f_axi_master_wdata),               //                                                              .wdata
		.hps_0_h2f_axi_master_wstrb                                          (hps_0_h2f_axi_master_wstrb),               //                                                              .wstrb
		.hps_0_h2f_axi_master_wlast                                          (hps_0_h2f_axi_master_wlast),               //                                                              .wlast
		.hps_0_h2f_axi_master_wvalid                                         (hps_0_h2f_axi_master_wvalid),              //                                                              .wvalid
		.hps_0_h2f_axi_master_wready                                         (hps_0_h2f_axi_master_wready),              //                                                              .wready
		.hps_0_h2f_axi_master_bid                                            (hps_0_h2f_axi_master_bid),                 //                                                              .bid
		.hps_0_h2f_axi_master_bresp                                          (hps_0_h2f_axi_master_bresp),               //                                                              .bresp
		.hps_0_h2f_axi_master_bvalid                                         (hps_0_h2f_axi_master_bvalid),              //                                                              .bvalid
		.hps_0_h2f_axi_master_bready                                         (hps_0_h2f_axi_master_bready),              //                                                              .bready
		.hps_0_h2f_axi_master_arid                                           (hps_0_h2f_axi_master_arid),                //                                                              .arid
		.hps_0_h2f_axi_master_araddr                                         (hps_0_h2f_axi_master_araddr),              //                                                              .araddr
		.hps_0_h2f_axi_master_arlen                                          (hps_0_h2f_axi_master_arlen),               //                                                              .arlen
		.hps_0_h2f_axi_master_arsize                                         (hps_0_h2f_axi_master_arsize),              //                                                              .arsize
		.hps_0_h2f_axi_master_arburst                                        (hps_0_h2f_axi_master_arburst),             //                                                              .arburst
		.hps_0_h2f_axi_master_arlock                                         (hps_0_h2f_axi_master_arlock),              //                                                              .arlock
		.hps_0_h2f_axi_master_arcache                                        (hps_0_h2f_axi_master_arcache),             //                                                              .arcache
		.hps_0_h2f_axi_master_arprot                                         (hps_0_h2f_axi_master_arprot),              //                                                              .arprot
		.hps_0_h2f_axi_master_arvalid                                        (hps_0_h2f_axi_master_arvalid),             //                                                              .arvalid
		.hps_0_h2f_axi_master_arready                                        (hps_0_h2f_axi_master_arready),             //                                                              .arready
		.hps_0_h2f_axi_master_rid                                            (hps_0_h2f_axi_master_rid),                 //                                                              .rid
		.hps_0_h2f_axi_master_rdata                                          (hps_0_h2f_axi_master_rdata),               //                                                              .rdata
		.hps_0_h2f_axi_master_rresp                                          (hps_0_h2f_axi_master_rresp),               //                                                              .rresp
		.hps_0_h2f_axi_master_rlast                                          (hps_0_h2f_axi_master_rlast),               //                                                              .rlast
		.hps_0_h2f_axi_master_rvalid                                         (hps_0_h2f_axi_master_rvalid),              //                                                              .rvalid
		.hps_0_h2f_axi_master_rready                                         (hps_0_h2f_axi_master_rready),              //                                                              .rready
		.hps_0_h2f_lw_axi_master_awid                                        (hps_0_h2f_lw_axi_master_awid),             //                                       hps_0_h2f_lw_axi_master.awid
		.hps_0_h2f_lw_axi_master_awaddr                                      (hps_0_h2f_lw_axi_master_awaddr),           //                                                              .awaddr
		.hps_0_h2f_lw_axi_master_awlen                                       (hps_0_h2f_lw_axi_master_awlen),            //                                                              .awlen
		.hps_0_h2f_lw_axi_master_awsize                                      (hps_0_h2f_lw_axi_master_awsize),           //                                                              .awsize
		.hps_0_h2f_lw_axi_master_awburst                                     (hps_0_h2f_lw_axi_master_awburst),          //                                                              .awburst
		.hps_0_h2f_lw_axi_master_awlock                                      (hps_0_h2f_lw_axi_master_awlock),           //                                                              .awlock
		.hps_0_h2f_lw_axi_master_awcache                                     (hps_0_h2f_lw_axi_master_awcache),          //                                                              .awcache
		.hps_0_h2f_lw_axi_master_awprot                                      (hps_0_h2f_lw_axi_master_awprot),           //                                                              .awprot
		.hps_0_h2f_lw_axi_master_awvalid                                     (hps_0_h2f_lw_axi_master_awvalid),          //                                                              .awvalid
		.hps_0_h2f_lw_axi_master_awready                                     (hps_0_h2f_lw_axi_master_awready),          //                                                              .awready
		.hps_0_h2f_lw_axi_master_wid                                         (hps_0_h2f_lw_axi_master_wid),              //                                                              .wid
		.hps_0_h2f_lw_axi_master_wdata                                       (hps_0_h2f_lw_axi_master_wdata),            //                                                              .wdata
		.hps_0_h2f_lw_axi_master_wstrb                                       (hps_0_h2f_lw_axi_master_wstrb),            //                                                              .wstrb
		.hps_0_h2f_lw_axi_master_wlast                                       (hps_0_h2f_lw_axi_master_wlast),            //                                                              .wlast
		.hps_0_h2f_lw_axi_master_wvalid                                      (hps_0_h2f_lw_axi_master_wvalid),           //                                                              .wvalid
		.hps_0_h2f_lw_axi_master_wready                                      (hps_0_h2f_lw_axi_master_wready),           //                                                              .wready
		.hps_0_h2f_lw_axi_master_bid                                         (hps_0_h2f_lw_axi_master_bid),              //                                                              .bid
		.hps_0_h2f_lw_axi_master_bresp                                       (hps_0_h2f_lw_axi_master_bresp),            //                                                              .bresp
		.hps_0_h2f_lw_axi_master_bvalid                                      (hps_0_h2f_lw_axi_master_bvalid),           //                                                              .bvalid
		.hps_0_h2f_lw_axi_master_bready                                      (hps_0_h2f_lw_axi_master_bready),           //                                                              .bready
		.hps_0_h2f_lw_axi_master_arid                                        (hps_0_h2f_lw_axi_master_arid),             //                                                              .arid
		.hps_0_h2f_lw_axi_master_araddr                                      (hps_0_h2f_lw_axi_master_araddr),           //                                                              .araddr
		.hps_0_h2f_lw_axi_master_arlen                                       (hps_0_h2f_lw_axi_master_arlen),            //                                                              .arlen
		.hps_0_h2f_lw_axi_master_arsize                                      (hps_0_h2f_lw_axi_master_arsize),           //                                                              .arsize
		.hps_0_h2f_lw_axi_master_arburst                                     (hps_0_h2f_lw_axi_master_arburst),          //                                                              .arburst
		.hps_0_h2f_lw_axi_master_arlock                                      (hps_0_h2f_lw_axi_master_arlock),           //                                                              .arlock
		.hps_0_h2f_lw_axi_master_arcache                                     (hps_0_h2f_lw_axi_master_arcache),          //                                                              .arcache
		.hps_0_h2f_lw_axi_master_arprot                                      (hps_0_h2f_lw_axi_master_arprot),           //                                                              .arprot
		.hps_0_h2f_lw_axi_master_arvalid                                     (hps_0_h2f_lw_axi_master_arvalid),          //                                                              .arvalid
		.hps_0_h2f_lw_axi_master_arready                                     (hps_0_h2f_lw_axi_master_arready),          //                                                              .arready
		.hps_0_h2f_lw_axi_master_rid                                         (hps_0_h2f_lw_axi_master_rid),              //                                                              .rid
		.hps_0_h2f_lw_axi_master_rdata                                       (hps_0_h2f_lw_axi_master_rdata),            //                                                              .rdata
		.hps_0_h2f_lw_axi_master_rresp                                       (hps_0_h2f_lw_axi_master_rresp),            //                                                              .rresp
		.hps_0_h2f_lw_axi_master_rlast                                       (hps_0_h2f_lw_axi_master_rlast),            //                                                              .rlast
		.hps_0_h2f_lw_axi_master_rvalid                                      (hps_0_h2f_lw_axi_master_rvalid),           //                                                              .rvalid
		.hps_0_h2f_lw_axi_master_rready                                      (hps_0_h2f_lw_axi_master_rready),           //                                                              .rready
		.clk_0_clk_clk                                                       (clk_clk),                                  //                                                     clk_0_clk.clk
		.hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset (rst_controller_001_reset_out_reset),       // hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset.reset
		.nios2_qsys_0_reset_n_reset_bridge_in_reset_reset                    (rst_controller_reset_out_reset),           //                    nios2_qsys_0_reset_n_reset_bridge_in_reset.reset
		.nios2_qsys_0_data_master_address                                    (nios2_qsys_0_data_master_address),         //                                      nios2_qsys_0_data_master.address
		.nios2_qsys_0_data_master_waitrequest                                (nios2_qsys_0_data_master_waitrequest),     //                                                              .waitrequest
		.nios2_qsys_0_data_master_byteenable                                 (nios2_qsys_0_data_master_byteenable),      //                                                              .byteenable
		.nios2_qsys_0_data_master_read                                       (nios2_qsys_0_data_master_read),            //                                                              .read
		.nios2_qsys_0_data_master_readdata                                   (nios2_qsys_0_data_master_readdata),        //                                                              .readdata
		.nios2_qsys_0_data_master_write                                      (nios2_qsys_0_data_master_write),           //                                                              .write
		.nios2_qsys_0_data_master_writedata                                  (nios2_qsys_0_data_master_writedata),       //                                                              .writedata
		.KEYS_s1_address                                                     (mm_interconnect_0_keys_s1_address),        //                                                       KEYS_s1.address
		.KEYS_s1_readdata                                                    (mm_interconnect_0_keys_s1_readdata),       //                                                              .readdata
		.LEDS_s1_address                                                     (mm_interconnect_0_leds_s1_address),        //                                                       LEDS_s1.address
		.LEDS_s1_write                                                       (mm_interconnect_0_leds_s1_write),          //                                                              .write
		.LEDS_s1_readdata                                                    (mm_interconnect_0_leds_s1_readdata),       //                                                              .readdata
		.LEDS_s1_writedata                                                   (mm_interconnect_0_leds_s1_writedata),      //                                                              .writedata
		.LEDS_s1_chipselect                                                  (mm_interconnect_0_leds_s1_chipselect),     //                                                              .chipselect
		.RAM_s1_address                                                      (mm_interconnect_0_ram_s1_address),         //                                                        RAM_s1.address
		.RAM_s1_write                                                        (mm_interconnect_0_ram_s1_write),           //                                                              .write
		.RAM_s1_readdata                                                     (mm_interconnect_0_ram_s1_readdata),        //                                                              .readdata
		.RAM_s1_writedata                                                    (mm_interconnect_0_ram_s1_writedata),       //                                                              .writedata
		.RAM_s1_byteenable                                                   (mm_interconnect_0_ram_s1_byteenable),      //                                                              .byteenable
		.RAM_s1_chipselect                                                   (mm_interconnect_0_ram_s1_chipselect),      //                                                              .chipselect
		.RAM_s1_clken                                                        (mm_interconnect_0_ram_s1_clken),           //                                                              .clken
		.SDRAM_s1_address                                                    (mm_interconnect_0_sdram_s1_address),       //                                                      SDRAM_s1.address
		.SDRAM_s1_write                                                      (mm_interconnect_0_sdram_s1_write),         //                                                              .write
		.SDRAM_s1_read                                                       (mm_interconnect_0_sdram_s1_read),          //                                                              .read
		.SDRAM_s1_readdata                                                   (mm_interconnect_0_sdram_s1_readdata),      //                                                              .readdata
		.SDRAM_s1_writedata                                                  (mm_interconnect_0_sdram_s1_writedata),     //                                                              .writedata
		.SDRAM_s1_byteenable                                                 (mm_interconnect_0_sdram_s1_byteenable),    //                                                              .byteenable
		.SDRAM_s1_readdatavalid                                              (mm_interconnect_0_sdram_s1_readdatavalid), //                                                              .readdatavalid
		.SDRAM_s1_waitrequest                                                (mm_interconnect_0_sdram_s1_waitrequest),   //                                                              .waitrequest
		.SDRAM_s1_chipselect                                                 (mm_interconnect_0_sdram_s1_chipselect),    //                                                              .chipselect
		.SEG1_s1_address                                                     (mm_interconnect_0_seg1_s1_address),        //                                                       SEG1_s1.address
		.SEG1_s1_write                                                       (mm_interconnect_0_seg1_s1_write),          //                                                              .write
		.SEG1_s1_readdata                                                    (mm_interconnect_0_seg1_s1_readdata),       //                                                              .readdata
		.SEG1_s1_writedata                                                   (mm_interconnect_0_seg1_s1_writedata),      //                                                              .writedata
		.SEG1_s1_chipselect                                                  (mm_interconnect_0_seg1_s1_chipselect),     //                                                              .chipselect
		.SEG2_s1_address                                                     (mm_interconnect_0_seg2_s1_address),        //                                                       SEG2_s1.address
		.SEG2_s1_write                                                       (mm_interconnect_0_seg2_s1_write),          //                                                              .write
		.SEG2_s1_readdata                                                    (mm_interconnect_0_seg2_s1_readdata),       //                                                              .readdata
		.SEG2_s1_writedata                                                   (mm_interconnect_0_seg2_s1_writedata),      //                                                              .writedata
		.SEG2_s1_chipselect                                                  (mm_interconnect_0_seg2_s1_chipselect),     //                                                              .chipselect
		.SEG3_s1_address                                                     (mm_interconnect_0_seg3_s1_address),        //                                                       SEG3_s1.address
		.SEG3_s1_write                                                       (mm_interconnect_0_seg3_s1_write),          //                                                              .write
		.SEG3_s1_readdata                                                    (mm_interconnect_0_seg3_s1_readdata),       //                                                              .readdata
		.SEG3_s1_writedata                                                   (mm_interconnect_0_seg3_s1_writedata),      //                                                              .writedata
		.SEG3_s1_chipselect                                                  (mm_interconnect_0_seg3_s1_chipselect),     //                                                              .chipselect
		.SEG4_s1_address                                                     (mm_interconnect_0_seg4_s1_address),        //                                                       SEG4_s1.address
		.SEG4_s1_write                                                       (mm_interconnect_0_seg4_s1_write),          //                                                              .write
		.SEG4_s1_readdata                                                    (mm_interconnect_0_seg4_s1_readdata),       //                                                              .readdata
		.SEG4_s1_writedata                                                   (mm_interconnect_0_seg4_s1_writedata),      //                                                              .writedata
		.SEG4_s1_chipselect                                                  (mm_interconnect_0_seg4_s1_chipselect),     //                                                              .chipselect
		.SEG5_s1_address                                                     (mm_interconnect_0_seg5_s1_address),        //                                                       SEG5_s1.address
		.SEG5_s1_write                                                       (mm_interconnect_0_seg5_s1_write),          //                                                              .write
		.SEG5_s1_readdata                                                    (mm_interconnect_0_seg5_s1_readdata),       //                                                              .readdata
		.SEG5_s1_writedata                                                   (mm_interconnect_0_seg5_s1_writedata),      //                                                              .writedata
		.SEG5_s1_chipselect                                                  (mm_interconnect_0_seg5_s1_chipselect),     //                                                              .chipselect
		.SEG6_s1_address                                                     (mm_interconnect_0_seg6_s1_address),        //                                                       SEG6_s1.address
		.SEG6_s1_write                                                       (mm_interconnect_0_seg6_s1_write),          //                                                              .write
		.SEG6_s1_readdata                                                    (mm_interconnect_0_seg6_s1_readdata),       //                                                              .readdata
		.SEG6_s1_writedata                                                   (mm_interconnect_0_seg6_s1_writedata),      //                                                              .writedata
		.SEG6_s1_chipselect                                                  (mm_interconnect_0_seg6_s1_chipselect),     //                                                              .chipselect
		.SW_s1_address                                                       (mm_interconnect_0_sw_s1_address),          //                                                         SW_s1.address
		.SW_s1_readdata                                                      (mm_interconnect_0_sw_s1_readdata),         //                                                              .readdata
		.TIMER_s1_address                                                    (mm_interconnect_0_timer_s1_address),       //                                                      TIMER_s1.address
		.TIMER_s1_write                                                      (mm_interconnect_0_timer_s1_write),         //                                                              .write
		.TIMER_s1_readdata                                                   (mm_interconnect_0_timer_s1_readdata),      //                                                              .readdata
		.TIMER_s1_writedata                                                  (mm_interconnect_0_timer_s1_writedata),     //                                                              .writedata
		.TIMER_s1_chipselect                                                 (mm_interconnect_0_timer_s1_chipselect)     //                                                              .chipselect
	);

	NUEVO_DESIGN_mm_interconnect_1 mm_interconnect_1 (
		.clk_0_clk_clk                                    (clk_clk),                                       //                                  clk_0_clk.clk
		.nios2_qsys_0_reset_n_reset_bridge_in_reset_reset (rst_controller_reset_out_reset),                // nios2_qsys_0_reset_n_reset_bridge_in_reset.reset
		.nios2_qsys_0_instruction_master_address          (nios2_qsys_0_instruction_master_address),       //            nios2_qsys_0_instruction_master.address
		.nios2_qsys_0_instruction_master_waitrequest      (nios2_qsys_0_instruction_master_waitrequest),   //                                           .waitrequest
		.nios2_qsys_0_instruction_master_read             (nios2_qsys_0_instruction_master_read),          //                                           .read
		.nios2_qsys_0_instruction_master_readdata         (nios2_qsys_0_instruction_master_readdata),      //                                           .readdata
		.nios2_qsys_0_instruction_master_readdatavalid    (nios2_qsys_0_instruction_master_readdatavalid), //                                           .readdatavalid
		.ROM_s1_address                                   (mm_interconnect_1_rom_s1_address),              //                                     ROM_s1.address
		.ROM_s1_write                                     (mm_interconnect_1_rom_s1_write),                //                                           .write
		.ROM_s1_readdata                                  (mm_interconnect_1_rom_s1_readdata),             //                                           .readdata
		.ROM_s1_writedata                                 (mm_interconnect_1_rom_s1_writedata),            //                                           .writedata
		.ROM_s1_byteenable                                (mm_interconnect_1_rom_s1_byteenable),           //                                           .byteenable
		.ROM_s1_chipselect                                (mm_interconnect_1_rom_s1_chipselect),           //                                           .chipselect
		.ROM_s1_clken                                     (mm_interconnect_1_rom_s1_clken),                //                                           .clken
		.ROM_s1_debugaccess                               (mm_interconnect_1_rom_s1_debugaccess)           //                                           .debugaccess
	);

	NUEVO_DESIGN_irq_mapper irq_mapper (
		.clk           (clk_clk),                        //       clk.clk
		.reset         (rst_controller_reset_out_reset), // clk_reset.reset
		.receiver0_irq (irq_mapper_receiver0_irq),       // receiver0.irq
		.sender_irq    (nios2_qsys_0_d_irq_irq)          //    sender.irq
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (1),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller (
		.reset_in0      (~reset_reset_n),                     // reset_in0.reset
		.clk            (clk_clk),                            //       clk.clk
		.reset_out      (rst_controller_reset_out_reset),     // reset_out.reset
		.reset_req      (rst_controller_reset_out_reset_req), //          .reset_req
		.reset_req_in0  (1'b0),                               // (terminated)
		.reset_in1      (1'b0),                               // (terminated)
		.reset_req_in1  (1'b0),                               // (terminated)
		.reset_in2      (1'b0),                               // (terminated)
		.reset_req_in2  (1'b0),                               // (terminated)
		.reset_in3      (1'b0),                               // (terminated)
		.reset_req_in3  (1'b0),                               // (terminated)
		.reset_in4      (1'b0),                               // (terminated)
		.reset_req_in4  (1'b0),                               // (terminated)
		.reset_in5      (1'b0),                               // (terminated)
		.reset_req_in5  (1'b0),                               // (terminated)
		.reset_in6      (1'b0),                               // (terminated)
		.reset_req_in6  (1'b0),                               // (terminated)
		.reset_in7      (1'b0),                               // (terminated)
		.reset_req_in7  (1'b0),                               // (terminated)
		.reset_in8      (1'b0),                               // (terminated)
		.reset_req_in8  (1'b0),                               // (terminated)
		.reset_in9      (1'b0),                               // (terminated)
		.reset_req_in9  (1'b0),                               // (terminated)
		.reset_in10     (1'b0),                               // (terminated)
		.reset_req_in10 (1'b0),                               // (terminated)
		.reset_in11     (1'b0),                               // (terminated)
		.reset_req_in11 (1'b0),                               // (terminated)
		.reset_in12     (1'b0),                               // (terminated)
		.reset_req_in12 (1'b0),                               // (terminated)
		.reset_in13     (1'b0),                               // (terminated)
		.reset_req_in13 (1'b0),                               // (terminated)
		.reset_in14     (1'b0),                               // (terminated)
		.reset_req_in14 (1'b0),                               // (terminated)
		.reset_in15     (1'b0),                               // (terminated)
		.reset_req_in15 (1'b0)                                // (terminated)
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_001 (
		.reset_in0      (~hps_0_h2f_reset_reset),             // reset_in0.reset
		.clk            (clk_clk),                            //       clk.clk
		.reset_out      (rst_controller_001_reset_out_reset), // reset_out.reset
		.reset_req      (),                                   // (terminated)
		.reset_req_in0  (1'b0),                               // (terminated)
		.reset_in1      (1'b0),                               // (terminated)
		.reset_req_in1  (1'b0),                               // (terminated)
		.reset_in2      (1'b0),                               // (terminated)
		.reset_req_in2  (1'b0),                               // (terminated)
		.reset_in3      (1'b0),                               // (terminated)
		.reset_req_in3  (1'b0),                               // (terminated)
		.reset_in4      (1'b0),                               // (terminated)
		.reset_req_in4  (1'b0),                               // (terminated)
		.reset_in5      (1'b0),                               // (terminated)
		.reset_req_in5  (1'b0),                               // (terminated)
		.reset_in6      (1'b0),                               // (terminated)
		.reset_req_in6  (1'b0),                               // (terminated)
		.reset_in7      (1'b0),                               // (terminated)
		.reset_req_in7  (1'b0),                               // (terminated)
		.reset_in8      (1'b0),                               // (terminated)
		.reset_req_in8  (1'b0),                               // (terminated)
		.reset_in9      (1'b0),                               // (terminated)
		.reset_req_in9  (1'b0),                               // (terminated)
		.reset_in10     (1'b0),                               // (terminated)
		.reset_req_in10 (1'b0),                               // (terminated)
		.reset_in11     (1'b0),                               // (terminated)
		.reset_req_in11 (1'b0),                               // (terminated)
		.reset_in12     (1'b0),                               // (terminated)
		.reset_req_in12 (1'b0),                               // (terminated)
		.reset_in13     (1'b0),                               // (terminated)
		.reset_req_in13 (1'b0),                               // (terminated)
		.reset_in14     (1'b0),                               // (terminated)
		.reset_req_in14 (1'b0),                               // (terminated)
		.reset_in15     (1'b0),                               // (terminated)
		.reset_req_in15 (1'b0)                                // (terminated)
	);

endmodule
