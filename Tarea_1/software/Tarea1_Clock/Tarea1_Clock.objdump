
Tarea1_Clock.elf:     file format elf32-littlenios2
Tarea1_Clock.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000180

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00000874 memsz 0x00000874 flags r-x
    LOAD off    0x00002000 vaddr 0x00010000 paddr 0x00000894 align 2**12
         filesz 0x00000014 memsz 0x00000134 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000160  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00000714  00000180  00000180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000000c  00010000  00000894  00002000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000008  0001000c  000008a0  0000200c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000120  00010014  000008a8  00002014  2**2
                  ALLOC, SMALL_DATA
  6 .rom_0        00000000  000008a8  000008a8  00002014  2**0
                  CONTENTS
  7 .ram_0        00000000  00010134  00010134  00002014  2**0
                  CONTENTS
  8 .comment      0000002d  00000000  00000000  00002014  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000250  00000000  00000000  00002048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_info   00001849  00000000  00000000  00002298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00000d62  00000000  00000000  00003ae1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_line   00000d92  00000000  00000000  00004843  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_frame  000002b4  00000000  00000000  000055d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    00000a38  00000000  00000000  0000588c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_alt_sim_info 00000010  00000000  00000000  000062c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000070  00000000  00000000  000062d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_loclists 000007ea  00000000  00000000  00006348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000000da  00000000  00000000  00006b32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000063c  00000000  00000000  00006c0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .thread_model 00000003  00000000  00000000  000083aa  2**0
                  CONTENTS, READONLY
 21 .cpu          0000000c  00000000  00000000  000083ad  2**0
                  CONTENTS, READONLY
 22 .qsys         00000001  00000000  00000000  000083b9  2**0
                  CONTENTS, READONLY
 23 .simulation_enabled 00000001  00000000  00000000  000083ba  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000004  00000000  00000000  000083bb  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000004  00000000  00000000  000083bf  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000004  00000000  00000000  000083c3  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000007  00000000  00000000  000083c7  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000036  00000000  00000000  000083ce  2**0
                  CONTENTS, READONLY
 29 .jdi          000001f4  00000000  00000000  00008404  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00065b4a  00000000  00000000  000085f8  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000180 l    d  .text	00000000 .text
00010000 l    d  .rodata	00000000 .rodata
0001000c l    d  .rwdata	00000000 .rwdata
00010014 l    d  .bss	00000000 .bss
000008a8 l    d  .rom_0	00000000 .rom_0
00010134 l    d  .ram_0	00000000 .ram_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_loclists	00000000 .debug_loclists
00000000 l    d  .debug_rnglists	00000000 .debug_rnglists
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 l    df *ABS*	00000000 crt0.o
000001b8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world_small.c
00010000 l     O .rodata	0000000a CSWTCH.18
000001dc l     F .text	000002ac timer_isr
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 memcpy.c
00010030 g     O .bss	00000004 alt_instruction_exception_handler
000007e8 g     F .text	0000002c alt_main
00010034 g     O .bss	00000100 alt_irq
000008a0 g       *ABS*	00000000 __flash_rwdata_start
00000864 g     F .text	00000008 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
000001bc g     F .text	00000020 decoder
00010028 g     O .bss	00000004 alt_argv
0001800c g       *ABS*	00000000 _gp
0000086c g     F .text	00000028 memcpy
00000840 g     F .text	00000024 alt_exception_cause_generated_bad_addr
000005b0 g     F .text	00000064 .hidden __udivsi3
00010018 g     O .bss	00000004 switchSelect
00010134 g       *ABS*	00000000 __bss_end
000006fc g     F .text	00000068 alt_iic_isr_register
00010000 g       *ABS*	00000000 __alt_mem_ram_0
000006e4 g     F .text	00000018 alt_ic_irq_enabled
00010020 g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	00000060 alt_irq_handler
00000838 g     F .text	00000004 alt_dcache_flush_all
00010014 g       *ABS*	00000000 __ram_rwdata_end
0001000c g       *ABS*	00000000 __ram_rodata_end
00000614 g     F .text	0000005c .hidden __umodsi3
00010134 g       *ABS*	00000000 end
0000015c g     F .exceptions	00000024 alt_instruction_exception_entry
00014000 g       *ABS*	00000000 __alt_stack_pointer
00000180 g     F .text	0000003c _start
00000834 g     F .text	00000004 alt_sys_init
0001000c g       *ABS*	00000000 __ram_rwdata_start
00010000 g       *ABS*	00000000 __ram_rodata_start
00010134 g       *ABS*	00000000 __alt_stack_base
0001001c g     O .bss	00000004 counter
00010014 g       *ABS*	00000000 __bss_start
00000488 g     F .text	00000034 main
00010024 g     O .bss	00000004 alt_envp
000004bc g     F .text	00000080 .hidden __divsi3
00000894 g       *ABS*	00000000 __flash_rodata_start
00000814 g     F .text	00000020 alt_irq_init
0001002c g     O .bss	00000004 alt_argc
00000020 g       .exceptions	00000000 alt_irq_entry
00000020 g       *ABS*	00000000 __ram_exceptions_start
00000670 g     F .text	00000004 alt_ic_isr_register
00010014 g       *ABS*	00000000 _edata
00010134 g       *ABS*	00000000 _end
00000180 g       *ABS*	00000000 __ram_exceptions_end
000006ac g     F .text	00000038 alt_ic_irq_disable
0000053c g     F .text	00000074 .hidden __modsi3
00014000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00000000 g       *ABS*	00000000 __alt_mem_rom_0
00010014 g     O .bss	00000004 start
0000000c g       .entry	00000000 _exit
0001000c g     O .rwdata	00000004 stop
0000083c g     F .text	00000004 alt_icache_flush_all
00010010 g     O .rwdata	00000004 alt_priority_mask
00000674 g     F .text	00000038 alt_ic_irq_enable
00000764 g     F .text	00000084 alt_load



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08406014 	ori	at,at,384
    jmp r1
   8:	0800683a 	jmp	at

0000000c <_exit>:
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
  94:	e93fff04 	addi	r4,ea,-4
  98:	000015c0 	call	15c <alt_instruction_exception_entry>
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>
  a0:	ebffff04 	addi	r15,ea,-4
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defffe04 	addi	sp,sp,-8
 100:	dfc00115 	stw	ra,4(sp)
 104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 108:	0009313a 	rdctl	r4,ipending
    do
    {
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 10c:	04000074 	movhi	r16,1
 110:	84000d04 	addi	r16,r16,52
    i = 0;
 114:	0005883a 	mov	r2,zero
    mask = 1;
 118:	00c00044 	movi	r3,1
      if (active & mask)
 11c:	20ca703a 	and	r5,r4,r3
 120:	28000b26 	beq	r5,zero,150 <alt_irq_handler+0x54>
        alt_irq[i].handler(alt_irq[i].context); 
 124:	100490fa 	slli	r2,r2,3
 128:	8085883a 	add	r2,r16,r2
 12c:	10c00017 	ldw	r3,0(r2)
 130:	11000117 	ldw	r4,4(r2)
 134:	183ee83a 	callr	r3
 138:	0009313a 	rdctl	r4,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
 13c:	203ff51e 	bne	r4,zero,114 <alt_irq_handler+0x18>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 140:	dfc00117 	ldw	ra,4(sp)
 144:	dc000017 	ldw	r16,0(sp)
 148:	dec00204 	addi	sp,sp,8
 14c:	f800283a 	ret
      mask <<= 1;
 150:	1806907a 	slli	r3,r3,1
      i++;
 154:	10800044 	addi	r2,r2,1
      if (active & mask)
 158:	003ff006 	br	11c <alt_irq_handler+0x20>

0000015c <alt_instruction_exception_entry>:
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 15c:	d0a00917 	ldw	r2,-32732(gp)
{
 160:	200b883a 	mov	r5,r4
  if(alt_instruction_exception_handler) {
 164:	10000326 	beq	r2,zero,174 <alt_instruction_exception_entry+0x18>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 168:	000d883a 	mov	r6,zero
 16c:	013fffc4 	movi	r4,-1
 170:	1000683a 	jmp	r2
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 174:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
 178:	0005883a 	mov	r2,zero
 17c:	f800283a 	ret

Disassembly of section .text:

00000180 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 180:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
 184:	ded00014 	ori	sp,sp,16384
    movhi gp, %hi(_gp)
 188:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
 18c:	d6a00314 	ori	gp,gp,32780
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 190:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
 194:	10800514 	ori	r2,r2,20

    movhi r3, %hi(__bss_end)
 198:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
 19c:	18c04d14 	ori	r3,r3,308

    beq r2, r3, 1f
 1a0:	10c00326 	beq	r2,r3,1b0 <_start+0x30>

0:
    stw zero, (r2)
 1a4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 1a8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 1ac:	10fffd36 	bltu	r2,r3,1a4 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 1b0:	00007640 	call	764 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 1b4:	00007e80 	call	7e8 <alt_main>

000001b8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 1b8:	003fff06 	br	1b8 <alt_after_alt_main>

000001bc <decoder>:

int decoder (int num) {

	int binarySegments = 0b1111111;

	if(num == 0){
 1bc:	208002a8 	cmpgeui	r2,r4,10
 1c0:	1000041e 	bne	r2,zero,1d4 <decoder+0x18>
 1c4:	00800074 	movhi	r2,1
 1c8:	2085883a 	add	r2,r4,r2
 1cc:	10800007 	ldb	r2,0(r2)
 1d0:	f800283a 	ret
int decoder (int num) {
 1d4:	00800044 	movi	r2,1
	}else{
		binarySegments = 0b0000001;
	}

	return binarySegments;
};
 1d8:	f800283a 	ret

000001dc <timer_isr>:

static void timer_isr(void *context){
 1dc:	defffc04 	addi	sp,sp,-16
	(void) context;

	switchSelect = IORD_ALTERA_AVALON_PIO_DATA(PIO_SELECTMODE_0_BASE);
 1e0:	008001b4 	movhi	r2,6
static void timer_isr(void *context){
 1e4:	dfc00315 	stw	ra,12(sp)
 1e8:	dc800215 	stw	r18,8(sp)
 1ec:	dc400115 	stw	r17,4(sp)
 1f0:	dc000015 	stw	r16,0(sp)
	switchSelect = IORD_ALTERA_AVALON_PIO_DATA(PIO_SELECTMODE_0_BASE);
 1f4:	10800037 	ldwio	r2,0(r2)
	int start_aux = IORD_ALTERA_AVALON_PIO_DATA(PIO_START_0_BASE);
 1f8:	00c00474 	movhi	r3,17
	switchSelect = IORD_ALTERA_AVALON_PIO_DATA(PIO_SELECTMODE_0_BASE);
 1fc:	d0a00315 	stw	r2,-32756(gp)
	int start_aux = IORD_ALTERA_AVALON_PIO_DATA(PIO_START_0_BASE);
 200:	1c800037 	ldwio	r18,0(r3)
	int stop_aux = IORD_ALTERA_AVALON_PIO_DATA(PIO_STOP_0_BASE);
 204:	00c00434 	movhi	r3,16
 208:	1c400037 	ldwio	r17,0(r3)

	if(switchSelect == 0b01){
 20c:	10c00058 	cmpnei	r3,r2,1
 210:	18001b1e 	bne	r3,zero,280 <timer_isr+0xa4>
		//Configuracion 0b01 en los switches, muetran el estado Milisegundos
		IOWR_ALTERA_AVALON_PIO_DATA(PIO_MILISECONDS_0_BASE, decoder(counter / 100 % 10));
 214:	d1200417 	ldw	r4,-32752(gp)
 218:	01401904 	movi	r5,100
 21c:	00004bc0 	call	4bc <__divsi3>
 220:	01400284 	movi	r5,10
 224:	1009883a 	mov	r4,r2
 228:	000053c0 	call	53c <__modsi3>
 22c:	1009883a 	mov	r4,r2
 230:	00001bc0 	call	1bc <decoder>
 234:	00c000f4 	movhi	r3,3
 238:	18800035 	stwio	r2,0(r3)
		IOWR_ALTERA_AVALON_PIO_DATA(PIO_MILISECONDS_1_BASE, decoder(counter / 100 / 10));
 23c:	d1200417 	ldw	r4,-32752(gp)
 240:	0140fa04 	movi	r5,1000
 244:	00004bc0 	call	4bc <__divsi3>
 248:	1009883a 	mov	r4,r2
 24c:	00001bc0 	call	1bc <decoder>
 250:	00c001f4 	movhi	r3,7
 254:	18800035 	stwio	r2,0(r3)
		IOWR_ALTERA_AVALON_PIO_DATA(PIO_SECONDS_0_BASE, decoder(0));
 258:	00801004 	movi	r2,64
 25c:	00c00134 	movhi	r3,4
 260:	18800035 	stwio	r2,0(r3)
		IOWR_ALTERA_AVALON_PIO_DATA(PIO_SECONDS_1_BASE, decoder(0));
 264:	00c00234 	movhi	r3,8
 268:	18800035 	stwio	r2,0(r3)
		IOWR_ALTERA_AVALON_PIO_DATA(PIO_MINUTES_0_BASE, decoder(0));
 26c:	00c00174 	movhi	r3,5
 270:	18800035 	stwio	r2,0(r3)
		IOWR_ALTERA_AVALON_PIO_DATA(PIO_MILISECONDS_0_BASE, decoder(counter / 100 % 10));
		IOWR_ALTERA_AVALON_PIO_DATA(PIO_MILISECONDS_1_BASE, decoder(counter / 100 / 10));
		IOWR_ALTERA_AVALON_PIO_DATA(PIO_SECONDS_0_BASE, decoder(counter / 1000 % 10));
		IOWR_ALTERA_AVALON_PIO_DATA(PIO_SECONDS_1_BASE, decoder(counter / 1000 / 10));
		IOWR_ALTERA_AVALON_PIO_DATA(PIO_MINUTES_0_BASE, decoder(counter / 60000 % 10));
		IOWR_ALTERA_AVALON_PIO_DATA(PIO_MINUTES_1_BASE, decoder(counter / 60000 / 10));
 274:	00c00274 	movhi	r3,9
 278:	18800035 	stwio	r2,0(r3)
 27c:	00001c06 	br	2f0 <timer_isr+0x114>
	else if(switchSelect == 0b10){
 280:	10c00098 	cmpnei	r3,r2,2
 284:	1800301e 	bne	r3,zero,348 <timer_isr+0x16c>
		IOWR_ALTERA_AVALON_PIO_DATA(PIO_MILISECONDS_0_BASE, decoder(0));
 288:	04001004 	movi	r16,64
 28c:	008000f4 	movhi	r2,3
 290:	14000035 	stwio	r16,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(PIO_MILISECONDS_1_BASE, decoder(0));
 294:	008001f4 	movhi	r2,7
 298:	14000035 	stwio	r16,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(PIO_SECONDS_0_BASE, decoder(counter / 1000 % 10));
 29c:	d1200417 	ldw	r4,-32752(gp)
 2a0:	0140fa04 	movi	r5,1000
 2a4:	00004bc0 	call	4bc <__divsi3>
 2a8:	01400284 	movi	r5,10
 2ac:	1009883a 	mov	r4,r2
 2b0:	000053c0 	call	53c <__modsi3>
 2b4:	1009883a 	mov	r4,r2
 2b8:	00001bc0 	call	1bc <decoder>
 2bc:	00c00134 	movhi	r3,4
 2c0:	18800035 	stwio	r2,0(r3)
		IOWR_ALTERA_AVALON_PIO_DATA(PIO_SECONDS_1_BASE, decoder(counter / 1000 / 10));
 2c4:	d1200417 	ldw	r4,-32752(gp)
 2c8:	0149c404 	movi	r5,10000
 2cc:	00004bc0 	call	4bc <__divsi3>
 2d0:	1009883a 	mov	r4,r2
 2d4:	00001bc0 	call	1bc <decoder>
 2d8:	00c00234 	movhi	r3,8
 2dc:	18800035 	stwio	r2,0(r3)
		IOWR_ALTERA_AVALON_PIO_DATA(PIO_MINUTES_0_BASE, decoder(0));
 2e0:	00800174 	movhi	r2,5
 2e4:	14000035 	stwio	r16,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(PIO_MINUTES_1_BASE, decoder(0));
 2e8:	00800274 	movhi	r2,9
 2ec:	14000035 	stwio	r16,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(PIO_MINUTES_0_BASE, decoder(4));
		IOWR_ALTERA_AVALON_PIO_DATA(PIO_MINUTES_1_BASE, decoder(5));
	};

	//Actualizar los milisegundos cada 10 y actualizar cada milisegundo
	if(start == 0b1){
 2f0:	d0a00217 	ldw	r2,-32760(gp)
 2f4:	10c00058 	cmpnei	r3,r2,1
 2f8:	1800031e 	bne	r3,zero,308 <timer_isr+0x12c>
		counter ++;
 2fc:	d0e00417 	ldw	r3,-32752(gp)
 300:	18c00044 	addi	r3,r3,1
 304:	d0e00415 	stw	r3,-32752(gp)
	}

	if(start_aux == 1 & stop == 1){
 308:	d0e00017 	ldw	r3,-32768(gp)
 30c:	18c00060 	cmpeqi	r3,r3,1
 310:	18005526 	beq	r3,zero,468 <timer_isr+0x28c>
 314:	94800060 	cmpeqi	r18,r18,1
 318:	90005326 	beq	r18,zero,468 <timer_isr+0x28c>
		start = 1;
 31c:	00800044 	movi	r2,1
 320:	d0a00215 	stw	r2,-32760(gp)
		stop = 0;
 324:	d0200015 	stw	zero,-32768(gp)
		stop = 1;
	}


	// Regresar el timer para que vuelta a hacer una interrucion
	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_0_BASE, 0);
 328:	008000b4 	movhi	r2,2
 32c:	10000035 	stwio	zero,0(r2)

}
 330:	dfc00317 	ldw	ra,12(sp)
 334:	dc800217 	ldw	r18,8(sp)
 338:	dc400117 	ldw	r17,4(sp)
 33c:	dc000017 	ldw	r16,0(sp)
 340:	dec00404 	addi	sp,sp,16
 344:	f800283a 	ret
	else if(switchSelect == 0b11){
 348:	108000d8 	cmpnei	r2,r2,3
 34c:	1000331e 	bne	r2,zero,41c <timer_isr+0x240>
		IOWR_ALTERA_AVALON_PIO_DATA(PIO_MILISECONDS_0_BASE, decoder(counter / 100 % 10));
 350:	d1200417 	ldw	r4,-32752(gp)
 354:	01401904 	movi	r5,100
 358:	00004bc0 	call	4bc <__divsi3>
 35c:	01400284 	movi	r5,10
 360:	1009883a 	mov	r4,r2
 364:	000053c0 	call	53c <__modsi3>
 368:	1009883a 	mov	r4,r2
 36c:	00001bc0 	call	1bc <decoder>
 370:	00c000f4 	movhi	r3,3
 374:	18800035 	stwio	r2,0(r3)
		IOWR_ALTERA_AVALON_PIO_DATA(PIO_MILISECONDS_1_BASE, decoder(counter / 100 / 10));
 378:	d1200417 	ldw	r4,-32752(gp)
 37c:	0140fa04 	movi	r5,1000
 380:	00004bc0 	call	4bc <__divsi3>
 384:	1009883a 	mov	r4,r2
 388:	00001bc0 	call	1bc <decoder>
 38c:	00c001f4 	movhi	r3,7
 390:	18800035 	stwio	r2,0(r3)
		IOWR_ALTERA_AVALON_PIO_DATA(PIO_SECONDS_0_BASE, decoder(counter / 1000 % 10));
 394:	d1200417 	ldw	r4,-32752(gp)
 398:	0140fa04 	movi	r5,1000
 39c:	00004bc0 	call	4bc <__divsi3>
 3a0:	01400284 	movi	r5,10
 3a4:	1009883a 	mov	r4,r2
 3a8:	000053c0 	call	53c <__modsi3>
 3ac:	1009883a 	mov	r4,r2
 3b0:	00001bc0 	call	1bc <decoder>
 3b4:	00c00134 	movhi	r3,4
 3b8:	18800035 	stwio	r2,0(r3)
		IOWR_ALTERA_AVALON_PIO_DATA(PIO_SECONDS_1_BASE, decoder(counter / 1000 / 10));
 3bc:	d1200417 	ldw	r4,-32752(gp)
 3c0:	0149c404 	movi	r5,10000
 3c4:	00004bc0 	call	4bc <__divsi3>
 3c8:	1009883a 	mov	r4,r2
 3cc:	00001bc0 	call	1bc <decoder>
 3d0:	00c00234 	movhi	r3,8
 3d4:	18800035 	stwio	r2,0(r3)
		IOWR_ALTERA_AVALON_PIO_DATA(PIO_MINUTES_0_BASE, decoder(counter / 60000 % 10));
 3d8:	d1200417 	ldw	r4,-32752(gp)
 3dc:	017a9814 	movui	r5,60000
 3e0:	00004bc0 	call	4bc <__divsi3>
 3e4:	01400284 	movi	r5,10
 3e8:	1009883a 	mov	r4,r2
 3ec:	000053c0 	call	53c <__modsi3>
 3f0:	1009883a 	mov	r4,r2
 3f4:	00001bc0 	call	1bc <decoder>
 3f8:	00c00174 	movhi	r3,5
 3fc:	18800035 	stwio	r2,0(r3)
		IOWR_ALTERA_AVALON_PIO_DATA(PIO_MINUTES_1_BASE, decoder(counter / 60000 / 10));
 400:	d1200417 	ldw	r4,-32752(gp)
 404:	01400274 	movhi	r5,9
 408:	2949f004 	addi	r5,r5,10176
 40c:	00004bc0 	call	4bc <__divsi3>
 410:	1009883a 	mov	r4,r2
 414:	00001bc0 	call	1bc <decoder>
 418:	003f9606 	br	274 <timer_isr+0x98>
		IOWR_ALTERA_AVALON_PIO_DATA(PIO_MILISECONDS_0_BASE, decoder(0));
 41c:	00c01004 	movi	r3,64
 420:	008000f4 	movhi	r2,3
 424:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(PIO_MILISECONDS_1_BASE, decoder(1));
 428:	00c01e44 	movi	r3,121
 42c:	008001f4 	movhi	r2,7
 430:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(PIO_SECONDS_0_BASE, decoder(2));
 434:	00c00904 	movi	r3,36
 438:	00800134 	movhi	r2,4
 43c:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(PIO_SECONDS_1_BASE, decoder(3));
 440:	00c00c04 	movi	r3,48
 444:	00800234 	movhi	r2,8
 448:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(PIO_MINUTES_0_BASE, decoder(4));
 44c:	00c00644 	movi	r3,25
 450:	00800174 	movhi	r2,5
 454:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(PIO_MINUTES_1_BASE, decoder(5));
 458:	00c00484 	movi	r3,18
 45c:	00800274 	movhi	r2,9
 460:	10c00035 	stwio	r3,0(r2)
 464:	003fa206 	br	2f0 <timer_isr+0x114>
	}else if(stop_aux == 1 & start == 1){
 468:	8c400060 	cmpeqi	r17,r17,1
 46c:	883fae26 	beq	r17,zero,328 <timer_isr+0x14c>
 470:	10800060 	cmpeqi	r2,r2,1
 474:	103fac26 	beq	r2,zero,328 <timer_isr+0x14c>
		stop = 1;
 478:	00800044 	movi	r2,1
		start = 0;
 47c:	d0200215 	stw	zero,-32760(gp)
		stop = 1;
 480:	d0a00015 	stw	r2,-32768(gp)
 484:	003fa806 	br	328 <timer_isr+0x14c>

00000488 <main>:

int main()
{
 488:	defffe04 	addi	sp,sp,-8

	alt_ic_isr_register(
 48c:	01800034 	movhi	r6,0
 490:	d8000015 	stw	zero,0(sp)
 494:	000f883a 	mov	r7,zero
 498:	31807704 	addi	r6,r6,476
 49c:	000b883a 	mov	r5,zero
 4a0:	0009883a 	mov	r4,zero
{
 4a4:	dfc00115 	stw	ra,4(sp)
	alt_ic_isr_register(
 4a8:	00006700 	call	670 <alt_ic_isr_register>
		TIMER_0_IRQ,
		timer_isr,
		NULL,
		NULL);

	IOWR_ALTERA_AVALON_TIMER_CONTROL(
 4ac:	00c000c4 	movi	r3,3
 4b0:	008000b4 	movhi	r2,2
 4b4:	10c00135 	stwio	r3,4(r2)
		TIMER_0_BASE,
		ALTERA_AVALON_TIMER_CONTROL_ITO_MSK
		| ALTERA_AVALON_TIMER_CONTROL_CONT_MSK
	);

  while (1);
 4b8:	003fff06 	br	4b8 <main+0x30>

000004bc <__divsi3>:
 4bc:	20001a16 	blt	r4,zero,528 <__divsi3+0x6c>
 4c0:	000f883a 	mov	r7,zero
 4c4:	2800020e 	bge	r5,zero,4d0 <__divsi3+0x14>
 4c8:	014bc83a 	sub	r5,zero,r5
 4cc:	39c0005c 	xori	r7,r7,1
 4d0:	200d883a 	mov	r6,r4
 4d4:	00c00044 	movi	r3,1
 4d8:	2900092e 	bgeu	r5,r4,500 <__divsi3+0x44>
 4dc:	00800804 	movi	r2,32
 4e0:	00c00044 	movi	r3,1
 4e4:	00000106 	br	4ec <__divsi3+0x30>
 4e8:	10001226 	beq	r2,zero,534 <__divsi3+0x78>
 4ec:	294b883a 	add	r5,r5,r5
 4f0:	10bfffc4 	addi	r2,r2,-1
 4f4:	18c7883a 	add	r3,r3,r3
 4f8:	293ffb36 	bltu	r5,r4,4e8 <__divsi3+0x2c>
 4fc:	18000d26 	beq	r3,zero,534 <__divsi3+0x78>
 500:	0005883a 	mov	r2,zero
 504:	31400236 	bltu	r6,r5,510 <__divsi3+0x54>
 508:	314dc83a 	sub	r6,r6,r5
 50c:	10c4b03a 	or	r2,r2,r3
 510:	1806d07a 	srli	r3,r3,1
 514:	280ad07a 	srli	r5,r5,1
 518:	183ffa1e 	bne	r3,zero,504 <__divsi3+0x48>
 51c:	38000126 	beq	r7,zero,524 <__divsi3+0x68>
 520:	0085c83a 	sub	r2,zero,r2
 524:	f800283a 	ret
 528:	0109c83a 	sub	r4,zero,r4
 52c:	01c00044 	movi	r7,1
 530:	003fe406 	br	4c4 <__divsi3+0x8>
 534:	0005883a 	mov	r2,zero
 538:	003ff806 	br	51c <__divsi3+0x60>

0000053c <__modsi3>:
 53c:	20001716 	blt	r4,zero,59c <__modsi3+0x60>
 540:	000f883a 	mov	r7,zero
 544:	2005883a 	mov	r2,r4
 548:	2800010e 	bge	r5,zero,550 <__modsi3+0x14>
 54c:	014bc83a 	sub	r5,zero,r5
 550:	00c00044 	movi	r3,1
 554:	2900092e 	bgeu	r5,r4,57c <__modsi3+0x40>
 558:	01800804 	movi	r6,32
 55c:	00c00044 	movi	r3,1
 560:	00000106 	br	568 <__modsi3+0x2c>
 564:	30001026 	beq	r6,zero,5a8 <__modsi3+0x6c>
 568:	294b883a 	add	r5,r5,r5
 56c:	31bfffc4 	addi	r6,r6,-1
 570:	18c7883a 	add	r3,r3,r3
 574:	293ffb36 	bltu	r5,r4,564 <__modsi3+0x28>
 578:	18000b26 	beq	r3,zero,5a8 <__modsi3+0x6c>
 57c:	1806d07a 	srli	r3,r3,1
 580:	11400136 	bltu	r2,r5,588 <__modsi3+0x4c>
 584:	1145c83a 	sub	r2,r2,r5
 588:	280ad07a 	srli	r5,r5,1
 58c:	183ffb1e 	bne	r3,zero,57c <__modsi3+0x40>
 590:	38000126 	beq	r7,zero,598 <__modsi3+0x5c>
 594:	0085c83a 	sub	r2,zero,r2
 598:	f800283a 	ret
 59c:	0109c83a 	sub	r4,zero,r4
 5a0:	01c00044 	movi	r7,1
 5a4:	003fe706 	br	544 <__modsi3+0x8>
 5a8:	2005883a 	mov	r2,r4
 5ac:	003ff806 	br	590 <__modsi3+0x54>

000005b0 <__udivsi3>:
 5b0:	200d883a 	mov	r6,r4
 5b4:	2900152e 	bgeu	r5,r4,60c <__udivsi3+0x5c>
 5b8:	28001416 	blt	r5,zero,60c <__udivsi3+0x5c>
 5bc:	00800804 	movi	r2,32
 5c0:	00c00044 	movi	r3,1
 5c4:	00000206 	br	5d0 <__udivsi3+0x20>
 5c8:	10000e26 	beq	r2,zero,604 <__udivsi3+0x54>
 5cc:	28000416 	blt	r5,zero,5e0 <__udivsi3+0x30>
 5d0:	294b883a 	add	r5,r5,r5
 5d4:	10bfffc4 	addi	r2,r2,-1
 5d8:	18c7883a 	add	r3,r3,r3
 5dc:	293ffa36 	bltu	r5,r4,5c8 <__udivsi3+0x18>
 5e0:	18000826 	beq	r3,zero,604 <__udivsi3+0x54>
 5e4:	0005883a 	mov	r2,zero
 5e8:	31400236 	bltu	r6,r5,5f4 <__udivsi3+0x44>
 5ec:	314dc83a 	sub	r6,r6,r5
 5f0:	10c4b03a 	or	r2,r2,r3
 5f4:	1806d07a 	srli	r3,r3,1
 5f8:	280ad07a 	srli	r5,r5,1
 5fc:	183ffa1e 	bne	r3,zero,5e8 <__udivsi3+0x38>
 600:	f800283a 	ret
 604:	0005883a 	mov	r2,zero
 608:	f800283a 	ret
 60c:	00c00044 	movi	r3,1
 610:	003ff406 	br	5e4 <__udivsi3+0x34>

00000614 <__umodsi3>:
 614:	2005883a 	mov	r2,r4
 618:	2900132e 	bgeu	r5,r4,668 <__umodsi3+0x54>
 61c:	28001216 	blt	r5,zero,668 <__umodsi3+0x54>
 620:	01800804 	movi	r6,32
 624:	00c00044 	movi	r3,1
 628:	00000206 	br	634 <__umodsi3+0x20>
 62c:	30000c26 	beq	r6,zero,660 <__umodsi3+0x4c>
 630:	28000416 	blt	r5,zero,644 <__umodsi3+0x30>
 634:	294b883a 	add	r5,r5,r5
 638:	31bfffc4 	addi	r6,r6,-1
 63c:	18c7883a 	add	r3,r3,r3
 640:	293ffa36 	bltu	r5,r4,62c <__umodsi3+0x18>
 644:	18000626 	beq	r3,zero,660 <__umodsi3+0x4c>
 648:	1806d07a 	srli	r3,r3,1
 64c:	11400136 	bltu	r2,r5,654 <__umodsi3+0x40>
 650:	1145c83a 	sub	r2,r2,r5
 654:	280ad07a 	srli	r5,r5,1
 658:	183ffb1e 	bne	r3,zero,648 <__umodsi3+0x34>
 65c:	f800283a 	ret
 660:	2005883a 	mov	r2,r4
 664:	f800283a 	ret
 668:	00c00044 	movi	r3,1
 66c:	003ff606 	br	648 <__umodsi3+0x34>

00000670 <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 670:	00006fc1 	jmpi	6fc <alt_iic_isr_register>

00000674 <alt_ic_irq_enable>:
  NIOS2_READ_STATUS (context);
 674:	0007303a 	rdctl	r3,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 678:	00bfff84 	movi	r2,-2
 67c:	1884703a 	and	r2,r3,r2
 680:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
 684:	00800044 	movi	r2,1
 688:	d1200517 	ldw	r4,-32748(gp)
 68c:	114a983a 	sll	r5,r2,r5
 690:	290ab03a 	or	r5,r5,r4
 694:	d1600515 	stw	r5,-32748(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 698:	d0a00517 	ldw	r2,-32748(gp)
 69c:	100170fa 	wrctl	ienable,r2
  NIOS2_WRITE_STATUS (context);
 6a0:	1801703a 	wrctl	status,r3
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
 6a4:	0005883a 	mov	r2,zero
 6a8:	f800283a 	ret

000006ac <alt_ic_irq_disable>:
  NIOS2_READ_STATUS (context);
 6ac:	0007303a 	rdctl	r3,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 6b0:	00bfff84 	movi	r2,-2
 6b4:	1884703a 	and	r2,r3,r2
 6b8:	1001703a 	wrctl	status,r2
  alt_irq_active &= ~(1 << id);
 6bc:	00bfff84 	movi	r2,-2
 6c0:	d1200517 	ldw	r4,-32748(gp)
 6c4:	114a183a 	rol	r5,r2,r5
 6c8:	290a703a 	and	r5,r5,r4
 6cc:	d1600515 	stw	r5,-32748(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 6d0:	d0a00517 	ldw	r2,-32748(gp)
 6d4:	100170fa 	wrctl	ienable,r2
  NIOS2_WRITE_STATUS (context);
 6d8:	1801703a 	wrctl	status,r3
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
 6dc:	0005883a 	mov	r2,zero
 6e0:	f800283a 	ret

000006e4 <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 6e4:	000730fa 	rdctl	r3,ienable

    return (irq_enabled & (1 << irq)) ? 1: 0;
 6e8:	00800044 	movi	r2,1
 6ec:	1144983a 	sll	r2,r2,r5
 6f0:	10c4703a 	and	r2,r2,r3
}
 6f4:	1004c03a 	cmpne	r2,r2,zero
 6f8:	f800283a 	ret

000006fc <alt_iic_isr_register>:
{
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
 6fc:	28800808 	cmpgei	r2,r5,32
 700:	1000161e 	bne	r2,zero,75c <alt_iic_isr_register+0x60>
{
 704:	defffe04 	addi	sp,sp,-8
 708:	dfc00115 	stw	ra,4(sp)
 70c:	dc000015 	stw	r16,0(sp)
  NIOS2_READ_STATUS (context);
 710:	0021303a 	rdctl	r16,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 714:	00bfff84 	movi	r2,-2
 718:	8084703a 	and	r2,r16,r2
 71c:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
 720:	280690fa 	slli	r3,r5,3
 724:	00800074 	movhi	r2,1
 728:	10800d04 	addi	r2,r2,52
 72c:	10c5883a 	add	r2,r2,r3
 730:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = isr_context;
 734:	11c00115 	stw	r7,4(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 738:	30000626 	beq	r6,zero,754 <alt_iic_isr_register+0x58>
 73c:	00006740 	call	674 <alt_ic_irq_enable>
  NIOS2_WRITE_STATUS (context);
 740:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
 744:	dfc00117 	ldw	ra,4(sp)
 748:	dc000017 	ldw	r16,0(sp)
 74c:	dec00204 	addi	sp,sp,8
 750:	f800283a 	ret
    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 754:	00006ac0 	call	6ac <alt_ic_irq_disable>
 758:	003ff906 	br	740 <alt_iic_isr_register+0x44>
  int rc = -EINVAL;  
 75c:	00bffa84 	movi	r2,-22
}
 760:	f800283a 	ret

00000764 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 764:	deffff04 	addi	sp,sp,-4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 768:	01000074 	movhi	r4,1
 76c:	01400034 	movhi	r5,0
 770:	dfc00015 	stw	ra,0(sp)
 774:	21000304 	addi	r4,r4,12
 778:	29422804 	addi	r5,r5,2208
 77c:	21400426 	beq	r4,r5,790 <alt_load+0x2c>
  {
    while( to != end )
    {
      *to++ = *from++;
 780:	01800074 	movhi	r6,1
 784:	31800504 	addi	r6,r6,20
 788:	310dc83a 	sub	r6,r6,r4
 78c:	000086c0 	call	86c <memcpy>
  if (to != from)
 790:	01000034 	movhi	r4,0
 794:	01400034 	movhi	r5,0
 798:	21000804 	addi	r4,r4,32
 79c:	29400804 	addi	r5,r5,32
 7a0:	21400426 	beq	r4,r5,7b4 <alt_load+0x50>
      *to++ = *from++;
 7a4:	01800034 	movhi	r6,0
 7a8:	31806004 	addi	r6,r6,384
 7ac:	310dc83a 	sub	r6,r6,r4
 7b0:	000086c0 	call	86c <memcpy>
  if (to != from)
 7b4:	01000074 	movhi	r4,1
 7b8:	01400034 	movhi	r5,0
 7bc:	21000004 	addi	r4,r4,0
 7c0:	29422504 	addi	r5,r5,2196
 7c4:	21400426 	beq	r4,r5,7d8 <alt_load+0x74>
      *to++ = *from++;
 7c8:	01800074 	movhi	r6,1
 7cc:	31800304 	addi	r6,r6,12
 7d0:	310dc83a 	sub	r6,r6,r4
 7d4:	000086c0 	call	86c <memcpy>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 7d8:	00008380 	call	838 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
 7dc:	dfc00017 	ldw	ra,0(sp)
 7e0:	dec00104 	addi	sp,sp,4
  alt_icache_flush_all();
 7e4:	000083c1 	jmpi	83c <alt_icache_flush_all>

000007e8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 7e8:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 7ec:	0009883a 	mov	r4,zero
{
 7f0:	dfc00015 	stw	ra,0(sp)
  alt_irq_init (NULL);
 7f4:	00008140 	call	814 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 7f8:	00008340 	call	834 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 7fc:	d1a00617 	ldw	r6,-32744(gp)
 800:	d1600717 	ldw	r5,-32740(gp)
 804:	d1200817 	ldw	r4,-32736(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
 808:	dfc00017 	ldw	ra,0(sp)
 80c:	dec00104 	addi	sp,sp,4
  main (alt_argc, alt_argv, alt_envp);
 810:	00004881 	jmpi	488 <main>

00000814 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 814:	deffff04 	addi	sp,sp,-4
 818:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 81c:	00008640 	call	864 <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 820:	00800044 	movi	r2,1
 824:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 828:	dfc00017 	ldw	ra,0(sp)
 82c:	dec00104 	addi	sp,sp,4
 830:	f800283a 	ret

00000834 <alt_sys_init>:
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
}
 834:	f800283a 	ret

00000838 <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 838:	f800283a 	ret

0000083c <alt_icache_flush_all>:
void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 83c:	f800283a 	ret

00000840 <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
 840:	213ffe84 	addi	r4,r4,-6
 844:	20800428 	cmpgeui	r2,r4,16
 848:	1000041e 	bne	r2,zero,85c <alt_exception_cause_generated_bad_addr+0x1c>
 84c:	00a2c8d4 	movui	r2,35619
 850:	1104d83a 	srl	r2,r2,r4
 854:	1080004c 	andi	r2,r2,1
 858:	f800283a 	ret
 85c:	0005883a 	mov	r2,zero
    return 0;

  default:
    return 0;
  }
}
 860:	f800283a 	ret

00000864 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
 864:	000170fa 	wrctl	ienable,zero
}
 868:	f800283a 	ret

0000086c <memcpy>:
 86c:	2005883a 	mov	r2,r4
 870:	0007883a 	mov	r3,zero
 874:	30c0011e 	bne	r6,r3,87c <memcpy+0x10>
 878:	f800283a 	ret
 87c:	28cf883a 	add	r7,r5,r3
 880:	39c00003 	ldbu	r7,0(r7)
 884:	10c9883a 	add	r4,r2,r3
 888:	18c00044 	addi	r3,r3,1
 88c:	21c00005 	stb	r7,0(r4)
 890:	003ff806 	br	874 <memcpy+0x8>
